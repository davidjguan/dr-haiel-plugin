{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport { useCombobox } from 'downshift';\nimport PropTypes from 'prop-types';\nimport React__default, { forwardRef, useEffect, useContext, useRef, useState, useMemo } from 'react';\nimport '../Text/index.js';\nimport { WarningFilled, WarningAltFilled, Checkmark } from '@carbon/icons-react';\nimport ListBox from '../ListBox/index.js';\nimport { useId } from '../../internal/useId.js';\nimport mergeRefs from '../../tools/mergeRefs.js';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport '../FluidForm/FluidForm.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\nimport { useFloating, flip, autoUpdate } from '@floating-ui/react';\nimport { Text } from '../Text/Text.js';\nimport { match } from '../../internal/keyboard/match.js';\nimport ListBoxSelection from '../ListBox/next/ListBoxSelection.js';\nimport ListBoxTrigger from '../ListBox/next/ListBoxTrigger.js';\nimport { ListBoxSize } from '../ListBox/ListBoxPropTypes.js';\nimport { Space, Enter, Escape, Home, End } from '../../internal/keyboard/keys.js';\nconst {\n  InputBlur,\n  InputKeyDownEnter,\n  FunctionToggleMenu,\n  ToggleButtonClick,\n  ItemMouseMove,\n  InputKeyDownArrowUp,\n  InputKeyDownArrowDown,\n  MenuMouseLeave\n} = useCombobox.stateChangeTypes;\nconst defaultItemToString = item => {\n  if (typeof item === 'string') {\n    return item;\n  }\n  if (typeof item === 'number') {\n    return \"\".concat(item);\n  }\n  if (item !== null && typeof item === 'object' && 'label' in item && typeof item['label'] === 'string') {\n    return item['label'];\n  }\n  return '';\n};\nconst defaultShouldFilterItem = () => true;\nconst getInputValue = _ref => {\n  let {\n    initialSelectedItem,\n    inputValue,\n    itemToString,\n    selectedItem\n  } = _ref;\n  if (selectedItem) {\n    return itemToString(selectedItem);\n  }\n  if (initialSelectedItem) {\n    return itemToString(initialSelectedItem);\n  }\n  return inputValue || '';\n};\nconst findHighlightedIndex = (_ref2, inputValue) => {\n  let {\n    items,\n    itemToString = defaultItemToString\n  } = _ref2;\n  if (!inputValue) {\n    return -1;\n  }\n  const searchValue = inputValue.toLowerCase();\n  for (let i = 0; i < items.length; i++) {\n    const item = itemToString(items[i]).toLowerCase();\n    if (!items[i]['disabled'] && item.indexOf(searchValue) !== -1) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Message ids that will be passed to translateWithId().\n * Combination of message ids from ListBox/next/ListBoxSelection.js and\n * ListBox/next/ListBoxTrigger.js, but we can't access those values directly\n * because those components aren't Typescript.  (If you try, TranslationKey\n * ends up just being defined as \"string\".)\n */\n\nconst ComboBox = /*#__PURE__*/forwardRef((props, ref) => {\n  var _refs$reference, _slug$type, _textInput$current;\n  const {\n    ['aria-label']: ariaLabel = 'Choose an item',\n    ariaLabel: deprecatedAriaLabel,\n    autoAlign = false,\n    className: containerClassName,\n    direction = 'bottom',\n    disabled = false,\n    downshiftActions,\n    downshiftProps,\n    helperText,\n    id,\n    initialSelectedItem,\n    invalid,\n    invalidText,\n    items,\n    itemToElement = null,\n    itemToString = defaultItemToString,\n    light,\n    onChange,\n    onInputChange,\n    onToggleClick,\n    placeholder,\n    readOnly,\n    selectedItem: selectedItemProp,\n    shouldFilterItem = defaultShouldFilterItem,\n    size,\n    titleText,\n    translateWithId,\n    warn,\n    warnText,\n    allowCustomValue = false,\n    slug,\n    ...rest\n  } = props;\n  const {\n    refs,\n    floatingStyles\n  } = useFloating(autoAlign ? {\n    placement: direction,\n    strategy: 'fixed',\n    middleware: [flip()],\n    whileElementsMounted: autoUpdate\n  } : {});\n  const parentWidth = refs === null || refs === void 0 || (_refs$reference = refs.reference) === null || _refs$reference === void 0 || (_refs$reference = _refs$reference.current) === null || _refs$reference === void 0 ? void 0 : _refs$reference.clientWidth;\n  useEffect(() => {\n    if (autoAlign) {\n      Object.keys(floatingStyles).forEach(style => {\n        if (refs.floating.current) {\n          refs.floating.current.style[style] = floatingStyles[style];\n        }\n      });\n      if (parentWidth && refs.floating.current) {\n        refs.floating.current.style.width = parentWidth + 'px';\n      }\n    }\n  }, [autoAlign, floatingStyles, refs.floating, parentWidth]);\n  const prefix = usePrefix();\n  const {\n    isFluid\n  } = useContext(FormContext);\n  const textInput = useRef(null);\n  const comboBoxInstanceId = useId();\n  const [inputValue, setInputValue] = useState(getInputValue({\n    initialSelectedItem,\n    inputValue: '',\n    itemToString,\n    selectedItem: selectedItemProp\n  }));\n  const [isFocused, setIsFocused] = useState(false);\n  const [prevSelectedItem, setPrevSelectedItem] = useState();\n  const [doneInitialSelectedItem, setDoneInitialSelectedItem] = useState(false);\n  const savedOnInputChange = useRef(onInputChange);\n  if (!doneInitialSelectedItem || prevSelectedItem !== selectedItemProp) {\n    setDoneInitialSelectedItem(true);\n    setPrevSelectedItem(selectedItemProp);\n    setInputValue(getInputValue({\n      initialSelectedItem,\n      inputValue,\n      itemToString,\n      selectedItem: selectedItemProp\n    }));\n  }\n  const filterItems = (items, itemToString, inputValue) => items.filter(item => shouldFilterItem ? shouldFilterItem({\n    item,\n    itemToString,\n    inputValue\n  }) : defaultShouldFilterItem());\n  useEffect(() => {\n    savedOnInputChange.current = onInputChange;\n  }, [onInputChange]);\n  useEffect(() => {\n    if (savedOnInputChange.current) {\n      savedOnInputChange.current(inputValue);\n    }\n  }, [inputValue]);\n  const handleSelectionClear = () => {\n    if (textInput !== null && textInput !== void 0 && textInput.current) {\n      textInput.current.focus();\n    }\n  };\n  const filteredItems = inputValue => filterItems(items, itemToString, inputValue || null);\n  const indexToHighlight = inputValue => findHighlightedIndex({\n    ...props,\n    items: filteredItems(inputValue)\n  }, inputValue);\n  const stateReducer = React__default.useCallback((state, actionAndChanges) => {\n    const {\n      type,\n      changes\n    } = actionAndChanges;\n    const {\n      highlightedIndex\n    } = changes;\n    switch (type) {\n      case InputBlur:\n        if (state.inputValue && highlightedIndex == '-1' && changes.selectedItem) {\n          return {\n            ...changes,\n            inputValue: itemToString(changes.selectedItem)\n          };\n        } else if (state.inputValue && highlightedIndex == '-1' && !allowCustomValue && !changes.selectedItem) {\n          return {\n            ...changes,\n            inputValue: ''\n          };\n        } else {\n          return changes;\n        }\n      case InputKeyDownEnter:\n        if (allowCustomValue) {\n          setInputValue(inputValue);\n          setHighlightedIndex(changes.selectedItem);\n          if (onChange) {\n            onChange({\n              selectedItem: changes.selectedItem,\n              inputValue\n            });\n          }\n          return changes;\n        } else if (changes.selectedItem && !allowCustomValue) {\n          return changes;\n        } else {\n          return {\n            ...changes,\n            isOpen: true\n          };\n        }\n      case FunctionToggleMenu:\n      case ToggleButtonClick:\n        if (changes.isOpen && !changes.selectedItem) {\n          return {\n            ...changes,\n            highlightedIndex: 0\n          };\n        }\n        return changes;\n      case MenuMouseLeave:\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n      case InputKeyDownArrowUp:\n      case InputKeyDownArrowDown:\n        if (highlightedIndex === -1) {\n          return {\n            ...changes,\n            highlightedIndex: 0\n          };\n        }\n        return changes;\n      case ItemMouseMove:\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n      default:\n        return changes;\n    }\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [allowCustomValue, inputValue, onChange]);\n  const handleToggleClick = isOpen => event => {\n    if (onToggleClick) {\n      onToggleClick(event);\n    }\n    if (event.target === textInput.current && isOpen) {\n      var _event$persist;\n      event.preventDownshiftDefault = true;\n      event === null || event === void 0 || (_event$persist = event.persist) === null || _event$persist === void 0 || _event$persist.call(event);\n    }\n  };\n  const showWarning = !invalid && warn;\n  const className = cx(\"\".concat(prefix, \"--combo-box\"), {\n    [\"\".concat(prefix, \"--list-box--up\")]: direction === 'top',\n    [\"\".concat(prefix, \"--combo-box--warning\")]: showWarning,\n    [\"\".concat(prefix, \"--combo-box--readonly\")]: readOnly\n  });\n  const titleClasses = cx(\"\".concat(prefix, \"--label\"), {\n    [\"\".concat(prefix, \"--label--disabled\")]: disabled\n  });\n  const helperTextId = \"combobox-helper-text-\".concat(comboBoxInstanceId);\n  const warnTextId = \"combobox-warn-text-\".concat(comboBoxInstanceId);\n  const invalidTextId = \"combobox-invalid-text-\".concat(comboBoxInstanceId);\n  const helperClasses = cx(\"\".concat(prefix, \"--form__helper-text\"), {\n    [\"\".concat(prefix, \"--form__helper-text--disabled\")]: disabled\n  });\n  const wrapperClasses = cx(\"\".concat(prefix, \"--list-box__wrapper\"), [containerClassName, {\n    [\"\".concat(prefix, \"--list-box__wrapper--fluid--invalid\")]: isFluid && invalid,\n    [\"\".concat(prefix, \"--list-box__wrapper--fluid--focus\")]: isFluid && isFocused,\n    [\"\".concat(prefix, \"--list-box__wrapper--slug\")]: slug\n  }]);\n  const inputClasses = cx(\"\".concat(prefix, \"--text-input\"), {\n    [\"\".concat(prefix, \"--text-input--empty\")]: !inputValue,\n    [\"\".concat(prefix, \"--combo-box--input--focus\")]: isFocused && !isFluid\n  });\n\n  // needs to be Capitalized for react to render it correctly\n  const ItemToElement = itemToElement;\n\n  // Slug is always size `mini`\n  let normalizedSlug;\n  if (slug && ((_slug$type = slug['type']) === null || _slug$type === void 0 ? void 0 : _slug$type.displayName) === 'Slug') {\n    normalizedSlug = /*#__PURE__*/React__default.cloneElement(slug, {\n      size: 'mini'\n    });\n  }\n  const {\n    // Prop getters\n    getInputProps,\n    getItemProps,\n    getLabelProps,\n    getMenuProps,\n    getToggleButtonProps,\n    // State\n    isOpen,\n    highlightedIndex,\n    selectedItem,\n    // Actions\n    closeMenu,\n    openMenu,\n    reset,\n    selectItem,\n    setHighlightedIndex,\n    setInputValue: downshiftSetInputValue,\n    toggleMenu\n  } = useCombobox({\n    items: filterItems(items, itemToString, inputValue),\n    inputValue: inputValue,\n    itemToString: item => {\n      return itemToString(item);\n    },\n    onInputValueChange(_ref3) {\n      let {\n        inputValue\n      } = _ref3;\n      setInputValue(inputValue || '');\n      setHighlightedIndex(indexToHighlight(inputValue));\n    },\n    onSelectedItemChange(_ref4) {\n      let {\n        selectedItem\n      } = _ref4;\n      onChange({\n        selectedItem\n      });\n    },\n    onHighlightedIndexChange: _ref5 => {\n      let {\n        highlightedIndex\n      } = _ref5;\n      if (highlightedIndex > -1 && typeof window !== undefined) {\n        const itemArray = document.querySelectorAll(\"li.\".concat(prefix, \"--list-box__menu-item[role=\\\"option\\\"]\"));\n        const highlightedItem = itemArray[highlightedIndex];\n        if (highlightedItem) {\n          highlightedItem.scrollIntoView({\n            behavior: 'smooth',\n            block: 'nearest'\n          });\n        }\n      }\n    },\n    initialSelectedItem: initialSelectedItem,\n    inputId: id,\n    stateReducer,\n    isItemDisabled(item, _index) {\n      return item.disabled;\n    },\n    ...downshiftProps\n  });\n  useEffect(() => {\n    // Used to expose the downshift actions to consumers for use with downshiftProps\n    // An odd pattern, here we mutate the value stored in the ref provided from the consumer.\n    // A riff of https://gist.github.com/gaearon/1a018a023347fe1c2476073330cc5509\n    if (downshiftActions) {\n      downshiftActions.current = {\n        closeMenu,\n        openMenu,\n        reset,\n        selectItem,\n        setHighlightedIndex,\n        setInputValue: downshiftSetInputValue,\n        toggleMenu\n      };\n    }\n  }, [closeMenu, openMenu, reset, selectItem, setHighlightedIndex, downshiftSetInputValue, toggleMenu]);\n  const buttonProps = getToggleButtonProps({\n    disabled: disabled || readOnly,\n    onClick: handleToggleClick(isOpen),\n    // When we moved the \"root node\" of Downshift to the <input> for\n    // ARIA 1.2 compliance, we unfortunately hit this branch for the\n    // \"mouseup\" event that downshift listens to:\n    // https://github.com/downshift-js/downshift/blob/v5.2.1/src/downshift.js#L1051-L1065\n    //\n    // As a result, it will reset the state of the component and so we\n    // stop the event from propagating to prevent this if the menu is already open.\n    // This allows the toggleMenu behavior for the toggleButton to correctly open and\n    // close the menu.\n    onMouseUp(event) {\n      if (isOpen) {\n        event.stopPropagation();\n      }\n    }\n  });\n  const handleFocus = evt => {\n    setIsFocused(evt.type === 'focus');\n  };\n  const readOnlyEventHandlers = readOnly ? {\n    onKeyDown: evt => {\n      // This prevents the select from opening for the above keys\n      if (evt.key !== 'Tab') {\n        evt.preventDefault();\n      }\n    }\n  } : {};\n\n  // The input should be described by the appropriate message text id\n  // when both the message is supplied *and* when the component is in\n  // the matching state (invalid, warn, etc).\n  const ariaDescribedBy = invalid && invalidText && invalidTextId || warn && warnText && warnTextId || helperText && !isFluid && helperTextId || undefined;\n\n  // Memoize the value of getMenuProps to avoid an infinite loop\n  const menuProps = useMemo(() => getMenuProps({\n    'aria-label': deprecatedAriaLabel || ariaLabel,\n    ref: autoAlign ? refs.setFloating : null\n  }), [autoAlign, deprecatedAriaLabel, ariaLabel, getMenuProps, refs.setFloating]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: wrapperClasses\n  }, titleText && /*#__PURE__*/React__default.createElement(Text, _extends({\n    as: \"label\",\n    className: titleClasses\n  }, getLabelProps()), titleText), /*#__PURE__*/React__default.createElement(ListBox, {\n    onFocus: handleFocus,\n    onBlur: handleFocus,\n    className: className,\n    disabled: disabled,\n    invalid: invalid,\n    invalidText: invalidText,\n    invalidTextId: invalidTextId,\n    isOpen: isOpen,\n    light: light,\n    size: size,\n    warn: warn,\n    ref: autoAlign ? refs.setReference : null,\n    warnText: warnText,\n    warnTextId: warnTextId\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--list-box__field\")\n  }, /*#__PURE__*/React__default.createElement(\"input\", _extends({\n    disabled: disabled,\n    className: inputClasses,\n    type: \"text\",\n    tabIndex: 0,\n    \"aria-haspopup\": \"listbox\",\n    title: textInput === null || textInput === void 0 || (_textInput$current = textInput.current) === null || _textInput$current === void 0 ? void 0 : _textInput$current.value\n  }, getInputProps({\n    'aria-controls': isOpen ? undefined : menuProps.id,\n    placeholder,\n    ref: mergeRefs(textInput, ref),\n    onKeyDown: event => {\n      if (match(event, Space)) {\n        event.stopPropagation();\n      }\n      if (match(event, Enter) && (!inputValue || allowCustomValue)) {\n        var _event$persist2;\n        toggleMenu();\n        if (highlightedIndex !== -1) {\n          selectItem(filterItems(items, itemToString, inputValue)[highlightedIndex]);\n        }\n\n        // Since `onChange` does not normally fire when the menu is closed, we should\n        // manually fire it when `allowCustomValue` is provided, the menu is closing,\n        // and there is a value.\n        if (allowCustomValue && isOpen && inputValue) {\n          onChange({\n            selectedItem,\n            inputValue\n          });\n        }\n        event.preventDownshiftDefault = true;\n        event === null || event === void 0 || (_event$persist2 = event.persist) === null || _event$persist2 === void 0 || _event$persist2.call(event);\n      }\n      if (match(event, Escape) && inputValue) {\n        if (event.target === textInput.current && isOpen) {\n          var _event$persist3;\n          toggleMenu();\n          event.preventDownshiftDefault = true;\n          event === null || event === void 0 || (_event$persist3 = event.persist) === null || _event$persist3 === void 0 || _event$persist3.call(event);\n        }\n      }\n      if (match(event, Home) && event.code !== 'Numpad7') {\n        event.target.setSelectionRange(0, 0);\n      }\n      if (match(event, End) && event.code !== 'Numpad1') {\n        event.target.setSelectionRange(event.target.value.length, event.target.value.length);\n      }\n      if (event.altKey && event.key == 'ArrowDown') {\n        event.preventDownshiftDefault = true;\n        if (!isOpen) {\n          toggleMenu();\n        }\n      }\n      if (event.altKey && event.key == 'ArrowUp') {\n        event.preventDownshiftDefault = true;\n        if (isOpen) {\n          toggleMenu();\n        }\n      }\n    }\n  }), rest, readOnlyEventHandlers, {\n    readOnly: readOnly,\n    \"aria-describedby\": ariaDescribedBy\n  })), invalid && /*#__PURE__*/React__default.createElement(WarningFilled, {\n    className: \"\".concat(prefix, \"--list-box__invalid-icon\")\n  }), showWarning && /*#__PURE__*/React__default.createElement(WarningAltFilled, {\n    className: \"\".concat(prefix, \"--list-box__invalid-icon \").concat(prefix, \"--list-box__invalid-icon--warning\")\n  }), inputValue && /*#__PURE__*/React__default.createElement(ListBoxSelection, {\n    clearSelection: () => {\n      selectItem(null);\n    },\n    translateWithId: translateWithId,\n    disabled: disabled || readOnly,\n    onClearSelection: handleSelectionClear,\n    selectionCount: 0\n  }), /*#__PURE__*/React__default.createElement(ListBoxTrigger, _extends({}, buttonProps, {\n    // @ts-expect-error\n    isOpen: isOpen,\n    translateWithId: translateWithId\n  }))), normalizedSlug, /*#__PURE__*/React__default.createElement(ListBox.Menu, menuProps, isOpen ? filterItems(items, itemToString, inputValue).map((item, index) => {\n    var _item$text;\n    const isObject = item !== null && typeof item === 'object';\n    const title = isObject && 'text' in item && itemToElement ? (_item$text = item.text) === null || _item$text === void 0 ? void 0 : _item$text.toString() : itemToString(item);\n    const itemProps = getItemProps({\n      item,\n      index\n    });\n\n    // The initial implementation using <Downshift> would place the disabled attribute\n    // on disabled menu items. Conversely, useCombobox places aria-disabled instead.\n    // To avoid any potential breaking changes, we avoid placing aria-disabled and\n    // instead match the old behavior of placing the disabled attribute.\n    const disabled = itemProps['aria-disabled'];\n    const {\n      'aria-disabled': unusedAriaDisabled,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n      ...modifiedItemProps\n    } = itemProps;\n    return /*#__PURE__*/React__default.createElement(ListBox.MenuItem, _extends({\n      key: itemProps.id,\n      isActive: selectedItem === item,\n      isHighlighted: highlightedIndex === index,\n      title: title,\n      disabled: disabled\n    }, modifiedItemProps), ItemToElement ? /*#__PURE__*/React__default.createElement(ItemToElement, _extends({\n      key: itemProps.id\n    }, item)) : itemToString(item), selectedItem === item && /*#__PURE__*/React__default.createElement(Checkmark, {\n      className: \"\".concat(prefix, \"--list-box__menu-item__selected-icon\")\n    }));\n  }) : null)), helperText && !invalid && !warn && !isFluid && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    id: helperTextId,\n    className: helperClasses\n  }, helperText));\n});\nComboBox.displayName = 'ComboBox';\nComboBox.propTypes = {\n  /**\n   * Specify whether or not the ComboBox should allow a value that is\n   * not in the list to be entered in the input\n   */\n  allowCustomValue: PropTypes.bool,\n  /**\n   * 'aria-label' of the ListBox component.\n   * Specify a label to be read by screen readers on the container node\n   */\n  ['aria-label']: PropTypes.string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Specify a label to be read by screen readers on the container note.\n   * 'aria-label' of the ListBox component.\n   */\n  ariaLabel: deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * **Experimental**: Will attempt to automatically align the floating\n   * element to avoid collisions with the viewport and being clipped by\n   * ancestor elements.\n   */\n  autoAlign: PropTypes.bool,\n  /**\n   * An optional className to add to the container node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the direction of the combobox dropdown. Can be either top or bottom.\n   */\n  direction: PropTypes.oneOf(['top', 'bottom']),\n  /**\n   * Specify if the control should be disabled, or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Additional props passed to Downshift.\n   *\n   * **Use with caution:** anything you define here overrides the components'\n   * internal handling of that prop. Downshift APIs and internals are subject to\n   * change, and in some cases they can not be shimmed by Carbon to shield you\n   * from potentially breaking changes.\n   */\n  downshiftProps: PropTypes.object,\n  /**\n   * Provide a ref that will be mutated to contain an object of downshift\n   * action functions. These can be called to change the internal state of the\n   * downshift useCombobox hook.\n   *\n   * **Use with caution:** calling these actions modifies the internal state of\n   * downshift. It may conflict with or override the state management used within\n   * Combobox. Downshift APIs and internals are subject to change, and in some\n   * cases they can not be shimmed by Carbon to shield you from potentially breaking\n   * changes.\n   */\n  downshiftActions: PropTypes.exact({\n    current: PropTypes.any\n  }),\n  /**\n   * Provide helper text that is used alongside the control label for\n   * additional help\n   */\n  helperText: PropTypes.node,\n  /**\n   * Specify a custom `id` for the input\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)\n   * from their collection that are pre-selected\n   */\n  initialSelectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number]),\n  /**\n   * Specify if the currently selected value is invalid.\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Message which is displayed if the value is invalid.\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Optional function to render items as custom components instead of strings.\n   * Defaults to null and is overridden by a getter\n   */\n  itemToElement: PropTypes.func,\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list\n   */\n  itemToString: PropTypes.func,\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n  /**\n   * should use \"light theme\" (white background)?\n   */\n  light: deprecate(PropTypes.bool, 'The `light` prop for `Combobox` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component when a specific dropdown item is selected.\n   * `({ selectedItem }) => void`\n   * @param {{ selectedItem }}\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\n   * Callback function to notify consumer when the text input changes.\n   * This provides support to change available items based on the text.\n   * `(inputText) => void`\n   * @param {string} inputText\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * Callback function that fires when the combobox menu toggle is clicked\n   * `(evt) => void`\n   * @param {MouseEvent} event\n   */\n  onToggleClick: PropTypes.func,\n  /**\n   * Used to provide a placeholder text node before a user enters any input.\n   * This is only present if the control has no items selected\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Is the ComboBox readonly?\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * For full control of the selection\n   */\n  selectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number]),\n  /**\n   * Specify your own filtering logic by passing in a `shouldFilterItem`\n   * function that takes in the current input and an item and passes back\n   * whether or not the item should be filtered.\n   */\n  shouldFilterItem: PropTypes.func,\n  /**\n   * Specify the size of the ListBox. Currently supports either `sm`, `md` or `lg` as an option.\n   */\n  size: ListBoxSize,\n  /**\n   * **Experimental**: Provide a `Slug` component to be rendered inside the `ComboBox` component\n   */\n  slug: PropTypes.node,\n  /**\n   * Provide text to be used in a `<label>` element that is tied to the\n   * combobox via ARIA attributes.\n   */\n  titleText: PropTypes.node,\n  /**\n   * Specify a custom translation function that takes in a message identifier\n   * and returns the localized string for the message\n   */\n  translateWithId: PropTypes.func,\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\nexport { ComboBox as default };","map":{"version":3,"names":["extends","_extends","cx","useCombobox","PropTypes","React__default","forwardRef","useEffect","useContext","useRef","useState","useMemo","WarningFilled","WarningAltFilled","Checkmark","ListBox","useId","mergeRefs","deprecate","usePrefix","FormContext","useFloating","flip","autoUpdate","Text","match","ListBoxSelection","ListBoxTrigger","ListBoxSize","Space","Enter","Escape","Home","End","InputBlur","InputKeyDownEnter","FunctionToggleMenu","ToggleButtonClick","ItemMouseMove","InputKeyDownArrowUp","InputKeyDownArrowDown","MenuMouseLeave","stateChangeTypes","defaultItemToString","item","concat","defaultShouldFilterItem","getInputValue","_ref","initialSelectedItem","inputValue","itemToString","selectedItem","findHighlightedIndex","_ref2","items","searchValue","toLowerCase","i","length","indexOf","ComboBox","props","ref","_refs$reference","_slug$type","_textInput$current","ariaLabel","deprecatedAriaLabel","autoAlign","className","containerClassName","direction","disabled","downshiftActions","downshiftProps","helperText","id","invalid","invalidText","itemToElement","light","onChange","onInputChange","onToggleClick","placeholder","readOnly","selectedItemProp","shouldFilterItem","size","titleText","translateWithId","warn","warnText","allowCustomValue","slug","rest","refs","floatingStyles","placement","strategy","middleware","whileElementsMounted","parentWidth","reference","current","clientWidth","Object","keys","forEach","style","floating","width","prefix","isFluid","textInput","comboBoxInstanceId","setInputValue","isFocused","setIsFocused","prevSelectedItem","setPrevSelectedItem","doneInitialSelectedItem","setDoneInitialSelectedItem","savedOnInputChange","filterItems","filter","handleSelectionClear","focus","filteredItems","indexToHighlight","stateReducer","useCallback","state","actionAndChanges","type","changes","highlightedIndex","setHighlightedIndex","isOpen","handleToggleClick","event","target","_event$persist","preventDownshiftDefault","persist","call","showWarning","titleClasses","helperTextId","warnTextId","invalidTextId","helperClasses","wrapperClasses","inputClasses","ItemToElement","normalizedSlug","displayName","cloneElement","getInputProps","getItemProps","getLabelProps","getMenuProps","getToggleButtonProps","closeMenu","openMenu","reset","selectItem","downshiftSetInputValue","toggleMenu","onInputValueChange","_ref3","onSelectedItemChange","_ref4","onHighlightedIndexChange","_ref5","window","undefined","itemArray","document","querySelectorAll","highlightedItem","scrollIntoView","behavior","block","inputId","isItemDisabled","_index","buttonProps","onClick","onMouseUp","stopPropagation","handleFocus","evt","readOnlyEventHandlers","onKeyDown","key","preventDefault","ariaDescribedBy","menuProps","setFloating","createElement","as","onFocus","onBlur","setReference","tabIndex","title","value","_event$persist2","_event$persist3","code","setSelectionRange","altKey","clearSelection","onClearSelection","selectionCount","Menu","map","index","_item$text","isObject","text","toString","itemProps","unusedAriaDisabled","modifiedItemProps","MenuItem","isActive","isHighlighted","propTypes","bool","string","oneOf","object","exact","any","node","isRequired","oneOfType","number","func","array","default"],"sources":["/Users/davidguan/Local Sites/e/app/public/wp-content/plugins/drhaiel/ls_uhcc_bot_fe/node_modules/@carbon/react/es/components/ComboBox/ComboBox.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport { useCombobox } from 'downshift';\nimport PropTypes from 'prop-types';\nimport React__default, { forwardRef, useEffect, useContext, useRef, useState, useMemo } from 'react';\nimport '../Text/index.js';\nimport { WarningFilled, WarningAltFilled, Checkmark } from '@carbon/icons-react';\nimport ListBox from '../ListBox/index.js';\nimport { useId } from '../../internal/useId.js';\nimport mergeRefs from '../../tools/mergeRefs.js';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport '../FluidForm/FluidForm.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\nimport { useFloating, flip, autoUpdate } from '@floating-ui/react';\nimport { Text } from '../Text/Text.js';\nimport { match } from '../../internal/keyboard/match.js';\nimport ListBoxSelection from '../ListBox/next/ListBoxSelection.js';\nimport ListBoxTrigger from '../ListBox/next/ListBoxTrigger.js';\nimport { ListBoxSize } from '../ListBox/ListBoxPropTypes.js';\nimport { Space, Enter, Escape, Home, End } from '../../internal/keyboard/keys.js';\n\nconst {\n  InputBlur,\n  InputKeyDownEnter,\n  FunctionToggleMenu,\n  ToggleButtonClick,\n  ItemMouseMove,\n  InputKeyDownArrowUp,\n  InputKeyDownArrowDown,\n  MenuMouseLeave\n} = useCombobox.stateChangeTypes;\nconst defaultItemToString = item => {\n  if (typeof item === 'string') {\n    return item;\n  }\n  if (typeof item === 'number') {\n    return `${item}`;\n  }\n  if (item !== null && typeof item === 'object' && 'label' in item && typeof item['label'] === 'string') {\n    return item['label'];\n  }\n  return '';\n};\nconst defaultShouldFilterItem = () => true;\nconst getInputValue = _ref => {\n  let {\n    initialSelectedItem,\n    inputValue,\n    itemToString,\n    selectedItem\n  } = _ref;\n  if (selectedItem) {\n    return itemToString(selectedItem);\n  }\n  if (initialSelectedItem) {\n    return itemToString(initialSelectedItem);\n  }\n  return inputValue || '';\n};\nconst findHighlightedIndex = (_ref2, inputValue) => {\n  let {\n    items,\n    itemToString = defaultItemToString\n  } = _ref2;\n  if (!inputValue) {\n    return -1;\n  }\n  const searchValue = inputValue.toLowerCase();\n  for (let i = 0; i < items.length; i++) {\n    const item = itemToString(items[i]).toLowerCase();\n    if (!items[i]['disabled'] && item.indexOf(searchValue) !== -1) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Message ids that will be passed to translateWithId().\n * Combination of message ids from ListBox/next/ListBoxSelection.js and\n * ListBox/next/ListBoxTrigger.js, but we can't access those values directly\n * because those components aren't Typescript.  (If you try, TranslationKey\n * ends up just being defined as \"string\".)\n */\n\nconst ComboBox = /*#__PURE__*/forwardRef((props, ref) => {\n  const {\n    ['aria-label']: ariaLabel = 'Choose an item',\n    ariaLabel: deprecatedAriaLabel,\n    autoAlign = false,\n    className: containerClassName,\n    direction = 'bottom',\n    disabled = false,\n    downshiftActions,\n    downshiftProps,\n    helperText,\n    id,\n    initialSelectedItem,\n    invalid,\n    invalidText,\n    items,\n    itemToElement = null,\n    itemToString = defaultItemToString,\n    light,\n    onChange,\n    onInputChange,\n    onToggleClick,\n    placeholder,\n    readOnly,\n    selectedItem: selectedItemProp,\n    shouldFilterItem = defaultShouldFilterItem,\n    size,\n    titleText,\n    translateWithId,\n    warn,\n    warnText,\n    allowCustomValue = false,\n    slug,\n    ...rest\n  } = props;\n  const {\n    refs,\n    floatingStyles\n  } = useFloating(autoAlign ? {\n    placement: direction,\n    strategy: 'fixed',\n    middleware: [flip()],\n    whileElementsMounted: autoUpdate\n  } : {});\n  const parentWidth = refs?.reference?.current?.clientWidth;\n  useEffect(() => {\n    if (autoAlign) {\n      Object.keys(floatingStyles).forEach(style => {\n        if (refs.floating.current) {\n          refs.floating.current.style[style] = floatingStyles[style];\n        }\n      });\n      if (parentWidth && refs.floating.current) {\n        refs.floating.current.style.width = parentWidth + 'px';\n      }\n    }\n  }, [autoAlign, floatingStyles, refs.floating, parentWidth]);\n  const prefix = usePrefix();\n  const {\n    isFluid\n  } = useContext(FormContext);\n  const textInput = useRef(null);\n  const comboBoxInstanceId = useId();\n  const [inputValue, setInputValue] = useState(getInputValue({\n    initialSelectedItem,\n    inputValue: '',\n    itemToString,\n    selectedItem: selectedItemProp\n  }));\n  const [isFocused, setIsFocused] = useState(false);\n  const [prevSelectedItem, setPrevSelectedItem] = useState();\n  const [doneInitialSelectedItem, setDoneInitialSelectedItem] = useState(false);\n  const savedOnInputChange = useRef(onInputChange);\n  if (!doneInitialSelectedItem || prevSelectedItem !== selectedItemProp) {\n    setDoneInitialSelectedItem(true);\n    setPrevSelectedItem(selectedItemProp);\n    setInputValue(getInputValue({\n      initialSelectedItem,\n      inputValue,\n      itemToString,\n      selectedItem: selectedItemProp\n    }));\n  }\n  const filterItems = (items, itemToString, inputValue) => items.filter(item => shouldFilterItem ? shouldFilterItem({\n    item,\n    itemToString,\n    inputValue\n  }) : defaultShouldFilterItem());\n  useEffect(() => {\n    savedOnInputChange.current = onInputChange;\n  }, [onInputChange]);\n  useEffect(() => {\n    if (savedOnInputChange.current) {\n      savedOnInputChange.current(inputValue);\n    }\n  }, [inputValue]);\n  const handleSelectionClear = () => {\n    if (textInput?.current) {\n      textInput.current.focus();\n    }\n  };\n  const filteredItems = inputValue => filterItems(items, itemToString, inputValue || null);\n  const indexToHighlight = inputValue => findHighlightedIndex({\n    ...props,\n    items: filteredItems(inputValue)\n  }, inputValue);\n  const stateReducer = React__default.useCallback((state, actionAndChanges) => {\n    const {\n      type,\n      changes\n    } = actionAndChanges;\n    const {\n      highlightedIndex\n    } = changes;\n    switch (type) {\n      case InputBlur:\n        if (state.inputValue && highlightedIndex == '-1' && changes.selectedItem) {\n          return {\n            ...changes,\n            inputValue: itemToString(changes.selectedItem)\n          };\n        } else if (state.inputValue && highlightedIndex == '-1' && !allowCustomValue && !changes.selectedItem) {\n          return {\n            ...changes,\n            inputValue: ''\n          };\n        } else {\n          return changes;\n        }\n      case InputKeyDownEnter:\n        if (allowCustomValue) {\n          setInputValue(inputValue);\n          setHighlightedIndex(changes.selectedItem);\n          if (onChange) {\n            onChange({\n              selectedItem: changes.selectedItem,\n              inputValue\n            });\n          }\n          return changes;\n        } else if (changes.selectedItem && !allowCustomValue) {\n          return changes;\n        } else {\n          return {\n            ...changes,\n            isOpen: true\n          };\n        }\n      case FunctionToggleMenu:\n      case ToggleButtonClick:\n        if (changes.isOpen && !changes.selectedItem) {\n          return {\n            ...changes,\n            highlightedIndex: 0\n          };\n        }\n        return changes;\n      case MenuMouseLeave:\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n      case InputKeyDownArrowUp:\n      case InputKeyDownArrowDown:\n        if (highlightedIndex === -1) {\n          return {\n            ...changes,\n            highlightedIndex: 0\n          };\n        }\n        return changes;\n      case ItemMouseMove:\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n      default:\n        return changes;\n    }\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [allowCustomValue, inputValue, onChange]);\n  const handleToggleClick = isOpen => event => {\n    if (onToggleClick) {\n      onToggleClick(event);\n    }\n    if (event.target === textInput.current && isOpen) {\n      event.preventDownshiftDefault = true;\n      event?.persist?.();\n    }\n  };\n  const showWarning = !invalid && warn;\n  const className = cx(`${prefix}--combo-box`, {\n    [`${prefix}--list-box--up`]: direction === 'top',\n    [`${prefix}--combo-box--warning`]: showWarning,\n    [`${prefix}--combo-box--readonly`]: readOnly\n  });\n  const titleClasses = cx(`${prefix}--label`, {\n    [`${prefix}--label--disabled`]: disabled\n  });\n  const helperTextId = `combobox-helper-text-${comboBoxInstanceId}`;\n  const warnTextId = `combobox-warn-text-${comboBoxInstanceId}`;\n  const invalidTextId = `combobox-invalid-text-${comboBoxInstanceId}`;\n  const helperClasses = cx(`${prefix}--form__helper-text`, {\n    [`${prefix}--form__helper-text--disabled`]: disabled\n  });\n  const wrapperClasses = cx(`${prefix}--list-box__wrapper`, [containerClassName, {\n    [`${prefix}--list-box__wrapper--fluid--invalid`]: isFluid && invalid,\n    [`${prefix}--list-box__wrapper--fluid--focus`]: isFluid && isFocused,\n    [`${prefix}--list-box__wrapper--slug`]: slug\n  }]);\n  const inputClasses = cx(`${prefix}--text-input`, {\n    [`${prefix}--text-input--empty`]: !inputValue,\n    [`${prefix}--combo-box--input--focus`]: isFocused && !isFluid\n  });\n\n  // needs to be Capitalized for react to render it correctly\n  const ItemToElement = itemToElement;\n\n  // Slug is always size `mini`\n  let normalizedSlug;\n  if (slug && slug['type']?.displayName === 'Slug') {\n    normalizedSlug = /*#__PURE__*/React__default.cloneElement(slug, {\n      size: 'mini'\n    });\n  }\n  const {\n    // Prop getters\n    getInputProps,\n    getItemProps,\n    getLabelProps,\n    getMenuProps,\n    getToggleButtonProps,\n    // State\n    isOpen,\n    highlightedIndex,\n    selectedItem,\n    // Actions\n    closeMenu,\n    openMenu,\n    reset,\n    selectItem,\n    setHighlightedIndex,\n    setInputValue: downshiftSetInputValue,\n    toggleMenu\n  } = useCombobox({\n    items: filterItems(items, itemToString, inputValue),\n    inputValue: inputValue,\n    itemToString: item => {\n      return itemToString(item);\n    },\n    onInputValueChange(_ref3) {\n      let {\n        inputValue\n      } = _ref3;\n      setInputValue(inputValue || '');\n      setHighlightedIndex(indexToHighlight(inputValue));\n    },\n    onSelectedItemChange(_ref4) {\n      let {\n        selectedItem\n      } = _ref4;\n      onChange({\n        selectedItem\n      });\n    },\n    onHighlightedIndexChange: _ref5 => {\n      let {\n        highlightedIndex\n      } = _ref5;\n      if (highlightedIndex > -1 && typeof window !== undefined) {\n        const itemArray = document.querySelectorAll(`li.${prefix}--list-box__menu-item[role=\"option\"]`);\n        const highlightedItem = itemArray[highlightedIndex];\n        if (highlightedItem) {\n          highlightedItem.scrollIntoView({\n            behavior: 'smooth',\n            block: 'nearest'\n          });\n        }\n      }\n    },\n    initialSelectedItem: initialSelectedItem,\n    inputId: id,\n    stateReducer,\n    isItemDisabled(item, _index) {\n      return item.disabled;\n    },\n    ...downshiftProps\n  });\n  useEffect(() => {\n    // Used to expose the downshift actions to consumers for use with downshiftProps\n    // An odd pattern, here we mutate the value stored in the ref provided from the consumer.\n    // A riff of https://gist.github.com/gaearon/1a018a023347fe1c2476073330cc5509\n    if (downshiftActions) {\n      downshiftActions.current = {\n        closeMenu,\n        openMenu,\n        reset,\n        selectItem,\n        setHighlightedIndex,\n        setInputValue: downshiftSetInputValue,\n        toggleMenu\n      };\n    }\n  }, [closeMenu, openMenu, reset, selectItem, setHighlightedIndex, downshiftSetInputValue, toggleMenu]);\n  const buttonProps = getToggleButtonProps({\n    disabled: disabled || readOnly,\n    onClick: handleToggleClick(isOpen),\n    // When we moved the \"root node\" of Downshift to the <input> for\n    // ARIA 1.2 compliance, we unfortunately hit this branch for the\n    // \"mouseup\" event that downshift listens to:\n    // https://github.com/downshift-js/downshift/blob/v5.2.1/src/downshift.js#L1051-L1065\n    //\n    // As a result, it will reset the state of the component and so we\n    // stop the event from propagating to prevent this if the menu is already open.\n    // This allows the toggleMenu behavior for the toggleButton to correctly open and\n    // close the menu.\n    onMouseUp(event) {\n      if (isOpen) {\n        event.stopPropagation();\n      }\n    }\n  });\n  const handleFocus = evt => {\n    setIsFocused(evt.type === 'focus');\n  };\n  const readOnlyEventHandlers = readOnly ? {\n    onKeyDown: evt => {\n      // This prevents the select from opening for the above keys\n      if (evt.key !== 'Tab') {\n        evt.preventDefault();\n      }\n    }\n  } : {};\n\n  // The input should be described by the appropriate message text id\n  // when both the message is supplied *and* when the component is in\n  // the matching state (invalid, warn, etc).\n  const ariaDescribedBy = invalid && invalidText && invalidTextId || warn && warnText && warnTextId || helperText && !isFluid && helperTextId || undefined;\n\n  // Memoize the value of getMenuProps to avoid an infinite loop\n  const menuProps = useMemo(() => getMenuProps({\n    'aria-label': deprecatedAriaLabel || ariaLabel,\n    ref: autoAlign ? refs.setFloating : null\n  }), [autoAlign, deprecatedAriaLabel, ariaLabel, getMenuProps, refs.setFloating]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: wrapperClasses\n  }, titleText && /*#__PURE__*/React__default.createElement(Text, _extends({\n    as: \"label\",\n    className: titleClasses\n  }, getLabelProps()), titleText), /*#__PURE__*/React__default.createElement(ListBox, {\n    onFocus: handleFocus,\n    onBlur: handleFocus,\n    className: className,\n    disabled: disabled,\n    invalid: invalid,\n    invalidText: invalidText,\n    invalidTextId: invalidTextId,\n    isOpen: isOpen,\n    light: light,\n    size: size,\n    warn: warn,\n    ref: autoAlign ? refs.setReference : null,\n    warnText: warnText,\n    warnTextId: warnTextId\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--list-box__field`\n  }, /*#__PURE__*/React__default.createElement(\"input\", _extends({\n    disabled: disabled,\n    className: inputClasses,\n    type: \"text\",\n    tabIndex: 0,\n    \"aria-haspopup\": \"listbox\",\n    title: textInput?.current?.value\n  }, getInputProps({\n    'aria-controls': isOpen ? undefined : menuProps.id,\n    placeholder,\n    ref: mergeRefs(textInput, ref),\n    onKeyDown: event => {\n      if (match(event, Space)) {\n        event.stopPropagation();\n      }\n      if (match(event, Enter) && (!inputValue || allowCustomValue)) {\n        toggleMenu();\n        if (highlightedIndex !== -1) {\n          selectItem(filterItems(items, itemToString, inputValue)[highlightedIndex]);\n        }\n\n        // Since `onChange` does not normally fire when the menu is closed, we should\n        // manually fire it when `allowCustomValue` is provided, the menu is closing,\n        // and there is a value.\n        if (allowCustomValue && isOpen && inputValue) {\n          onChange({\n            selectedItem,\n            inputValue\n          });\n        }\n        event.preventDownshiftDefault = true;\n        event?.persist?.();\n      }\n      if (match(event, Escape) && inputValue) {\n        if (event.target === textInput.current && isOpen) {\n          toggleMenu();\n          event.preventDownshiftDefault = true;\n          event?.persist?.();\n        }\n      }\n      if (match(event, Home) && event.code !== 'Numpad7') {\n        event.target.setSelectionRange(0, 0);\n      }\n      if (match(event, End) && event.code !== 'Numpad1') {\n        event.target.setSelectionRange(event.target.value.length, event.target.value.length);\n      }\n      if (event.altKey && event.key == 'ArrowDown') {\n        event.preventDownshiftDefault = true;\n        if (!isOpen) {\n          toggleMenu();\n        }\n      }\n      if (event.altKey && event.key == 'ArrowUp') {\n        event.preventDownshiftDefault = true;\n        if (isOpen) {\n          toggleMenu();\n        }\n      }\n    }\n  }), rest, readOnlyEventHandlers, {\n    readOnly: readOnly,\n    \"aria-describedby\": ariaDescribedBy\n  })), invalid && /*#__PURE__*/React__default.createElement(WarningFilled, {\n    className: `${prefix}--list-box__invalid-icon`\n  }), showWarning && /*#__PURE__*/React__default.createElement(WarningAltFilled, {\n    className: `${prefix}--list-box__invalid-icon ${prefix}--list-box__invalid-icon--warning`\n  }), inputValue && /*#__PURE__*/React__default.createElement(ListBoxSelection, {\n    clearSelection: () => {\n      selectItem(null);\n    },\n    translateWithId: translateWithId,\n    disabled: disabled || readOnly,\n    onClearSelection: handleSelectionClear,\n    selectionCount: 0\n  }), /*#__PURE__*/React__default.createElement(ListBoxTrigger, _extends({}, buttonProps, {\n    // @ts-expect-error\n    isOpen: isOpen,\n    translateWithId: translateWithId\n  }))), normalizedSlug, /*#__PURE__*/React__default.createElement(ListBox.Menu, menuProps, isOpen ? filterItems(items, itemToString, inputValue).map((item, index) => {\n    const isObject = item !== null && typeof item === 'object';\n    const title = isObject && 'text' in item && itemToElement ? item.text?.toString() : itemToString(item);\n    const itemProps = getItemProps({\n      item,\n      index\n    });\n\n    // The initial implementation using <Downshift> would place the disabled attribute\n    // on disabled menu items. Conversely, useCombobox places aria-disabled instead.\n    // To avoid any potential breaking changes, we avoid placing aria-disabled and\n    // instead match the old behavior of placing the disabled attribute.\n    const disabled = itemProps['aria-disabled'];\n    const {\n      'aria-disabled': unusedAriaDisabled,\n      // eslint-disable-line @typescript-eslint/no-unused-vars\n      ...modifiedItemProps\n    } = itemProps;\n    return /*#__PURE__*/React__default.createElement(ListBox.MenuItem, _extends({\n      key: itemProps.id,\n      isActive: selectedItem === item,\n      isHighlighted: highlightedIndex === index,\n      title: title,\n      disabled: disabled\n    }, modifiedItemProps), ItemToElement ? /*#__PURE__*/React__default.createElement(ItemToElement, _extends({\n      key: itemProps.id\n    }, item)) : itemToString(item), selectedItem === item && /*#__PURE__*/React__default.createElement(Checkmark, {\n      className: `${prefix}--list-box__menu-item__selected-icon`\n    }));\n  }) : null)), helperText && !invalid && !warn && !isFluid && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    id: helperTextId,\n    className: helperClasses\n  }, helperText));\n});\nComboBox.displayName = 'ComboBox';\nComboBox.propTypes = {\n  /**\n   * Specify whether or not the ComboBox should allow a value that is\n   * not in the list to be entered in the input\n   */\n  allowCustomValue: PropTypes.bool,\n  /**\n   * 'aria-label' of the ListBox component.\n   * Specify a label to be read by screen readers on the container node\n   */\n  ['aria-label']: PropTypes.string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Specify a label to be read by screen readers on the container note.\n   * 'aria-label' of the ListBox component.\n   */\n  ariaLabel: deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * **Experimental**: Will attempt to automatically align the floating\n   * element to avoid collisions with the viewport and being clipped by\n   * ancestor elements.\n   */\n  autoAlign: PropTypes.bool,\n  /**\n   * An optional className to add to the container node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the direction of the combobox dropdown. Can be either top or bottom.\n   */\n  direction: PropTypes.oneOf(['top', 'bottom']),\n  /**\n   * Specify if the control should be disabled, or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Additional props passed to Downshift.\n   *\n   * **Use with caution:** anything you define here overrides the components'\n   * internal handling of that prop. Downshift APIs and internals are subject to\n   * change, and in some cases they can not be shimmed by Carbon to shield you\n   * from potentially breaking changes.\n   */\n  downshiftProps: PropTypes.object,\n  /**\n   * Provide a ref that will be mutated to contain an object of downshift\n   * action functions. These can be called to change the internal state of the\n   * downshift useCombobox hook.\n   *\n   * **Use with caution:** calling these actions modifies the internal state of\n   * downshift. It may conflict with or override the state management used within\n   * Combobox. Downshift APIs and internals are subject to change, and in some\n   * cases they can not be shimmed by Carbon to shield you from potentially breaking\n   * changes.\n   */\n  downshiftActions: PropTypes.exact({\n    current: PropTypes.any\n  }),\n  /**\n   * Provide helper text that is used alongside the control label for\n   * additional help\n   */\n  helperText: PropTypes.node,\n  /**\n   * Specify a custom `id` for the input\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)\n   * from their collection that are pre-selected\n   */\n  initialSelectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number]),\n  /**\n   * Specify if the currently selected value is invalid.\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Message which is displayed if the value is invalid.\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Optional function to render items as custom components instead of strings.\n   * Defaults to null and is overridden by a getter\n   */\n  itemToElement: PropTypes.func,\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list\n   */\n  itemToString: PropTypes.func,\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n  /**\n   * should use \"light theme\" (white background)?\n   */\n  light: deprecate(PropTypes.bool, 'The `light` prop for `Combobox` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component when a specific dropdown item is selected.\n   * `({ selectedItem }) => void`\n   * @param {{ selectedItem }}\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\n   * Callback function to notify consumer when the text input changes.\n   * This provides support to change available items based on the text.\n   * `(inputText) => void`\n   * @param {string} inputText\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * Callback function that fires when the combobox menu toggle is clicked\n   * `(evt) => void`\n   * @param {MouseEvent} event\n   */\n  onToggleClick: PropTypes.func,\n  /**\n   * Used to provide a placeholder text node before a user enters any input.\n   * This is only present if the control has no items selected\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Is the ComboBox readonly?\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * For full control of the selection\n   */\n  selectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number]),\n  /**\n   * Specify your own filtering logic by passing in a `shouldFilterItem`\n   * function that takes in the current input and an item and passes back\n   * whether or not the item should be filtered.\n   */\n  shouldFilterItem: PropTypes.func,\n  /**\n   * Specify the size of the ListBox. Currently supports either `sm`, `md` or `lg` as an option.\n   */\n  size: ListBoxSize,\n  /**\n   * **Experimental**: Provide a `Slug` component to be rendered inside the `ComboBox` component\n   */\n  slug: PropTypes.node,\n  /**\n   * Provide text to be used in a `<label>` element that is tied to the\n   * combobox via ARIA attributes.\n   */\n  titleText: PropTypes.node,\n  /**\n   * Specify a custom translation function that takes in a message identifier\n   * and returns the localized string for the message\n   */\n  translateWithId: PropTypes.func,\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\n\nexport { ComboBox as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}