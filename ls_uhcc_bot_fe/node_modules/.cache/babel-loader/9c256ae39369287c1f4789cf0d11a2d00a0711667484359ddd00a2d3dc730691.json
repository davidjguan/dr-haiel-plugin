{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { useGridSettings, GridSettings } from './GridContext.js';\nfunction CSSGrid(_ref) {\n  let {\n    as: BaseComponent = 'div',\n    children,\n    className: customClassName,\n    condensed = false,\n    fullWidth = false,\n    narrow = false,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const {\n    subgrid\n  } = useGridSettings();\n  let mode = 'wide';\n  if (narrow) {\n    mode = 'narrow';\n  } else if (condensed) {\n    mode = 'condensed';\n  }\n  if (subgrid) {\n    return /*#__PURE__*/React__default.createElement(GridSettings, {\n      mode: \"css-grid\",\n      subgrid: true\n    }, /*#__PURE__*/React__default.createElement(Subgrid, _extends({\n      as: BaseComponent,\n      className: customClassName,\n      mode: mode\n    }, rest), children));\n  }\n  const className = cx(customClassName, {\n    [\"\".concat(prefix, \"--css-grid\")]: true,\n    [\"\".concat(prefix, \"--css-grid--condensed\")]: mode === 'condensed',\n    [\"\".concat(prefix, \"--css-grid--narrow\")]: mode === 'narrow',\n    [\"\".concat(prefix, \"--css-grid--full-width\")]: fullWidth\n  });\n\n  // cast as any to let TypeScript allow passing in attributes to base component\n  const BaseComponentAsAny = BaseComponent;\n  return /*#__PURE__*/React__default.createElement(GridSettings, {\n    mode: \"css-grid\",\n    subgrid: true\n  }, /*#__PURE__*/React__default.createElement(BaseComponentAsAny, _extends({\n    className: className\n  }, rest), children));\n}\nCSSGrid.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n  /**\n   * Pass in content that will be rendered within the `Grid`\n   */\n  children: PropTypes.node,\n  /**\n   * Specify a custom className to be applied to the `Grid`\n   */\n  className: PropTypes.string,\n  /**\n   * Collapse the gutter to 1px. Useful for fluid layouts.\n   * Rows have 1px of margin between them to match gutter.\n   */\n  condensed: PropTypes.bool,\n  /**\n   * Remove the default max width that the grid has set\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * Container hangs 16px into the gutter. Useful for\n   * typographic alignment with and without containers.\n   */\n  narrow: PropTypes.bool\n};\nconst Subgrid = _ref2 => {\n  let {\n    as: BaseComponent = 'div',\n    className: customClassName,\n    children,\n    mode,\n    ...rest\n  } = _ref2;\n  const prefix = usePrefix();\n  const className = cx(customClassName, {\n    [\"\".concat(prefix, \"--subgrid\")]: true,\n    [\"\".concat(prefix, \"--subgrid--condensed\")]: mode === 'condensed',\n    [\"\".concat(prefix, \"--subgrid--narrow\")]: mode === 'narrow',\n    [\"\".concat(prefix, \"--subgrid--wide\")]: mode === 'wide'\n  });\n  return /*#__PURE__*/React__default.createElement(BaseComponent, _extends({}, rest, {\n    className: className\n  }), children);\n};\nSubgrid.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n  /**\n   * Pass in content that will be rendered within the `Subgrid`\n   */\n  children: PropTypes.node,\n  /**\n   * Specify a custom className to be applied to the `Subgrid`\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the gutter mode for the subgrid\n   */\n  mode: PropTypes.oneOf(['wide', 'narrow', 'condensed'])\n};\nconst CSSGridComponent = CSSGrid;\nexport { CSSGridComponent as CSSGrid };","map":{"version":3,"names":["extends","_extends","cx","PropTypes","React__default","usePrefix","useGridSettings","GridSettings","CSSGrid","_ref","as","BaseComponent","children","className","customClassName","condensed","fullWidth","narrow","rest","prefix","subgrid","mode","createElement","Subgrid","concat","BaseComponentAsAny","propTypes","oneOfType","string","elementType","node","bool","_ref2","oneOf","CSSGridComponent"],"sources":["/Users/davidguan/Local Sites/e/app/public/wp-content/plugins/drhaiel/ls_uhcc_bot_fe/node_modules/@carbon/react/es/components/Grid/CSSGrid.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { useGridSettings, GridSettings } from './GridContext.js';\n\nfunction CSSGrid(_ref) {\n  let {\n    as: BaseComponent = 'div',\n    children,\n    className: customClassName,\n    condensed = false,\n    fullWidth = false,\n    narrow = false,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const {\n    subgrid\n  } = useGridSettings();\n  let mode = 'wide';\n  if (narrow) {\n    mode = 'narrow';\n  } else if (condensed) {\n    mode = 'condensed';\n  }\n  if (subgrid) {\n    return /*#__PURE__*/React__default.createElement(GridSettings, {\n      mode: \"css-grid\",\n      subgrid: true\n    }, /*#__PURE__*/React__default.createElement(Subgrid, _extends({\n      as: BaseComponent,\n      className: customClassName,\n      mode: mode\n    }, rest), children));\n  }\n  const className = cx(customClassName, {\n    [`${prefix}--css-grid`]: true,\n    [`${prefix}--css-grid--condensed`]: mode === 'condensed',\n    [`${prefix}--css-grid--narrow`]: mode === 'narrow',\n    [`${prefix}--css-grid--full-width`]: fullWidth\n  });\n\n  // cast as any to let TypeScript allow passing in attributes to base component\n  const BaseComponentAsAny = BaseComponent;\n  return /*#__PURE__*/React__default.createElement(GridSettings, {\n    mode: \"css-grid\",\n    subgrid: true\n  }, /*#__PURE__*/React__default.createElement(BaseComponentAsAny, _extends({\n    className: className\n  }, rest), children));\n}\nCSSGrid.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n  /**\n   * Pass in content that will be rendered within the `Grid`\n   */\n  children: PropTypes.node,\n  /**\n   * Specify a custom className to be applied to the `Grid`\n   */\n  className: PropTypes.string,\n  /**\n   * Collapse the gutter to 1px. Useful for fluid layouts.\n   * Rows have 1px of margin between them to match gutter.\n   */\n  condensed: PropTypes.bool,\n  /**\n   * Remove the default max width that the grid has set\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * Container hangs 16px into the gutter. Useful for\n   * typographic alignment with and without containers.\n   */\n  narrow: PropTypes.bool\n};\nconst Subgrid = _ref2 => {\n  let {\n    as: BaseComponent = 'div',\n    className: customClassName,\n    children,\n    mode,\n    ...rest\n  } = _ref2;\n  const prefix = usePrefix();\n  const className = cx(customClassName, {\n    [`${prefix}--subgrid`]: true,\n    [`${prefix}--subgrid--condensed`]: mode === 'condensed',\n    [`${prefix}--subgrid--narrow`]: mode === 'narrow',\n    [`${prefix}--subgrid--wide`]: mode === 'wide'\n  });\n  return /*#__PURE__*/React__default.createElement(BaseComponent, _extends({}, rest, {\n    className: className\n  }), children);\n};\nSubgrid.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n  /**\n   * Pass in content that will be rendered within the `Subgrid`\n   */\n  children: PropTypes.node,\n  /**\n   * Specify a custom className to be applied to the `Subgrid`\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the gutter mode for the subgrid\n   */\n  mode: PropTypes.oneOf(['wide', 'narrow', 'condensed'])\n};\nconst CSSGridComponent = CSSGrid;\n\nexport { CSSGridComponent as CSSGrid };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}