{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { WarningFilled, WarningAltFilled } from '@carbon/icons-react';\nimport cx from 'classnames';\nimport { useSelect } from 'downshift';\nimport isEqual from 'react-fast-compare';\nimport PropTypes from 'prop-types';\nimport React__default, { useContext, useState, useLayoutEffect, useMemo } from 'react';\nimport ListBox from '../ListBox/index.js';\nimport { sortingPropTypes } from './MultiSelectPropTypes.js';\nimport { defaultSortItems, defaultCompareItems } from './tools/sorting.js';\nimport { useSelection } from '../../internal/Selection.js';\nimport { useId } from '../../internal/useId.js';\nimport mergeRefs from '../../tools/mergeRefs.js';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport '../FluidForm/FluidForm.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\nimport { noopFn } from '../../internal/noopFn.js';\nimport { useFloating, flip, size, autoUpdate } from '@floating-ui/react';\nimport { match } from '../../internal/keyboard/match.js';\nimport { ListBoxSize } from '../ListBox/ListBoxPropTypes.js';\nimport { Delete, Escape, Space, ArrowDown, Enter } from '../../internal/keyboard/keys.js';\nconst {\n  ItemClick,\n  ToggleButtonBlur,\n  ToggleButtonKeyDownArrowDown,\n  ToggleButtonKeyDownArrowUp,\n  ToggleButtonKeyDownEnter,\n  ToggleButtonKeyDownEscape,\n  ToggleButtonKeyDownSpaceButton,\n  ItemMouseMove,\n  MenuMouseLeave,\n  ToggleButtonClick,\n  ToggleButtonKeyDownPageDown,\n  ToggleButtonKeyDownPageUp,\n  FunctionSetHighlightedIndex\n} = useSelect.stateChangeTypes;\nconst defaultItemToString = item => {\n  if (typeof item === 'string') {\n    return item;\n  }\n  if (typeof item === 'number') {\n    return \"\".concat(item);\n  }\n  if (item !== null && typeof item === 'object' && 'label' in item && typeof item['label'] === 'string') {\n    return item['label'];\n  }\n  return '';\n};\nconst MultiSelect = /*#__PURE__*/React__default.forwardRef((_ref, ref) => {\n  var _slug$type;\n  let {\n    autoAlign = false,\n    className: containerClassName,\n    id,\n    items,\n    itemToElement,\n    itemToString = defaultItemToString,\n    titleText = false,\n    hideLabel,\n    helperText,\n    label,\n    type = 'default',\n    size: size$1,\n    disabled = false,\n    initialSelectedItems = [],\n    sortItems = defaultSortItems,\n    compareItems = defaultCompareItems,\n    clearSelectionText = 'To clear selection, press Delete or Backspace',\n    clearAnnouncement = 'all items have been cleared',\n    clearSelectionDescription = 'Total items selected: ',\n    light,\n    invalid,\n    invalidText,\n    warn,\n    warnText,\n    useTitleInItem,\n    translateWithId,\n    downshiftProps,\n    open = false,\n    selectionFeedback = 'top-after-reopen',\n    onChange,\n    onMenuChange,\n    direction = 'bottom',\n    selectedItems: selected,\n    readOnly,\n    locale = 'en',\n    slug\n  } = _ref;\n  const prefix = usePrefix();\n  const {\n    isFluid\n  } = useContext(FormContext);\n  const multiSelectInstanceId = useId();\n  const [isFocused, setIsFocused] = useState(false);\n  const [inputFocused, setInputFocused] = useState(false);\n  const [isOpen, setIsOpen] = useState(open || false);\n  const [prevOpenProp, setPrevOpenProp] = useState(open);\n  const [topItems, setTopItems] = useState([]);\n  const [itemsCleared, setItemsCleared] = useState(false);\n  const {\n    selectedItems: controlledSelectedItems,\n    onItemChange,\n    clearSelection\n  } = useSelection({\n    disabled,\n    initialSelectedItems,\n    onChange,\n    selectedItems: selected\n  });\n  const {\n    refs,\n    floatingStyles,\n    middlewareData\n  } = useFloating(autoAlign ? {\n    placement: direction,\n    // The floating element is positioned relative to its nearest\n    // containing block (usually the viewport). It will in many cases also\n    // “break” the floating element out of a clipping ancestor.\n    // https://floating-ui.com/docs/misc#clipping\n    strategy: 'fixed',\n    // Middleware order matters, arrow should be last\n    middleware: [flip({\n      crossAxis: false\n    }), size({\n      apply(_ref2) {\n        let {\n          rects,\n          elements\n        } = _ref2;\n        Object.assign(elements.floating.style, {\n          width: \"\".concat(rects.reference.width, \"px\")\n        });\n      }\n    })],\n    whileElementsMounted: autoUpdate\n  } : {});\n  useLayoutEffect(() => {\n    if (autoAlign) {\n      Object.keys(floatingStyles).forEach(style => {\n        if (refs.floating.current) {\n          refs.floating.current.style[style] = floatingStyles[style];\n        }\n      });\n    }\n  }, [autoAlign, floatingStyles, refs.floating, middlewareData, open]);\n\n  // Filter out items with an object having undefined values\n  const filteredItems = useMemo(() => {\n    return items.filter(item => {\n      if (typeof item === 'object' && item !== null) {\n        for (const key in item) {\n          if (Object.hasOwn(item, key) && item[key] === undefined) {\n            return false; // Return false if any property has an undefined value\n          }\n        }\n      }\n      return true; // Return true if item is not an object with undefined values\n    });\n  }, [items]);\n  const selectProps = {\n    stateReducer,\n    isOpen,\n    itemToString: filteredItems => {\n      return Array.isArray(filteredItems) && filteredItems.map(function (item) {\n        return itemToString(item);\n      }).join(', ') || '';\n    },\n    selectedItem: controlledSelectedItems,\n    items: filteredItems,\n    isItemDisabled(item, _index) {\n      return item.disabled;\n    },\n    ...downshiftProps\n  };\n  const {\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getItemProps,\n    selectedItem,\n    highlightedIndex,\n    setHighlightedIndex\n  } = useSelect(selectProps);\n  const toggleButtonProps = getToggleButtonProps({\n    onFocus: () => {\n      setInputFocused(true);\n    },\n    onBlur: () => {\n      setInputFocused(false);\n    },\n    onKeyDown: e => {\n      if (!disabled) {\n        if ((match(e, Delete) || match(e, Escape)) && !isOpen) {\n          clearSelection();\n          e.stopPropagation();\n        }\n        if (!isOpen && match(e, Delete) && selectedItems.length > 0) {\n          setItemsCleared(true);\n        }\n        if ((match(e, Space) || match(e, ArrowDown) || match(e, Enter)) && !isOpen) {\n          setHighlightedIndex(0);\n          setItemsCleared(false);\n          setIsOpenWrapper(true);\n        }\n      }\n    }\n  });\n  const mergedRef = mergeRefs(toggleButtonProps.ref, ref);\n  const selectedItems = selectedItem;\n\n  /**\n   * wrapper function to forward changes to consumer\n   */\n  const setIsOpenWrapper = open => {\n    setIsOpen(open);\n    if (onMenuChange) {\n      onMenuChange(open);\n    }\n  };\n\n  /**\n   * programmatically control this `open` prop\n   */\n  if (prevOpenProp !== open) {\n    setIsOpenWrapper(open);\n    setPrevOpenProp(open);\n  }\n  const inline = type === 'inline';\n  const showWarning = !invalid && warn;\n  const wrapperClasses = cx(\"\".concat(prefix, \"--multi-select__wrapper\"), \"\".concat(prefix, \"--list-box__wrapper\"), containerClassName, {\n    [\"\".concat(prefix, \"--multi-select__wrapper--inline\")]: inline,\n    [\"\".concat(prefix, \"--list-box__wrapper--inline\")]: inline,\n    [\"\".concat(prefix, \"--multi-select__wrapper--inline--invalid\")]: inline && invalid,\n    [\"\".concat(prefix, \"--list-box__wrapper--inline--invalid\")]: inline && invalid,\n    [\"\".concat(prefix, \"--list-box__wrapper--fluid--invalid\")]: isFluid && invalid,\n    [\"\".concat(prefix, \"--list-box__wrapper--fluid--focus\")]: !isOpen && isFluid && isFocused,\n    [\"\".concat(prefix, \"--list-box__wrapper--slug\")]: slug\n  });\n  const titleClasses = cx(\"\".concat(prefix, \"--label\"), {\n    [\"\".concat(prefix, \"--label--disabled\")]: disabled,\n    [\"\".concat(prefix, \"--visually-hidden\")]: hideLabel\n  });\n  const helperId = !helperText ? undefined : \"multiselect-helper-text-\".concat(multiSelectInstanceId);\n  const fieldLabelId = \"multiselect-field-label-\".concat(multiSelectInstanceId);\n  const helperClasses = cx(\"\".concat(prefix, \"--form__helper-text\"), {\n    [\"\".concat(prefix, \"--form__helper-text--disabled\")]: disabled\n  });\n  const className = cx(\"\".concat(prefix, \"--multi-select\"), {\n    [\"\".concat(prefix, \"--multi-select--invalid\")]: invalid,\n    [\"\".concat(prefix, \"--multi-select--invalid--focused\")]: invalid && inputFocused,\n    [\"\".concat(prefix, \"--multi-select--warning\")]: showWarning,\n    [\"\".concat(prefix, \"--multi-select--inline\")]: inline,\n    [\"\".concat(prefix, \"--multi-select--selected\")]: selectedItems && selectedItems.length > 0,\n    [\"\".concat(prefix, \"--list-box--up\")]: direction === 'top',\n    [\"\".concat(prefix, \"--multi-select--readonly\")]: readOnly\n  });\n\n  // needs to be capitalized for react to render it correctly\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const ItemToElement = itemToElement;\n  const sortOptions = {\n    selectedItems: controlledSelectedItems,\n    itemToString,\n    compareItems,\n    locale\n  };\n  if (selectionFeedback === 'fixed') {\n    sortOptions.selectedItems = [];\n  } else if (selectionFeedback === 'top-after-reopen') {\n    sortOptions.selectedItems = topItems;\n  }\n  function stateReducer(state, actionAndChanges) {\n    const {\n      changes,\n      props,\n      type\n    } = actionAndChanges;\n    const {\n      highlightedIndex\n    } = changes;\n    if (changes.isOpen && !isOpen) {\n      setTopItems(controlledSelectedItems);\n    }\n    switch (type) {\n      case ToggleButtonKeyDownSpaceButton:\n      case ToggleButtonKeyDownEnter:\n        if (changes.selectedItem === undefined) {\n          break;\n        }\n        if (Array.isArray(changes.selectedItem)) {\n          break;\n        }\n        onItemChange(changes.selectedItem);\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n      case ToggleButtonBlur:\n      case ToggleButtonKeyDownEscape:\n        setIsOpenWrapper(false);\n        break;\n      case ToggleButtonClick:\n        setIsOpenWrapper(changes.isOpen || false);\n        return {\n          ...changes,\n          highlightedIndex: 0\n        };\n      case ItemClick:\n        setHighlightedIndex(changes.selectedItem);\n        onItemChange(changes.selectedItem);\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n      case MenuMouseLeave:\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n      case FunctionSetHighlightedIndex:\n        if (!isOpen) {\n          return {\n            ...changes,\n            highlightedIndex: 0\n          };\n        } else {\n          return {\n            ...changes,\n            highlightedIndex: props.items.indexOf(highlightedIndex)\n          };\n        }\n      case ToggleButtonKeyDownArrowDown:\n      case ToggleButtonKeyDownArrowUp:\n      case ToggleButtonKeyDownPageDown:\n      case ToggleButtonKeyDownPageUp:\n        if (highlightedIndex > -1) {\n          const itemArray = document.querySelectorAll(\"li.\".concat(prefix, \"--list-box__menu-item[role=\\\"option\\\"]\"));\n          props.scrollIntoView(itemArray[highlightedIndex]);\n        }\n        if (highlightedIndex === -1) {\n          return {\n            ...changes,\n            highlightedIndex: 0\n          };\n        }\n        return changes;\n      case ItemMouseMove:\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n    }\n    return changes;\n  }\n  const multiSelectFieldWrapperClasses = cx(\"\".concat(prefix, \"--list-box__field--wrapper\"), {\n    [\"\".concat(prefix, \"--list-box__field--wrapper--input-focused\")]: inputFocused\n  });\n  const handleFocus = evt => {\n    evt.target.classList.contains(\"\".concat(prefix, \"--tag__close-icon\")) ? setIsFocused(false) : setIsFocused(evt.type === 'focus' ? true : false);\n  };\n  const readOnlyEventHandlers = readOnly ? {\n    onClick: evt => {\n      // NOTE: does not prevent click\n      evt.preventDefault();\n      // focus on the element as per readonly input behavior\n      if (mergedRef.current !== undefined) {\n        mergedRef.current.focus();\n      }\n    },\n    onKeyDown: evt => {\n      const selectAccessKeys = ['ArrowDown', 'ArrowUp', ' ', 'Enter'];\n      // This prevents the select from opening for the above keys\n      if (selectAccessKeys.includes(evt.key)) {\n        evt.preventDefault();\n      }\n    }\n  } : {};\n\n  // Slug is always size `mini`\n  let normalizedSlug;\n  if (slug && ((_slug$type = slug['type']) === null || _slug$type === void 0 ? void 0 : _slug$type.displayName) === 'Slug') {\n    normalizedSlug = /*#__PURE__*/React__default.cloneElement(slug, {\n      size: 'mini'\n    });\n  }\n  const itemsSelectedText = selectedItems.length > 0 && selectedItems.map(item => item === null || item === void 0 ? void 0 : item.text);\n\n  // Memoize the value of getMenuProps to avoid an infinite loop\n  const menuProps = useMemo(() => getMenuProps({\n    ref: autoAlign ? refs.setFloating : null\n  }), [autoAlign]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: wrapperClasses\n  }, /*#__PURE__*/React__default.createElement(\"label\", _extends({\n    className: titleClasses\n  }, getLabelProps()), titleText && titleText, selectedItems.length > 0 && /*#__PURE__*/React__default.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--visually-hidden\")\n  }, clearSelectionDescription, \" \", selectedItems.length, ' ', itemsSelectedText, \",\", clearSelectionText)), /*#__PURE__*/React__default.createElement(ListBox, {\n    onFocus: isFluid ? handleFocus : undefined,\n    onBlur: isFluid ? handleFocus : undefined,\n    type: type,\n    size: size$1,\n    className: className,\n    disabled: disabled,\n    light: light,\n    invalid: invalid,\n    invalidText: invalidText,\n    warn: warn,\n    warnText: warnText,\n    isOpen: isOpen,\n    id: id\n  }, invalid && /*#__PURE__*/React__default.createElement(WarningFilled, {\n    className: \"\".concat(prefix, \"--list-box__invalid-icon\")\n  }), showWarning && /*#__PURE__*/React__default.createElement(WarningAltFilled, {\n    className: \"\".concat(prefix, \"--list-box__invalid-icon \").concat(prefix, \"--list-box__invalid-icon--warning\")\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: multiSelectFieldWrapperClasses,\n    ref: autoAlign ? refs.setReference : null\n  }, selectedItems.length > 0 && /*#__PURE__*/React__default.createElement(ListBox.Selection, {\n    readOnly: readOnly,\n    clearSelection: !disabled && !readOnly ? clearSelection : noopFn,\n    selectionCount: selectedItems.length\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    ,\n\n    translateWithId: translateWithId,\n    disabled: disabled\n  }), /*#__PURE__*/React__default.createElement(\"button\", _extends({\n    type: \"button\",\n    className: \"\".concat(prefix, \"--list-box__field\"),\n    disabled: disabled,\n    \"aria-disabled\": disabled || readOnly,\n    \"aria-describedby\": !inline && !invalid && !warn && helperText ? helperId : undefined\n  }, toggleButtonProps, {\n    ref: mergedRef\n  }, readOnlyEventHandlers), /*#__PURE__*/React__default.createElement(\"span\", {\n    id: fieldLabelId,\n    className: \"\".concat(prefix, \"--list-box__label\")\n  }, label), /*#__PURE__*/React__default.createElement(ListBox.MenuIcon, {\n    isOpen: isOpen,\n    translateWithId: translateWithId\n  })), normalizedSlug), /*#__PURE__*/React__default.createElement(ListBox.Menu, menuProps, isOpen &&\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  sortItems(filteredItems, sortOptions).map((item, index) => {\n    const isChecked = selectedItems.filter(selected => isEqual(selected, item)).length > 0;\n    const itemProps = getItemProps({\n      item,\n      // we don't want Downshift to set aria-selected for us\n      // we also don't want to set 'false' for reader verbosity's sake\n      ['aria-selected']: isChecked\n    });\n    const itemText = itemToString(item);\n    return /*#__PURE__*/React__default.createElement(ListBox.MenuItem, _extends({\n      key: itemProps.id,\n      isActive: isChecked,\n      \"aria-label\": itemText,\n      isHighlighted: highlightedIndex === index,\n      title: itemText,\n      disabled: itemProps['aria-disabled']\n    }, itemProps), /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--checkbox-wrapper\")\n    }, /*#__PURE__*/React__default.createElement(\"span\", {\n      title: useTitleInItem ? itemText : undefined,\n      className: \"\".concat(prefix, \"--checkbox-label\"),\n      \"data-contained-checkbox-state\": isChecked,\n      id: \"\".concat(itemProps.id, \"__checkbox\")\n    }, itemToElement ? /*#__PURE__*/React__default.createElement(ItemToElement, _extends({\n      key: itemProps.id\n    }, item)) : itemText)));\n  })), itemsCleared && /*#__PURE__*/React__default.createElement(\"span\", {\n    \"aria-live\": \"assertive\",\n    \"aria-label\": clearAnnouncement\n  })), !inline && !invalid && !warn && helperText && /*#__PURE__*/React__default.createElement(\"div\", {\n    id: helperId,\n    className: helperClasses\n  }, helperText));\n});\nMultiSelect.displayName = 'MultiSelect';\nMultiSelect.propTypes = {\n  ...sortingPropTypes,\n  /**\n   * **Experimental**: Will attempt to automatically align the floating\n   * element to avoid collisions with the viewport and being clipped by\n   * ancestor elements.\n   */\n  autoAlign: PropTypes.bool,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the text that should be read for screen readers that describes total items selected\n   */\n  clearSelectionDescription: PropTypes.string,\n  /**\n   * Specify the text that should be read for screen readers to clear selection.\n   */\n  clearSelectionText: PropTypes.string,\n  /**\n   * Provide a compare function that is used to determine the ordering of\n   * options. See 'sortItems' for more control.\n   */\n  compareItems: PropTypes.func,\n  /**\n   * Specify the direction of the multiselect dropdown. Can be either top or bottom.\n   */\n  direction: PropTypes.oneOf(['top', 'bottom']),\n  /**\n   * Disable the control\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Additional props passed to Downshift.\n   *\n   * **Use with caution:** anything you define here overrides the components'\n   * internal handling of that prop. Downshift APIs and internals are subject to\n   * change, and in some cases they can not be shimmed by Carbon to shield you\n   * from potentially breaking changes.\n   */\n  downshiftProps: PropTypes.object,\n  /**\n   * Provide helper text that is used alongside the control label for\n   * additional help\n   */\n  helperText: PropTypes.node,\n  /**\n   * Specify whether the title text should be hidden or not\n   */\n  hideLabel: PropTypes.bool,\n  /**\n   * Specify a custom `id`\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Allow users to pass in arbitrary items from their collection that are\n   * pre-selected\n   */\n  initialSelectedItems: PropTypes.array,\n  /**\n   * Is the current selection invalid?\n   */\n  invalid: PropTypes.bool,\n  /**\n   * If invalid, what is the error?\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Function to render items as custom components instead of strings.\n   * Defaults to null and is overridden by a getter\n   */\n  itemToElement: PropTypes.func,\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list.\n   */\n  itemToString: PropTypes.func,\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n  /**\n   * Generic `label` that will be used as the textual representation of what\n   * this field is for\n   */\n  label: PropTypes.node.isRequired,\n  /**\n   * `true` to use the light version.\n   */\n  light: deprecate(PropTypes.bool, 'The `light` prop for `MultiSelect` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * Specify the locale of the control. Used for the default `compareItems`\n   * used for sorting the list of items in the control.\n   */\n  locale: PropTypes.string,\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occurring.\n   */\n  onChange: PropTypes.func,\n  /**\n   * `onMenuChange` is a utility for this controlled component to communicate to a\n   * consuming component that the menu was open(`true`)/closed(`false`).\n   */\n  onMenuChange: PropTypes.func,\n  /**\n   * Initialize the component with an open(`true`)/closed(`false`) menu.\n   */\n  open: PropTypes.bool,\n  /**\n   * Whether or not the Dropdown is readonly\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * For full control of the selected items\n   */\n  selectedItems: PropTypes.array,\n  /**\n   * Specify feedback (mode) of the selection.\n   * `top`: selected item jumps to top\n   * `fixed`: selected item stays at it's position\n   * `top-after-reopen`: selected item jump to top after reopen dropdown\n   */\n  selectionFeedback: PropTypes.oneOf(['top', 'fixed', 'top-after-reopen']),\n  /**\n   * Specify the size of the ListBox. Currently supports either `sm`, `md` or `lg` as an option.\n   */\n  size: ListBoxSize,\n  /**\n   * **Experimental**: Provide a `Slug` component to be rendered inside the `MultiSelect` component\n   */\n  slug: PropTypes.node,\n  /**\n   * Provide a method that sorts all options in the control. Overriding this\n   * prop means that you also have to handle the sort logic for selected versus\n   * un-selected items. If you just want to control ordering, consider the\n   * `compareItems` prop instead.\n   *\n   * The return value should be a number whose sign indicates the relative order\n   * of the two elements: negative if a is less than b, positive if a is greater\n   * than b, and zero if they are equal.\n   *\n   * sortItems :\n   *   (items: Array<Item>, {\n   *     selectedItems: Array<Item>,\n   *     itemToString: Item => string,\n   *     compareItems: (itemA: string, itemB: string, {\n   *       locale: string\n   *     }) => number,\n   *     locale: string,\n   *   }) => Array<Item>\n   */\n  sortItems: PropTypes.func,\n  /**\n   * Provide text to be used in a `<label>` element that is tied to the\n   * multiselect via ARIA attributes.\n   */\n  titleText: PropTypes.node,\n  /**\n   * Callback function for translating ListBoxMenuIcon SVG title\n   */\n  translateWithId: PropTypes.func,\n  /**\n   * Specify 'inline' to create an inline multi-select.\n   */\n  type: PropTypes.oneOf(['default', 'inline']),\n  /**\n   * Specify title to show title on hover\n   */\n  useTitleInItem: PropTypes.bool,\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\nexport { MultiSelect as default };","map":{"version":3,"names":["extends","_extends","WarningFilled","WarningAltFilled","cx","useSelect","isEqual","PropTypes","React__default","useContext","useState","useLayoutEffect","useMemo","ListBox","sortingPropTypes","defaultSortItems","defaultCompareItems","useSelection","useId","mergeRefs","deprecate","usePrefix","FormContext","noopFn","useFloating","flip","size","autoUpdate","match","ListBoxSize","Delete","Escape","Space","ArrowDown","Enter","ItemClick","ToggleButtonBlur","ToggleButtonKeyDownArrowDown","ToggleButtonKeyDownArrowUp","ToggleButtonKeyDownEnter","ToggleButtonKeyDownEscape","ToggleButtonKeyDownSpaceButton","ItemMouseMove","MenuMouseLeave","ToggleButtonClick","ToggleButtonKeyDownPageDown","ToggleButtonKeyDownPageUp","FunctionSetHighlightedIndex","stateChangeTypes","defaultItemToString","item","concat","MultiSelect","forwardRef","_ref","ref","_slug$type","autoAlign","className","containerClassName","id","items","itemToElement","itemToString","titleText","hideLabel","helperText","label","type","size$1","disabled","initialSelectedItems","sortItems","compareItems","clearSelectionText","clearAnnouncement","clearSelectionDescription","light","invalid","invalidText","warn","warnText","useTitleInItem","translateWithId","downshiftProps","open","selectionFeedback","onChange","onMenuChange","direction","selectedItems","selected","readOnly","locale","slug","prefix","isFluid","multiSelectInstanceId","isFocused","setIsFocused","inputFocused","setInputFocused","isOpen","setIsOpen","prevOpenProp","setPrevOpenProp","topItems","setTopItems","itemsCleared","setItemsCleared","controlledSelectedItems","onItemChange","clearSelection","refs","floatingStyles","middlewareData","placement","strategy","middleware","crossAxis","apply","_ref2","rects","elements","Object","assign","floating","style","width","reference","whileElementsMounted","keys","forEach","current","filteredItems","filter","key","hasOwn","undefined","selectProps","stateReducer","Array","isArray","map","join","selectedItem","isItemDisabled","_index","getToggleButtonProps","getLabelProps","getMenuProps","getItemProps","highlightedIndex","setHighlightedIndex","toggleButtonProps","onFocus","onBlur","onKeyDown","e","stopPropagation","length","setIsOpenWrapper","mergedRef","inline","showWarning","wrapperClasses","titleClasses","helperId","fieldLabelId","helperClasses","ItemToElement","sortOptions","state","actionAndChanges","changes","props","indexOf","itemArray","document","querySelectorAll","scrollIntoView","multiSelectFieldWrapperClasses","handleFocus","evt","target","classList","contains","readOnlyEventHandlers","onClick","preventDefault","focus","selectAccessKeys","includes","normalizedSlug","displayName","cloneElement","itemsSelectedText","text","menuProps","setFloating","createElement","setReference","Selection","selectionCount","MenuIcon","Menu","index","isChecked","itemProps","itemText","MenuItem","isActive","isHighlighted","title","propTypes","bool","string","func","oneOf","object","node","isRequired","array","default"],"sources":["/Users/davidguan/Local Sites/e/app/public/wp-content/plugins/drhaiel/ls_uhcc_bot_fe/node_modules/@carbon/react/es/components/MultiSelect/MultiSelect.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { WarningFilled, WarningAltFilled } from '@carbon/icons-react';\nimport cx from 'classnames';\nimport { useSelect } from 'downshift';\nimport isEqual from 'react-fast-compare';\nimport PropTypes from 'prop-types';\nimport React__default, { useContext, useState, useLayoutEffect, useMemo } from 'react';\nimport ListBox from '../ListBox/index.js';\nimport { sortingPropTypes } from './MultiSelectPropTypes.js';\nimport { defaultSortItems, defaultCompareItems } from './tools/sorting.js';\nimport { useSelection } from '../../internal/Selection.js';\nimport { useId } from '../../internal/useId.js';\nimport mergeRefs from '../../tools/mergeRefs.js';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport '../FluidForm/FluidForm.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\nimport { noopFn } from '../../internal/noopFn.js';\nimport { useFloating, flip, size, autoUpdate } from '@floating-ui/react';\nimport { match } from '../../internal/keyboard/match.js';\nimport { ListBoxSize } from '../ListBox/ListBoxPropTypes.js';\nimport { Delete, Escape, Space, ArrowDown, Enter } from '../../internal/keyboard/keys.js';\n\nconst {\n  ItemClick,\n  ToggleButtonBlur,\n  ToggleButtonKeyDownArrowDown,\n  ToggleButtonKeyDownArrowUp,\n  ToggleButtonKeyDownEnter,\n  ToggleButtonKeyDownEscape,\n  ToggleButtonKeyDownSpaceButton,\n  ItemMouseMove,\n  MenuMouseLeave,\n  ToggleButtonClick,\n  ToggleButtonKeyDownPageDown,\n  ToggleButtonKeyDownPageUp,\n  FunctionSetHighlightedIndex\n} = useSelect.stateChangeTypes;\nconst defaultItemToString = item => {\n  if (typeof item === 'string') {\n    return item;\n  }\n  if (typeof item === 'number') {\n    return `${item}`;\n  }\n  if (item !== null && typeof item === 'object' && 'label' in item && typeof item['label'] === 'string') {\n    return item['label'];\n  }\n  return '';\n};\nconst MultiSelect = /*#__PURE__*/React__default.forwardRef((_ref, ref) => {\n  let {\n    autoAlign = false,\n    className: containerClassName,\n    id,\n    items,\n    itemToElement,\n    itemToString = defaultItemToString,\n    titleText = false,\n    hideLabel,\n    helperText,\n    label,\n    type = 'default',\n    size: size$1,\n    disabled = false,\n    initialSelectedItems = [],\n    sortItems = defaultSortItems,\n    compareItems = defaultCompareItems,\n    clearSelectionText = 'To clear selection, press Delete or Backspace',\n    clearAnnouncement = 'all items have been cleared',\n    clearSelectionDescription = 'Total items selected: ',\n    light,\n    invalid,\n    invalidText,\n    warn,\n    warnText,\n    useTitleInItem,\n    translateWithId,\n    downshiftProps,\n    open = false,\n    selectionFeedback = 'top-after-reopen',\n    onChange,\n    onMenuChange,\n    direction = 'bottom',\n    selectedItems: selected,\n    readOnly,\n    locale = 'en',\n    slug\n  } = _ref;\n  const prefix = usePrefix();\n  const {\n    isFluid\n  } = useContext(FormContext);\n  const multiSelectInstanceId = useId();\n  const [isFocused, setIsFocused] = useState(false);\n  const [inputFocused, setInputFocused] = useState(false);\n  const [isOpen, setIsOpen] = useState(open || false);\n  const [prevOpenProp, setPrevOpenProp] = useState(open);\n  const [topItems, setTopItems] = useState([]);\n  const [itemsCleared, setItemsCleared] = useState(false);\n  const {\n    selectedItems: controlledSelectedItems,\n    onItemChange,\n    clearSelection\n  } = useSelection({\n    disabled,\n    initialSelectedItems,\n    onChange,\n    selectedItems: selected\n  });\n  const {\n    refs,\n    floatingStyles,\n    middlewareData\n  } = useFloating(autoAlign ? {\n    placement: direction,\n    // The floating element is positioned relative to its nearest\n    // containing block (usually the viewport). It will in many cases also\n    // “break” the floating element out of a clipping ancestor.\n    // https://floating-ui.com/docs/misc#clipping\n    strategy: 'fixed',\n    // Middleware order matters, arrow should be last\n    middleware: [flip({\n      crossAxis: false\n    }), size({\n      apply(_ref2) {\n        let {\n          rects,\n          elements\n        } = _ref2;\n        Object.assign(elements.floating.style, {\n          width: `${rects.reference.width}px`\n        });\n      }\n    })],\n    whileElementsMounted: autoUpdate\n  } : {});\n  useLayoutEffect(() => {\n    if (autoAlign) {\n      Object.keys(floatingStyles).forEach(style => {\n        if (refs.floating.current) {\n          refs.floating.current.style[style] = floatingStyles[style];\n        }\n      });\n    }\n  }, [autoAlign, floatingStyles, refs.floating, middlewareData, open]);\n\n  // Filter out items with an object having undefined values\n  const filteredItems = useMemo(() => {\n    return items.filter(item => {\n      if (typeof item === 'object' && item !== null) {\n        for (const key in item) {\n          if (Object.hasOwn(item, key) && item[key] === undefined) {\n            return false; // Return false if any property has an undefined value\n          }\n        }\n      }\n      return true; // Return true if item is not an object with undefined values\n    });\n  }, [items]);\n  const selectProps = {\n    stateReducer,\n    isOpen,\n    itemToString: filteredItems => {\n      return Array.isArray(filteredItems) && filteredItems.map(function (item) {\n        return itemToString(item);\n      }).join(', ') || '';\n    },\n    selectedItem: controlledSelectedItems,\n    items: filteredItems,\n    isItemDisabled(item, _index) {\n      return item.disabled;\n    },\n    ...downshiftProps\n  };\n  const {\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getItemProps,\n    selectedItem,\n    highlightedIndex,\n    setHighlightedIndex\n  } = useSelect(selectProps);\n  const toggleButtonProps = getToggleButtonProps({\n    onFocus: () => {\n      setInputFocused(true);\n    },\n    onBlur: () => {\n      setInputFocused(false);\n    },\n    onKeyDown: e => {\n      if (!disabled) {\n        if ((match(e, Delete) || match(e, Escape)) && !isOpen) {\n          clearSelection();\n          e.stopPropagation();\n        }\n        if (!isOpen && match(e, Delete) && selectedItems.length > 0) {\n          setItemsCleared(true);\n        }\n        if ((match(e, Space) || match(e, ArrowDown) || match(e, Enter)) && !isOpen) {\n          setHighlightedIndex(0);\n          setItemsCleared(false);\n          setIsOpenWrapper(true);\n        }\n      }\n    }\n  });\n  const mergedRef = mergeRefs(toggleButtonProps.ref, ref);\n  const selectedItems = selectedItem;\n\n  /**\n   * wrapper function to forward changes to consumer\n   */\n  const setIsOpenWrapper = open => {\n    setIsOpen(open);\n    if (onMenuChange) {\n      onMenuChange(open);\n    }\n  };\n\n  /**\n   * programmatically control this `open` prop\n   */\n  if (prevOpenProp !== open) {\n    setIsOpenWrapper(open);\n    setPrevOpenProp(open);\n  }\n  const inline = type === 'inline';\n  const showWarning = !invalid && warn;\n  const wrapperClasses = cx(`${prefix}--multi-select__wrapper`, `${prefix}--list-box__wrapper`, containerClassName, {\n    [`${prefix}--multi-select__wrapper--inline`]: inline,\n    [`${prefix}--list-box__wrapper--inline`]: inline,\n    [`${prefix}--multi-select__wrapper--inline--invalid`]: inline && invalid,\n    [`${prefix}--list-box__wrapper--inline--invalid`]: inline && invalid,\n    [`${prefix}--list-box__wrapper--fluid--invalid`]: isFluid && invalid,\n    [`${prefix}--list-box__wrapper--fluid--focus`]: !isOpen && isFluid && isFocused,\n    [`${prefix}--list-box__wrapper--slug`]: slug\n  });\n  const titleClasses = cx(`${prefix}--label`, {\n    [`${prefix}--label--disabled`]: disabled,\n    [`${prefix}--visually-hidden`]: hideLabel\n  });\n  const helperId = !helperText ? undefined : `multiselect-helper-text-${multiSelectInstanceId}`;\n  const fieldLabelId = `multiselect-field-label-${multiSelectInstanceId}`;\n  const helperClasses = cx(`${prefix}--form__helper-text`, {\n    [`${prefix}--form__helper-text--disabled`]: disabled\n  });\n  const className = cx(`${prefix}--multi-select`, {\n    [`${prefix}--multi-select--invalid`]: invalid,\n    [`${prefix}--multi-select--invalid--focused`]: invalid && inputFocused,\n    [`${prefix}--multi-select--warning`]: showWarning,\n    [`${prefix}--multi-select--inline`]: inline,\n    [`${prefix}--multi-select--selected`]: selectedItems && selectedItems.length > 0,\n    [`${prefix}--list-box--up`]: direction === 'top',\n    [`${prefix}--multi-select--readonly`]: readOnly\n  });\n\n  // needs to be capitalized for react to render it correctly\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const ItemToElement = itemToElement;\n  const sortOptions = {\n    selectedItems: controlledSelectedItems,\n    itemToString,\n    compareItems,\n    locale\n  };\n  if (selectionFeedback === 'fixed') {\n    sortOptions.selectedItems = [];\n  } else if (selectionFeedback === 'top-after-reopen') {\n    sortOptions.selectedItems = topItems;\n  }\n  function stateReducer(state, actionAndChanges) {\n    const {\n      changes,\n      props,\n      type\n    } = actionAndChanges;\n    const {\n      highlightedIndex\n    } = changes;\n    if (changes.isOpen && !isOpen) {\n      setTopItems(controlledSelectedItems);\n    }\n    switch (type) {\n      case ToggleButtonKeyDownSpaceButton:\n      case ToggleButtonKeyDownEnter:\n        if (changes.selectedItem === undefined) {\n          break;\n        }\n        if (Array.isArray(changes.selectedItem)) {\n          break;\n        }\n        onItemChange(changes.selectedItem);\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n      case ToggleButtonBlur:\n      case ToggleButtonKeyDownEscape:\n        setIsOpenWrapper(false);\n        break;\n      case ToggleButtonClick:\n        setIsOpenWrapper(changes.isOpen || false);\n        return {\n          ...changes,\n          highlightedIndex: 0\n        };\n      case ItemClick:\n        setHighlightedIndex(changes.selectedItem);\n        onItemChange(changes.selectedItem);\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n      case MenuMouseLeave:\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n      case FunctionSetHighlightedIndex:\n        if (!isOpen) {\n          return {\n            ...changes,\n            highlightedIndex: 0\n          };\n        } else {\n          return {\n            ...changes,\n            highlightedIndex: props.items.indexOf(highlightedIndex)\n          };\n        }\n      case ToggleButtonKeyDownArrowDown:\n      case ToggleButtonKeyDownArrowUp:\n      case ToggleButtonKeyDownPageDown:\n      case ToggleButtonKeyDownPageUp:\n        if (highlightedIndex > -1) {\n          const itemArray = document.querySelectorAll(`li.${prefix}--list-box__menu-item[role=\"option\"]`);\n          props.scrollIntoView(itemArray[highlightedIndex]);\n        }\n        if (highlightedIndex === -1) {\n          return {\n            ...changes,\n            highlightedIndex: 0\n          };\n        }\n        return changes;\n      case ItemMouseMove:\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n    }\n    return changes;\n  }\n  const multiSelectFieldWrapperClasses = cx(`${prefix}--list-box__field--wrapper`, {\n    [`${prefix}--list-box__field--wrapper--input-focused`]: inputFocused\n  });\n  const handleFocus = evt => {\n    evt.target.classList.contains(`${prefix}--tag__close-icon`) ? setIsFocused(false) : setIsFocused(evt.type === 'focus' ? true : false);\n  };\n  const readOnlyEventHandlers = readOnly ? {\n    onClick: evt => {\n      // NOTE: does not prevent click\n      evt.preventDefault();\n      // focus on the element as per readonly input behavior\n      if (mergedRef.current !== undefined) {\n        mergedRef.current.focus();\n      }\n    },\n    onKeyDown: evt => {\n      const selectAccessKeys = ['ArrowDown', 'ArrowUp', ' ', 'Enter'];\n      // This prevents the select from opening for the above keys\n      if (selectAccessKeys.includes(evt.key)) {\n        evt.preventDefault();\n      }\n    }\n  } : {};\n\n  // Slug is always size `mini`\n  let normalizedSlug;\n  if (slug && slug['type']?.displayName === 'Slug') {\n    normalizedSlug = /*#__PURE__*/React__default.cloneElement(slug, {\n      size: 'mini'\n    });\n  }\n  const itemsSelectedText = selectedItems.length > 0 && selectedItems.map(item => item?.text);\n\n  // Memoize the value of getMenuProps to avoid an infinite loop\n  const menuProps = useMemo(() => getMenuProps({\n    ref: autoAlign ? refs.setFloating : null\n  }), [autoAlign]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: wrapperClasses\n  }, /*#__PURE__*/React__default.createElement(\"label\", _extends({\n    className: titleClasses\n  }, getLabelProps()), titleText && titleText, selectedItems.length > 0 && /*#__PURE__*/React__default.createElement(\"span\", {\n    className: `${prefix}--visually-hidden`\n  }, clearSelectionDescription, \" \", selectedItems.length, ' ', itemsSelectedText, \",\", clearSelectionText)), /*#__PURE__*/React__default.createElement(ListBox, {\n    onFocus: isFluid ? handleFocus : undefined,\n    onBlur: isFluid ? handleFocus : undefined,\n    type: type,\n    size: size$1,\n    className: className,\n    disabled: disabled,\n    light: light,\n    invalid: invalid,\n    invalidText: invalidText,\n    warn: warn,\n    warnText: warnText,\n    isOpen: isOpen,\n    id: id\n  }, invalid && /*#__PURE__*/React__default.createElement(WarningFilled, {\n    className: `${prefix}--list-box__invalid-icon`\n  }), showWarning && /*#__PURE__*/React__default.createElement(WarningAltFilled, {\n    className: `${prefix}--list-box__invalid-icon ${prefix}--list-box__invalid-icon--warning`\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: multiSelectFieldWrapperClasses,\n    ref: autoAlign ? refs.setReference : null\n  }, selectedItems.length > 0 && /*#__PURE__*/React__default.createElement(ListBox.Selection, {\n    readOnly: readOnly,\n    clearSelection: !disabled && !readOnly ? clearSelection : noopFn,\n    selectionCount: selectedItems.length\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    ,\n    translateWithId: translateWithId,\n    disabled: disabled\n  }), /*#__PURE__*/React__default.createElement(\"button\", _extends({\n    type: \"button\",\n    className: `${prefix}--list-box__field`,\n    disabled: disabled,\n    \"aria-disabled\": disabled || readOnly,\n    \"aria-describedby\": !inline && !invalid && !warn && helperText ? helperId : undefined\n  }, toggleButtonProps, {\n    ref: mergedRef\n  }, readOnlyEventHandlers), /*#__PURE__*/React__default.createElement(\"span\", {\n    id: fieldLabelId,\n    className: `${prefix}--list-box__label`\n  }, label), /*#__PURE__*/React__default.createElement(ListBox.MenuIcon, {\n    isOpen: isOpen,\n    translateWithId: translateWithId\n  })), normalizedSlug), /*#__PURE__*/React__default.createElement(ListBox.Menu, menuProps, isOpen &&\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  sortItems(filteredItems, sortOptions).map((item, index) => {\n    const isChecked = selectedItems.filter(selected => isEqual(selected, item)).length > 0;\n    const itemProps = getItemProps({\n      item,\n      // we don't want Downshift to set aria-selected for us\n      // we also don't want to set 'false' for reader verbosity's sake\n      ['aria-selected']: isChecked\n    });\n    const itemText = itemToString(item);\n    return /*#__PURE__*/React__default.createElement(ListBox.MenuItem, _extends({\n      key: itemProps.id,\n      isActive: isChecked,\n      \"aria-label\": itemText,\n      isHighlighted: highlightedIndex === index,\n      title: itemText,\n      disabled: itemProps['aria-disabled']\n    }, itemProps), /*#__PURE__*/React__default.createElement(\"div\", {\n      className: `${prefix}--checkbox-wrapper`\n    }, /*#__PURE__*/React__default.createElement(\"span\", {\n      title: useTitleInItem ? itemText : undefined,\n      className: `${prefix}--checkbox-label`,\n      \"data-contained-checkbox-state\": isChecked,\n      id: `${itemProps.id}__checkbox`\n    }, itemToElement ? /*#__PURE__*/React__default.createElement(ItemToElement, _extends({\n      key: itemProps.id\n    }, item)) : itemText)));\n  })), itemsCleared && /*#__PURE__*/React__default.createElement(\"span\", {\n    \"aria-live\": \"assertive\",\n    \"aria-label\": clearAnnouncement\n  })), !inline && !invalid && !warn && helperText && /*#__PURE__*/React__default.createElement(\"div\", {\n    id: helperId,\n    className: helperClasses\n  }, helperText));\n});\nMultiSelect.displayName = 'MultiSelect';\nMultiSelect.propTypes = {\n  ...sortingPropTypes,\n  /**\n   * **Experimental**: Will attempt to automatically align the floating\n   * element to avoid collisions with the viewport and being clipped by\n   * ancestor elements.\n   */\n  autoAlign: PropTypes.bool,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the text that should be read for screen readers that describes total items selected\n   */\n  clearSelectionDescription: PropTypes.string,\n  /**\n   * Specify the text that should be read for screen readers to clear selection.\n   */\n  clearSelectionText: PropTypes.string,\n  /**\n   * Provide a compare function that is used to determine the ordering of\n   * options. See 'sortItems' for more control.\n   */\n  compareItems: PropTypes.func,\n  /**\n   * Specify the direction of the multiselect dropdown. Can be either top or bottom.\n   */\n  direction: PropTypes.oneOf(['top', 'bottom']),\n  /**\n   * Disable the control\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Additional props passed to Downshift.\n   *\n   * **Use with caution:** anything you define here overrides the components'\n   * internal handling of that prop. Downshift APIs and internals are subject to\n   * change, and in some cases they can not be shimmed by Carbon to shield you\n   * from potentially breaking changes.\n   */\n  downshiftProps: PropTypes.object,\n  /**\n   * Provide helper text that is used alongside the control label for\n   * additional help\n   */\n  helperText: PropTypes.node,\n  /**\n   * Specify whether the title text should be hidden or not\n   */\n  hideLabel: PropTypes.bool,\n  /**\n   * Specify a custom `id`\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Allow users to pass in arbitrary items from their collection that are\n   * pre-selected\n   */\n  initialSelectedItems: PropTypes.array,\n  /**\n   * Is the current selection invalid?\n   */\n  invalid: PropTypes.bool,\n  /**\n   * If invalid, what is the error?\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Function to render items as custom components instead of strings.\n   * Defaults to null and is overridden by a getter\n   */\n  itemToElement: PropTypes.func,\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list.\n   */\n  itemToString: PropTypes.func,\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n  /**\n   * Generic `label` that will be used as the textual representation of what\n   * this field is for\n   */\n  label: PropTypes.node.isRequired,\n  /**\n   * `true` to use the light version.\n   */\n  light: deprecate(PropTypes.bool, 'The `light` prop for `MultiSelect` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * Specify the locale of the control. Used for the default `compareItems`\n   * used for sorting the list of items in the control.\n   */\n  locale: PropTypes.string,\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occurring.\n   */\n  onChange: PropTypes.func,\n  /**\n   * `onMenuChange` is a utility for this controlled component to communicate to a\n   * consuming component that the menu was open(`true`)/closed(`false`).\n   */\n  onMenuChange: PropTypes.func,\n  /**\n   * Initialize the component with an open(`true`)/closed(`false`) menu.\n   */\n  open: PropTypes.bool,\n  /**\n   * Whether or not the Dropdown is readonly\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * For full control of the selected items\n   */\n  selectedItems: PropTypes.array,\n  /**\n   * Specify feedback (mode) of the selection.\n   * `top`: selected item jumps to top\n   * `fixed`: selected item stays at it's position\n   * `top-after-reopen`: selected item jump to top after reopen dropdown\n   */\n  selectionFeedback: PropTypes.oneOf(['top', 'fixed', 'top-after-reopen']),\n  /**\n   * Specify the size of the ListBox. Currently supports either `sm`, `md` or `lg` as an option.\n   */\n  size: ListBoxSize,\n  /**\n   * **Experimental**: Provide a `Slug` component to be rendered inside the `MultiSelect` component\n   */\n  slug: PropTypes.node,\n  /**\n   * Provide a method that sorts all options in the control. Overriding this\n   * prop means that you also have to handle the sort logic for selected versus\n   * un-selected items. If you just want to control ordering, consider the\n   * `compareItems` prop instead.\n   *\n   * The return value should be a number whose sign indicates the relative order\n   * of the two elements: negative if a is less than b, positive if a is greater\n   * than b, and zero if they are equal.\n   *\n   * sortItems :\n   *   (items: Array<Item>, {\n   *     selectedItems: Array<Item>,\n   *     itemToString: Item => string,\n   *     compareItems: (itemA: string, itemB: string, {\n   *       locale: string\n   *     }) => number,\n   *     locale: string,\n   *   }) => Array<Item>\n   */\n  sortItems: PropTypes.func,\n  /**\n   * Provide text to be used in a `<label>` element that is tied to the\n   * multiselect via ARIA attributes.\n   */\n  titleText: PropTypes.node,\n  /**\n   * Callback function for translating ListBoxMenuIcon SVG title\n   */\n  translateWithId: PropTypes.func,\n  /**\n   * Specify 'inline' to create an inline multi-select.\n   */\n  type: PropTypes.oneOf(['default', 'inline']),\n  /**\n   * Specify title to show title on hover\n   */\n  useTitleInItem: PropTypes.bool,\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\n\nexport { MultiSelect as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}