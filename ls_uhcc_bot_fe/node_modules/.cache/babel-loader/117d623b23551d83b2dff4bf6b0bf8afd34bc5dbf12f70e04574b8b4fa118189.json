{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { useState, useRef, useCallback, useEffect } from 'react';\nimport cx from 'classnames';\nimport useResizeObserver from 'use-resize-observer/polyfilled';\nimport { ChevronDown } from '@carbon/icons-react';\nimport Copy from '../Copy/Copy.js';\nimport Button from '../Button/Button.js';\nimport '../Button/Button.Skeleton.js';\nimport CopyButton from '../CopyButton/CopyButton.js';\nimport uniqueId from '../../tools/uniqueId.js';\nimport copy from 'copy-to-clipboard';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nconst rowHeightInPixels = 16;\nconst defaultMaxCollapsedNumberOfRows = 15;\nconst defaultMaxExpandedNumberOfRows = 0;\nconst defaultMinCollapsedNumberOfRows = 3;\nconst defaultMinExpandedNumberOfRows = 16;\nfunction CodeSnippet(_ref) {\n  let {\n    align = 'bottom',\n    className,\n    type = 'single',\n    children,\n    disabled,\n    feedback,\n    feedbackTimeout,\n    onClick,\n    ['aria-label']: ariaLabel = 'Copy to clipboard',\n    ariaLabel: deprecatedAriaLabel,\n    copyText,\n    copyButtonDescription,\n    light,\n    showMoreText = 'Show more',\n    showLessText = 'Show less',\n    hideCopyButton,\n    wrapText = false,\n    maxCollapsedNumberOfRows = defaultMaxCollapsedNumberOfRows,\n    maxExpandedNumberOfRows = defaultMaxExpandedNumberOfRows,\n    minCollapsedNumberOfRows = defaultMinCollapsedNumberOfRows,\n    minExpandedNumberOfRows = defaultMinExpandedNumberOfRows,\n    ...rest\n  } = _ref;\n  const [expandedCode, setExpandedCode] = useState(false);\n  const [shouldShowMoreLessBtn, setShouldShowMoreLessBtn] = useState(false);\n  const {\n    current: uid\n  } = useRef(uniqueId());\n  const codeContentRef = useRef(null);\n  const codeContainerRef = useRef(null);\n  const innerCodeRef = useRef(null);\n  const [hasLeftOverflow, setHasLeftOverflow] = useState(false);\n  const [hasRightOverflow, setHasRightOverflow] = useState(false);\n  const getCodeRef = useCallback(() => {\n    if (type === 'single') {\n      return codeContainerRef;\n    }\n    if (type === 'multi') {\n      return codeContentRef;\n    } else {\n      return innerCodeRef;\n    }\n  }, [type]);\n  const prefix = usePrefix();\n  const getCodeRefDimensions = useCallback(() => {\n    const {\n      clientWidth: codeClientWidth = 0,\n      scrollLeft: codeScrollLeft = 0,\n      scrollWidth: codeScrollWidth = 0\n    } = getCodeRef().current || {};\n    return {\n      horizontalOverflow: codeScrollWidth > codeClientWidth,\n      codeClientWidth,\n      codeScrollWidth,\n      codeScrollLeft\n    };\n  }, [getCodeRef]);\n  const handleScroll = useCallback(() => {\n    if (type === 'inline' || type === 'single' && !(codeContainerRef !== null && codeContainerRef !== void 0 && codeContainerRef.current) || type === 'multi' && !(codeContentRef !== null && codeContentRef !== void 0 && codeContentRef.current)) {\n      return;\n    }\n    const {\n      horizontalOverflow,\n      codeClientWidth,\n      codeScrollWidth,\n      codeScrollLeft\n    } = getCodeRefDimensions();\n    setHasLeftOverflow(horizontalOverflow && !!codeScrollLeft);\n    setHasRightOverflow(horizontalOverflow && codeScrollLeft + codeClientWidth !== codeScrollWidth);\n  }, [type, getCodeRefDimensions]);\n  useResizeObserver({\n    ref: getCodeRef(),\n    onResize: () => {\n      if (codeContentRef !== null && codeContentRef !== void 0 && codeContentRef.current && type === 'multi') {\n        const {\n          height\n        } = codeContentRef.current.getBoundingClientRect();\n        if (maxCollapsedNumberOfRows > 0 && (maxExpandedNumberOfRows <= 0 || maxExpandedNumberOfRows > maxCollapsedNumberOfRows) && height > maxCollapsedNumberOfRows * rowHeightInPixels) {\n          setShouldShowMoreLessBtn(true);\n        } else {\n          setShouldShowMoreLessBtn(false);\n        }\n        if (expandedCode && minExpandedNumberOfRows > 0 && height <= minExpandedNumberOfRows * rowHeightInPixels) {\n          setExpandedCode(false);\n        }\n      }\n      if (codeContentRef !== null && codeContentRef !== void 0 && codeContentRef.current && type === 'multi' || codeContainerRef !== null && codeContainerRef !== void 0 && codeContainerRef.current && type === 'single') {\n        handleScroll();\n      }\n    }\n  });\n  useEffect(() => {\n    handleScroll();\n  }, [handleScroll]);\n  const handleCopyClick = evt => {\n    if (copyText || innerCodeRef !== null && innerCodeRef !== void 0 && innerCodeRef.current) {\n      var _ref2, _innerCodeRef$current;\n      copy((_ref2 = copyText !== null && copyText !== void 0 ? copyText : innerCodeRef === null || innerCodeRef === void 0 || (_innerCodeRef$current = innerCodeRef.current) === null || _innerCodeRef$current === void 0 ? void 0 : _innerCodeRef$current.innerText) !== null && _ref2 !== void 0 ? _ref2 : '');\n    }\n    if (onClick) {\n      onClick(evt);\n    }\n  };\n  const codeSnippetClasses = cx(className, \"\".concat(prefix, \"--snippet\"), {\n    [\"\".concat(prefix, \"--snippet--\").concat(type)]: type,\n    [\"\".concat(prefix, \"--snippet--disabled\")]: type !== 'inline' && disabled,\n    [\"\".concat(prefix, \"--snippet--expand\")]: expandedCode,\n    [\"\".concat(prefix, \"--snippet--light\")]: light,\n    [\"\".concat(prefix, \"--snippet--no-copy\")]: hideCopyButton,\n    [\"\".concat(prefix, \"--snippet--wraptext\")]: wrapText,\n    [\"\".concat(prefix, \"--snippet--has-right-overflow\")]: type == 'multi' && hasRightOverflow\n  });\n  const expandCodeBtnText = expandedCode ? showLessText : showMoreText;\n  if (type === 'inline') {\n    if (hideCopyButton) {\n      return /*#__PURE__*/React__default.createElement(\"span\", {\n        className: codeSnippetClasses\n      }, /*#__PURE__*/React__default.createElement(\"code\", {\n        id: uid,\n        ref: innerCodeRef\n      }, children));\n    }\n    return /*#__PURE__*/React__default.createElement(Copy, _extends({}, rest, {\n      align: align,\n      onClick: handleCopyClick,\n      \"aria-label\": deprecatedAriaLabel || ariaLabel,\n      \"aria-describedby\": uid,\n      className: codeSnippetClasses,\n      feedback: feedback,\n      feedbackTimeout: feedbackTimeout\n    }), /*#__PURE__*/React__default.createElement(\"code\", {\n      id: uid,\n      ref: innerCodeRef\n    }, children));\n  }\n  const containerStyle = {};\n  if (type === 'multi') {\n    const styles = {};\n    if (expandedCode) {\n      if (maxExpandedNumberOfRows > 0) {\n        styles.maxHeight = maxExpandedNumberOfRows * rowHeightInPixels;\n      }\n      if (minExpandedNumberOfRows > 0) {\n        styles.minHeight = minExpandedNumberOfRows * rowHeightInPixels;\n      }\n    } else {\n      if (maxCollapsedNumberOfRows > 0) {\n        styles.maxHeight = maxCollapsedNumberOfRows * rowHeightInPixels;\n      }\n      if (minCollapsedNumberOfRows > 0) {\n        styles.minHeight = minCollapsedNumberOfRows * rowHeightInPixels;\n      }\n    }\n    if (Object.keys(styles).length) {\n      containerStyle.style = styles;\n    }\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({}, rest, {\n    className: codeSnippetClasses\n  }), /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    ref: codeContainerRef,\n    role: type === 'single' || type === 'multi' ? 'textbox' : undefined,\n    tabIndex: (type === 'single' || type === 'multi') && !disabled ? 0 : undefined,\n    className: \"\".concat(prefix, \"--snippet-container\"),\n    \"aria-label\": deprecatedAriaLabel || ariaLabel || 'code-snippet',\n    \"aria-readonly\": type === 'single' || type === 'multi' ? true : undefined,\n    \"aria-multiline\": type === 'multi' ? true : undefined,\n    onScroll: type === 'single' && handleScroll || undefined\n  }, containerStyle), /*#__PURE__*/React__default.createElement(\"pre\", {\n    ref: codeContentRef,\n    onScroll: type === 'multi' && handleScroll || undefined\n  }, /*#__PURE__*/React__default.createElement(\"code\", {\n    ref: innerCodeRef\n  }, children))), hasLeftOverflow && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--snippet__overflow-indicator--left\")\n  }), hasRightOverflow && type !== 'multi' && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--snippet__overflow-indicator--right\")\n  }), !hideCopyButton && /*#__PURE__*/React__default.createElement(CopyButton, {\n    align: align,\n    size: type === 'multi' ? 'sm' : 'md',\n    disabled: disabled,\n    onClick: handleCopyClick,\n    feedback: feedback,\n    feedbackTimeout: feedbackTimeout,\n    iconDescription: copyButtonDescription\n  }), shouldShowMoreLessBtn && /*#__PURE__*/React__default.createElement(Button, {\n    kind: \"ghost\",\n    size: \"sm\",\n    className: \"\".concat(prefix, \"--snippet-btn--expand\"),\n    disabled: disabled,\n    onClick: () => setExpandedCode(!expandedCode)\n  }, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--snippet-btn--text\")\n  }, expandCodeBtnText), /*#__PURE__*/React__default.createElement(ChevronDown, {\n    className: \"\".concat(prefix, \"--icon-chevron--down \").concat(prefix, \"--snippet__icon\"),\n    name: \"chevron--down\",\n    role: \"img\"\n  })));\n}\nCodeSnippet.propTypes = {\n  /**\n   * Specify how the trigger should align with the tooltip\n   */\n  align: PropTypes.oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'right']),\n  /**\n   * Specify a label to be read by screen readers on the containing textbox\n   * node\n   */\n  ['aria-label']: PropTypes.string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Specify a label to be read by screen readers on the containing textbox\n   * node\n   */\n  ariaLabel: deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * Provide the content of your CodeSnippet as a node or string\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the description for the Copy Button\n   */\n  copyButtonDescription: PropTypes.string,\n  /**\n   * Optional text to copy. If not specified, the `children` node's `innerText`\n   * will be used as the copy value.\n   */\n  copyText: PropTypes.string,\n  /**\n   * Specify whether or not the CodeSnippet should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify the string displayed when the snippet is copied\n   */\n  feedback: PropTypes.string,\n  /**\n   * Specify the time it takes for the feedback message to timeout\n   */\n  feedbackTimeout: PropTypes.number,\n  /**\n   * Specify whether or not a copy button should be used/rendered.\n   */\n  hideCopyButton: PropTypes.bool,\n  /**\n   * Specify whether you are using the light variant of the Code Snippet,\n   * typically used for inline snippet to display an alternate color\n   */\n\n  light: deprecate(PropTypes.bool, 'The `light` prop for `CodeSnippet` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * Specify the maximum number of rows to be shown when in collapsed view\n   */\n  maxCollapsedNumberOfRows: PropTypes.number,\n  /**\n   * Specify the maximum number of rows to be shown when in expanded view\n   */\n  maxExpandedNumberOfRows: PropTypes.number,\n  /**\n   * Specify the minimum number of rows to be shown when in collapsed view\n   */\n  minCollapsedNumberOfRows: PropTypes.number,\n  /**\n   * Specify the minimum number of rows to be shown when in expanded view\n   */\n  minExpandedNumberOfRows: PropTypes.number,\n  /**\n   * An optional handler to listen to the `onClick` even fired by the Copy\n   * Button\n   */\n  onClick: PropTypes.func,\n  /**\n   * Specify a string that is displayed when the Code Snippet has been\n   * interacted with to show more lines\n   */\n  showLessText: PropTypes.string,\n  /**\n   * Specify a string that is displayed when the Code Snippet text is more\n   * than 15 lines\n   */\n  showMoreText: PropTypes.string,\n  /**\n   * Provide the type of Code Snippet\n   */\n  type: PropTypes.oneOf(['single', 'inline', 'multi']),\n  /**\n   * Specify whether or not to wrap the text.\n   */\n  wrapText: PropTypes.bool\n};\nexport { CodeSnippet as default };","map":{"version":3,"names":["extends","_extends","PropTypes","React__default","useState","useRef","useCallback","useEffect","cx","useResizeObserver","ChevronDown","Copy","Button","CopyButton","uniqueId","copy","deprecate","usePrefix","rowHeightInPixels","defaultMaxCollapsedNumberOfRows","defaultMaxExpandedNumberOfRows","defaultMinCollapsedNumberOfRows","defaultMinExpandedNumberOfRows","CodeSnippet","_ref","align","className","type","children","disabled","feedback","feedbackTimeout","onClick","ariaLabel","deprecatedAriaLabel","copyText","copyButtonDescription","light","showMoreText","showLessText","hideCopyButton","wrapText","maxCollapsedNumberOfRows","maxExpandedNumberOfRows","minCollapsedNumberOfRows","minExpandedNumberOfRows","rest","expandedCode","setExpandedCode","shouldShowMoreLessBtn","setShouldShowMoreLessBtn","current","uid","codeContentRef","codeContainerRef","innerCodeRef","hasLeftOverflow","setHasLeftOverflow","hasRightOverflow","setHasRightOverflow","getCodeRef","prefix","getCodeRefDimensions","clientWidth","codeClientWidth","scrollLeft","codeScrollLeft","scrollWidth","codeScrollWidth","horizontalOverflow","handleScroll","ref","onResize","height","getBoundingClientRect","handleCopyClick","evt","_ref2","_innerCodeRef$current","innerText","codeSnippetClasses","concat","expandCodeBtnText","createElement","id","containerStyle","styles","maxHeight","minHeight","Object","keys","length","style","role","undefined","tabIndex","onScroll","size","iconDescription","kind","name","propTypes","oneOf","string","node","bool","number","func","default"],"sources":["/Users/davidguan/Local Sites/e/app/public/wp-content/plugins/drhaiel/ls_uhcc_bot_fe/node_modules/@carbon/react/es/components/CodeSnippet/CodeSnippet.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { useState, useRef, useCallback, useEffect } from 'react';\nimport cx from 'classnames';\nimport useResizeObserver from 'use-resize-observer/polyfilled';\nimport { ChevronDown } from '@carbon/icons-react';\nimport Copy from '../Copy/Copy.js';\nimport Button from '../Button/Button.js';\nimport '../Button/Button.Skeleton.js';\nimport CopyButton from '../CopyButton/CopyButton.js';\nimport uniqueId from '../../tools/uniqueId.js';\nimport copy from 'copy-to-clipboard';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\nconst rowHeightInPixels = 16;\nconst defaultMaxCollapsedNumberOfRows = 15;\nconst defaultMaxExpandedNumberOfRows = 0;\nconst defaultMinCollapsedNumberOfRows = 3;\nconst defaultMinExpandedNumberOfRows = 16;\nfunction CodeSnippet(_ref) {\n  let {\n    align = 'bottom',\n    className,\n    type = 'single',\n    children,\n    disabled,\n    feedback,\n    feedbackTimeout,\n    onClick,\n    ['aria-label']: ariaLabel = 'Copy to clipboard',\n    ariaLabel: deprecatedAriaLabel,\n    copyText,\n    copyButtonDescription,\n    light,\n    showMoreText = 'Show more',\n    showLessText = 'Show less',\n    hideCopyButton,\n    wrapText = false,\n    maxCollapsedNumberOfRows = defaultMaxCollapsedNumberOfRows,\n    maxExpandedNumberOfRows = defaultMaxExpandedNumberOfRows,\n    minCollapsedNumberOfRows = defaultMinCollapsedNumberOfRows,\n    minExpandedNumberOfRows = defaultMinExpandedNumberOfRows,\n    ...rest\n  } = _ref;\n  const [expandedCode, setExpandedCode] = useState(false);\n  const [shouldShowMoreLessBtn, setShouldShowMoreLessBtn] = useState(false);\n  const {\n    current: uid\n  } = useRef(uniqueId());\n  const codeContentRef = useRef(null);\n  const codeContainerRef = useRef(null);\n  const innerCodeRef = useRef(null);\n  const [hasLeftOverflow, setHasLeftOverflow] = useState(false);\n  const [hasRightOverflow, setHasRightOverflow] = useState(false);\n  const getCodeRef = useCallback(() => {\n    if (type === 'single') {\n      return codeContainerRef;\n    }\n    if (type === 'multi') {\n      return codeContentRef;\n    } else {\n      return innerCodeRef;\n    }\n  }, [type]);\n  const prefix = usePrefix();\n  const getCodeRefDimensions = useCallback(() => {\n    const {\n      clientWidth: codeClientWidth = 0,\n      scrollLeft: codeScrollLeft = 0,\n      scrollWidth: codeScrollWidth = 0\n    } = getCodeRef().current || {};\n    return {\n      horizontalOverflow: codeScrollWidth > codeClientWidth,\n      codeClientWidth,\n      codeScrollWidth,\n      codeScrollLeft\n    };\n  }, [getCodeRef]);\n  const handleScroll = useCallback(() => {\n    if (type === 'inline' || type === 'single' && !codeContainerRef?.current || type === 'multi' && !codeContentRef?.current) {\n      return;\n    }\n    const {\n      horizontalOverflow,\n      codeClientWidth,\n      codeScrollWidth,\n      codeScrollLeft\n    } = getCodeRefDimensions();\n    setHasLeftOverflow(horizontalOverflow && !!codeScrollLeft);\n    setHasRightOverflow(horizontalOverflow && codeScrollLeft + codeClientWidth !== codeScrollWidth);\n  }, [type, getCodeRefDimensions]);\n  useResizeObserver({\n    ref: getCodeRef(),\n    onResize: () => {\n      if (codeContentRef?.current && type === 'multi') {\n        const {\n          height\n        } = codeContentRef.current.getBoundingClientRect();\n        if (maxCollapsedNumberOfRows > 0 && (maxExpandedNumberOfRows <= 0 || maxExpandedNumberOfRows > maxCollapsedNumberOfRows) && height > maxCollapsedNumberOfRows * rowHeightInPixels) {\n          setShouldShowMoreLessBtn(true);\n        } else {\n          setShouldShowMoreLessBtn(false);\n        }\n        if (expandedCode && minExpandedNumberOfRows > 0 && height <= minExpandedNumberOfRows * rowHeightInPixels) {\n          setExpandedCode(false);\n        }\n      }\n      if (codeContentRef?.current && type === 'multi' || codeContainerRef?.current && type === 'single') {\n        handleScroll();\n      }\n    }\n  });\n  useEffect(() => {\n    handleScroll();\n  }, [handleScroll]);\n  const handleCopyClick = evt => {\n    if (copyText || innerCodeRef?.current) {\n      copy(copyText ?? innerCodeRef?.current?.innerText ?? '');\n    }\n    if (onClick) {\n      onClick(evt);\n    }\n  };\n  const codeSnippetClasses = cx(className, `${prefix}--snippet`, {\n    [`${prefix}--snippet--${type}`]: type,\n    [`${prefix}--snippet--disabled`]: type !== 'inline' && disabled,\n    [`${prefix}--snippet--expand`]: expandedCode,\n    [`${prefix}--snippet--light`]: light,\n    [`${prefix}--snippet--no-copy`]: hideCopyButton,\n    [`${prefix}--snippet--wraptext`]: wrapText,\n    [`${prefix}--snippet--has-right-overflow`]: type == 'multi' && hasRightOverflow\n  });\n  const expandCodeBtnText = expandedCode ? showLessText : showMoreText;\n  if (type === 'inline') {\n    if (hideCopyButton) {\n      return /*#__PURE__*/React__default.createElement(\"span\", {\n        className: codeSnippetClasses\n      }, /*#__PURE__*/React__default.createElement(\"code\", {\n        id: uid,\n        ref: innerCodeRef\n      }, children));\n    }\n    return /*#__PURE__*/React__default.createElement(Copy, _extends({}, rest, {\n      align: align,\n      onClick: handleCopyClick,\n      \"aria-label\": deprecatedAriaLabel || ariaLabel,\n      \"aria-describedby\": uid,\n      className: codeSnippetClasses,\n      feedback: feedback,\n      feedbackTimeout: feedbackTimeout\n    }), /*#__PURE__*/React__default.createElement(\"code\", {\n      id: uid,\n      ref: innerCodeRef\n    }, children));\n  }\n  const containerStyle = {};\n  if (type === 'multi') {\n    const styles = {};\n    if (expandedCode) {\n      if (maxExpandedNumberOfRows > 0) {\n        styles.maxHeight = maxExpandedNumberOfRows * rowHeightInPixels;\n      }\n      if (minExpandedNumberOfRows > 0) {\n        styles.minHeight = minExpandedNumberOfRows * rowHeightInPixels;\n      }\n    } else {\n      if (maxCollapsedNumberOfRows > 0) {\n        styles.maxHeight = maxCollapsedNumberOfRows * rowHeightInPixels;\n      }\n      if (minCollapsedNumberOfRows > 0) {\n        styles.minHeight = minCollapsedNumberOfRows * rowHeightInPixels;\n      }\n    }\n    if (Object.keys(styles).length) {\n      containerStyle.style = styles;\n    }\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({}, rest, {\n    className: codeSnippetClasses\n  }), /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    ref: codeContainerRef,\n    role: type === 'single' || type === 'multi' ? 'textbox' : undefined,\n    tabIndex: (type === 'single' || type === 'multi') && !disabled ? 0 : undefined,\n    className: `${prefix}--snippet-container`,\n    \"aria-label\": deprecatedAriaLabel || ariaLabel || 'code-snippet',\n    \"aria-readonly\": type === 'single' || type === 'multi' ? true : undefined,\n    \"aria-multiline\": type === 'multi' ? true : undefined,\n    onScroll: type === 'single' && handleScroll || undefined\n  }, containerStyle), /*#__PURE__*/React__default.createElement(\"pre\", {\n    ref: codeContentRef,\n    onScroll: type === 'multi' && handleScroll || undefined\n  }, /*#__PURE__*/React__default.createElement(\"code\", {\n    ref: innerCodeRef\n  }, children))), hasLeftOverflow && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--snippet__overflow-indicator--left`\n  }), hasRightOverflow && type !== 'multi' && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--snippet__overflow-indicator--right`\n  }), !hideCopyButton && /*#__PURE__*/React__default.createElement(CopyButton, {\n    align: align,\n    size: type === 'multi' ? 'sm' : 'md',\n    disabled: disabled,\n    onClick: handleCopyClick,\n    feedback: feedback,\n    feedbackTimeout: feedbackTimeout,\n    iconDescription: copyButtonDescription\n  }), shouldShowMoreLessBtn && /*#__PURE__*/React__default.createElement(Button, {\n    kind: \"ghost\",\n    size: \"sm\",\n    className: `${prefix}--snippet-btn--expand`,\n    disabled: disabled,\n    onClick: () => setExpandedCode(!expandedCode)\n  }, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: `${prefix}--snippet-btn--text`\n  }, expandCodeBtnText), /*#__PURE__*/React__default.createElement(ChevronDown, {\n    className: `${prefix}--icon-chevron--down ${prefix}--snippet__icon`,\n    name: \"chevron--down\",\n    role: \"img\"\n  })));\n}\nCodeSnippet.propTypes = {\n  /**\n   * Specify how the trigger should align with the tooltip\n   */\n  align: PropTypes.oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'right']),\n  /**\n   * Specify a label to be read by screen readers on the containing textbox\n   * node\n   */\n  ['aria-label']: PropTypes.string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Specify a label to be read by screen readers on the containing textbox\n   * node\n   */\n  ariaLabel: deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * Provide the content of your CodeSnippet as a node or string\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the description for the Copy Button\n   */\n  copyButtonDescription: PropTypes.string,\n  /**\n   * Optional text to copy. If not specified, the `children` node's `innerText`\n   * will be used as the copy value.\n   */\n  copyText: PropTypes.string,\n  /**\n   * Specify whether or not the CodeSnippet should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify the string displayed when the snippet is copied\n   */\n  feedback: PropTypes.string,\n  /**\n   * Specify the time it takes for the feedback message to timeout\n   */\n  feedbackTimeout: PropTypes.number,\n  /**\n   * Specify whether or not a copy button should be used/rendered.\n   */\n  hideCopyButton: PropTypes.bool,\n  /**\n   * Specify whether you are using the light variant of the Code Snippet,\n   * typically used for inline snippet to display an alternate color\n   */\n\n  light: deprecate(PropTypes.bool, 'The `light` prop for `CodeSnippet` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * Specify the maximum number of rows to be shown when in collapsed view\n   */\n  maxCollapsedNumberOfRows: PropTypes.number,\n  /**\n   * Specify the maximum number of rows to be shown when in expanded view\n   */\n  maxExpandedNumberOfRows: PropTypes.number,\n  /**\n   * Specify the minimum number of rows to be shown when in collapsed view\n   */\n  minCollapsedNumberOfRows: PropTypes.number,\n  /**\n   * Specify the minimum number of rows to be shown when in expanded view\n   */\n  minExpandedNumberOfRows: PropTypes.number,\n  /**\n   * An optional handler to listen to the `onClick` even fired by the Copy\n   * Button\n   */\n  onClick: PropTypes.func,\n  /**\n   * Specify a string that is displayed when the Code Snippet has been\n   * interacted with to show more lines\n   */\n  showLessText: PropTypes.string,\n  /**\n   * Specify a string that is displayed when the Code Snippet text is more\n   * than 15 lines\n   */\n  showMoreText: PropTypes.string,\n  /**\n   * Provide the type of Code Snippet\n   */\n  type: PropTypes.oneOf(['single', 'inline', 'multi']),\n  /**\n   * Specify whether or not to wrap the text.\n   */\n  wrapText: PropTypes.bool\n};\n\nexport { CodeSnippet as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}