{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { useState, useContext, useEffect } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { ViewOff, View } from '@carbon/icons-react';\nimport { useNormalizedInputProps } from '../../internal/useNormalizedInputProps.js';\nimport { textInputProps } from './util.js';\nimport '../FluidForm/FluidForm.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\nimport '../Tooltip/DefinitionTooltip.js';\nimport { Tooltip } from '../Tooltip/Tooltip.js';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nconst PasswordInput = /*#__PURE__*/React__default.forwardRef(function PasswordInput(_ref, ref) {\n  let {\n    className,\n    disabled = false,\n    helperText,\n    hideLabel,\n    hidePasswordLabel = 'Hide password',\n    id,\n    inline,\n    invalid = false,\n    invalidText,\n    labelText,\n    light,\n    onChange = () => {},\n    onClick = () => {},\n    onTogglePasswordVisibility,\n    placeholder,\n    readOnly,\n    size = 'md',\n    showPasswordLabel = 'Show password',\n    tooltipPosition = 'bottom',\n    tooltipAlignment = 'end',\n    type = 'password',\n    warn = false,\n    warnText,\n    ...rest\n  } = _ref;\n  const [inputType, setInputType] = useState(type);\n  const prefix = usePrefix();\n  const normalizedProps = useNormalizedInputProps({\n    id,\n    invalid,\n    invalidText,\n    warn,\n    warnText,\n    readOnly,\n    disabled\n  });\n  const {\n    isFluid\n  } = useContext(FormContext);\n  const handleTogglePasswordVisibility = event => {\n    setInputType(inputType === 'password' ? 'text' : 'password');\n    onTogglePasswordVisibility && onTogglePasswordVisibility(event);\n  };\n  const textInputClasses = cx(\"\".concat(prefix, \"--text-input\"), \"\".concat(prefix, \"--password-input\"), className, {\n    [\"\".concat(prefix, \"--text-input--light\")]: light,\n    [\"\".concat(prefix, \"--text-input--invalid\")]: normalizedProps.invalid,\n    [\"\".concat(prefix, \"--text-input--warning\")]: normalizedProps.warn,\n    [\"\".concat(prefix, \"--text-input--\").concat(size)]: size,\n    // TODO: V12 - Remove this class\n    [\"\".concat(prefix, \"--layout--size-\").concat(size)]: size\n  });\n  const sharedTextInputProps = {\n    id,\n    onChange: evt => {\n      if (!disabled) {\n        onChange(evt);\n      }\n    },\n    onClick: evt => {\n      if (!disabled) {\n        onClick(evt);\n      }\n    },\n    placeholder,\n    type: inputType,\n    className: textInputClasses,\n    ref,\n    ...rest\n  };\n  const inputWrapperClasses = cx(\"\".concat(prefix, \"--form-item\"), \"\".concat(prefix, \"--text-input-wrapper\"), \"\".concat(prefix, \"--password-input-wrapper\"), {\n    [\"\".concat(prefix, \"--text-input-wrapper--light\")]: light,\n    [\"\".concat(prefix, \"--text-input-wrapper--inline\")]: inline,\n    [\"\".concat(prefix, \"--text-input--fluid\")]: isFluid\n  });\n  const labelClasses = cx(\"\".concat(prefix, \"--label\"), {\n    [\"\".concat(prefix, \"--visually-hidden\")]: hideLabel,\n    [\"\".concat(prefix, \"--label--disabled\")]: disabled,\n    [\"\".concat(prefix, \"--label--inline\")]: inline,\n    [\"\".concat(prefix, \"--label--inline--\").concat(size)]: inline && !!size\n  });\n  const helperTextClasses = cx(\"\".concat(prefix, \"--form__helper-text\"), {\n    [\"\".concat(prefix, \"--form__helper-text--disabled\")]: disabled,\n    [\"\".concat(prefix, \"--form__helper-text--inline\")]: inline\n  });\n  const fieldOuterWrapperClasses = cx(\"\".concat(prefix, \"--text-input__field-outer-wrapper\"), {\n    [\"\".concat(prefix, \"--text-input__field-outer-wrapper--inline\")]: inline\n  });\n  const fieldWrapperClasses = cx(\"\".concat(prefix, \"--text-input__field-wrapper\"), {\n    [\"\".concat(prefix, \"--text-input__field-wrapper--warning\")]: normalizedProps.warn\n  });\n  const iconClasses = cx({\n    [\"\".concat(prefix, \"--text-input__invalid-icon\")]: normalizedProps.invalid || normalizedProps.warn,\n    [\"\".concat(prefix, \"--text-input__invalid-icon--warning\")]: normalizedProps.warn\n  });\n  const label = labelText ? /*#__PURE__*/React__default.createElement(\"label\", {\n    htmlFor: id,\n    className: labelClasses\n  }, labelText) : null;\n  const helper = helperText ? /*#__PURE__*/React__default.createElement(\"div\", {\n    id: normalizedProps.helperId,\n    className: helperTextClasses\n  }, helperText) : null;\n  const passwordIsVisible = inputType === 'text';\n  const passwordVisibilityIcon = passwordIsVisible ? /*#__PURE__*/React__default.createElement(ViewOff, {\n    className: \"\".concat(prefix, \"--icon-visibility-off\")\n  }) : /*#__PURE__*/React__default.createElement(View, {\n    className: \"\".concat(prefix, \"--icon-visibility-on\")\n  });\n  const passwordVisibilityToggleClasses = cx(\"\".concat(prefix, \"--text-input--password__visibility__toggle\"), \"\".concat(prefix, \"--btn\"), \"\".concat(prefix, \"--tooltip__trigger\"), \"\".concat(prefix, \"--tooltip--a11y\"), {\n    [\"\".concat(prefix, \"--tooltip--\").concat(tooltipPosition)]: tooltipPosition,\n    [\"\".concat(prefix, \"--tooltip--align-\").concat(tooltipAlignment)]: tooltipAlignment\n  });\n  let align = undefined;\n  if (tooltipPosition === 'top' || tooltipPosition === 'bottom') {\n    if (tooltipAlignment === 'center') {\n      align = tooltipPosition;\n    }\n    if (tooltipAlignment === 'end') {\n      align = \"\".concat(tooltipPosition, \"-end\");\n    }\n    if (tooltipAlignment === 'start') {\n      align = \"\".concat(tooltipPosition, \"-start\");\n    }\n  }\n  if (tooltipPosition === 'right' || tooltipPosition === 'left') {\n    align = tooltipPosition;\n  }\n  const input = /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"input\", _extends({}, textInputProps({\n    sharedTextInputProps,\n    invalid: normalizedProps.invalid,\n    invalidId: normalizedProps.invalidId,\n    warn: normalizedProps.warn,\n    warnId: normalizedProps.warnId,\n    hasHelper: Boolean(helperText && !isFluid && (inline || !inline && !normalizedProps.validation)),\n    helperId: normalizedProps.helperId\n  }), {\n    disabled: disabled,\n    \"data-toggle-password-visibility\": inputType === 'password'\n  })), isFluid && /*#__PURE__*/React__default.createElement(\"hr\", {\n    className: \"\".concat(prefix, \"--text-input__divider\")\n  }), /*#__PURE__*/React__default.createElement(Tooltip, {\n    align: align,\n    className: \"\".concat(prefix, \"--toggle-password-tooltip\"),\n    label: passwordIsVisible ? hidePasswordLabel : showPasswordLabel\n  }, /*#__PURE__*/React__default.createElement(\"button\", {\n    type: \"button\",\n    className: passwordVisibilityToggleClasses,\n    disabled: disabled,\n    onClick: handleTogglePasswordVisibility\n  }, passwordVisibilityIcon)));\n  useEffect(() => {\n    setInputType(type);\n  }, [type]);\n  const Icon = normalizedProps.icon;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: inputWrapperClasses\n  }, !inline ? label : /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--text-input__label-helper-wrapper\")\n  }, label, !isFluid && helper), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: fieldOuterWrapperClasses\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: fieldWrapperClasses,\n    \"data-invalid\": normalizedProps.invalid || null\n  }, Icon && /*#__PURE__*/React__default.createElement(Icon, {\n    className: iconClasses\n  }), input, isFluid && !inline && normalizedProps.validation), !isFluid && !inline && (normalizedProps.validation || helper)));\n});\nPasswordInput.displayName = 'PasswordInput';\nPasswordInput.propTypes = {\n  /**\n   * Provide a custom className that is applied directly to the underlying\n   * `<input>` node\n   */\n  className: PropTypes.string,\n  /**\n   * Optionally provide the default value of the `<input>`\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify whether the control is disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Provide text that is used alongside the control label for additional help\n   */\n  helperText: PropTypes.node,\n  /**\n   * Specify whether or not the underlying label is visually hidden\n   */\n  hideLabel: PropTypes.bool,\n  /**\n   * \"Hide password\" tooltip text on password visibility toggle\n   */\n  hidePasswordLabel: PropTypes.string,\n  /**\n   * Provide a unique identifier for the input field\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * `true` to use the inline version.\n   */\n  inline: PropTypes.bool,\n  /**\n   * Specify whether the control is currently invalid\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Provide the text that will be read by a screen reader when visiting this\n   * control\n   */\n  labelText: PropTypes.node.isRequired,\n  /**\n   * `true` to use the light version. For use on $ui-01 backgrounds only.\n   * Don't use this to make tile background color same as container background color.\n   */\n  light: deprecate(PropTypes.bool, 'The `light` prop for `PasswordInput` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * Optionally provide an `onChange` handler that is called whenever `<input>`\n   * is updated\n   */\n  onChange: PropTypes.func,\n  /**\n   * Optionally provide an `onClick` handler that is called whenever the\n   * `<input>` is clicked\n   */\n  onClick: PropTypes.func,\n  /**\n   * Callback function that is called whenever the toggle password visibility\n   * button is clicked\n   */\n  onTogglePasswordVisibility: PropTypes.func,\n  /**\n   * Specify the placeholder attribute for the `<input>`\n   */\n  placeholder: PropTypes.string,\n  /**\n   * \"Show password\" tooltip text on password visibility toggle\n   */\n  showPasswordLabel: PropTypes.string,\n  /**\n   * Specify the size of the Text Input. Supports `sm`, `md`, or `lg`.\n   */\n  size: PropTypes.oneOf(['sm', 'md', 'lg']),\n  /**\n   * Specify the alignment of the tooltip to the icon-only button.\n   * Can be one of: start, center, or end.\n   */\n  tooltipAlignment: PropTypes.oneOf(['start', 'center', 'end']),\n  /**\n   * Specify the direction of the tooltip for icon-only buttons.\n   * Can be either top, right, bottom, or left.\n   */\n  tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n  /**\n   * The input type, either password or text\n   */\n  type: PropTypes.oneOf(['password', 'text']),\n  /**\n   * Provide the current value of the `<input>`\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\nexport { PasswordInput as default };","map":{"version":3,"names":["extends","_extends","React__default","useState","useContext","useEffect","cx","PropTypes","ViewOff","View","useNormalizedInputProps","textInputProps","FormContext","Tooltip","deprecate","usePrefix","PasswordInput","forwardRef","_ref","ref","className","disabled","helperText","hideLabel","hidePasswordLabel","id","inline","invalid","invalidText","labelText","light","onChange","onClick","onTogglePasswordVisibility","placeholder","readOnly","size","showPasswordLabel","tooltipPosition","tooltipAlignment","type","warn","warnText","rest","inputType","setInputType","prefix","normalizedProps","isFluid","handleTogglePasswordVisibility","event","textInputClasses","concat","sharedTextInputProps","evt","inputWrapperClasses","labelClasses","helperTextClasses","fieldOuterWrapperClasses","fieldWrapperClasses","iconClasses","label","createElement","htmlFor","helper","helperId","passwordIsVisible","passwordVisibilityIcon","passwordVisibilityToggleClasses","align","undefined","input","Fragment","invalidId","warnId","hasHelper","Boolean","validation","Icon","icon","displayName","propTypes","string","defaultValue","oneOfType","number","bool","node","isRequired","func","oneOf","value","default"],"sources":["/Users/davidguan/Local Sites/e/app/public/wp-content/plugins/drhaiel/ls_uhcc_bot_fe/node_modules/@carbon/react/es/components/TextInput/PasswordInput.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { useState, useContext, useEffect } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { ViewOff, View } from '@carbon/icons-react';\nimport { useNormalizedInputProps } from '../../internal/useNormalizedInputProps.js';\nimport { textInputProps } from './util.js';\nimport '../FluidForm/FluidForm.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\nimport '../Tooltip/DefinitionTooltip.js';\nimport { Tooltip } from '../Tooltip/Tooltip.js';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\nconst PasswordInput = /*#__PURE__*/React__default.forwardRef(function PasswordInput(_ref, ref) {\n  let {\n    className,\n    disabled = false,\n    helperText,\n    hideLabel,\n    hidePasswordLabel = 'Hide password',\n    id,\n    inline,\n    invalid = false,\n    invalidText,\n    labelText,\n    light,\n    onChange = () => {},\n    onClick = () => {},\n    onTogglePasswordVisibility,\n    placeholder,\n    readOnly,\n    size = 'md',\n    showPasswordLabel = 'Show password',\n    tooltipPosition = 'bottom',\n    tooltipAlignment = 'end',\n    type = 'password',\n    warn = false,\n    warnText,\n    ...rest\n  } = _ref;\n  const [inputType, setInputType] = useState(type);\n  const prefix = usePrefix();\n  const normalizedProps = useNormalizedInputProps({\n    id,\n    invalid,\n    invalidText,\n    warn,\n    warnText,\n    readOnly,\n    disabled\n  });\n  const {\n    isFluid\n  } = useContext(FormContext);\n  const handleTogglePasswordVisibility = event => {\n    setInputType(inputType === 'password' ? 'text' : 'password');\n    onTogglePasswordVisibility && onTogglePasswordVisibility(event);\n  };\n  const textInputClasses = cx(`${prefix}--text-input`, `${prefix}--password-input`, className, {\n    [`${prefix}--text-input--light`]: light,\n    [`${prefix}--text-input--invalid`]: normalizedProps.invalid,\n    [`${prefix}--text-input--warning`]: normalizedProps.warn,\n    [`${prefix}--text-input--${size}`]: size,\n    // TODO: V12 - Remove this class\n    [`${prefix}--layout--size-${size}`]: size\n  });\n  const sharedTextInputProps = {\n    id,\n    onChange: evt => {\n      if (!disabled) {\n        onChange(evt);\n      }\n    },\n    onClick: evt => {\n      if (!disabled) {\n        onClick(evt);\n      }\n    },\n    placeholder,\n    type: inputType,\n    className: textInputClasses,\n    ref,\n    ...rest\n  };\n  const inputWrapperClasses = cx(`${prefix}--form-item`, `${prefix}--text-input-wrapper`, `${prefix}--password-input-wrapper`, {\n    [`${prefix}--text-input-wrapper--light`]: light,\n    [`${prefix}--text-input-wrapper--inline`]: inline,\n    [`${prefix}--text-input--fluid`]: isFluid\n  });\n  const labelClasses = cx(`${prefix}--label`, {\n    [`${prefix}--visually-hidden`]: hideLabel,\n    [`${prefix}--label--disabled`]: disabled,\n    [`${prefix}--label--inline`]: inline,\n    [`${prefix}--label--inline--${size}`]: inline && !!size\n  });\n  const helperTextClasses = cx(`${prefix}--form__helper-text`, {\n    [`${prefix}--form__helper-text--disabled`]: disabled,\n    [`${prefix}--form__helper-text--inline`]: inline\n  });\n  const fieldOuterWrapperClasses = cx(`${prefix}--text-input__field-outer-wrapper`, {\n    [`${prefix}--text-input__field-outer-wrapper--inline`]: inline\n  });\n  const fieldWrapperClasses = cx(`${prefix}--text-input__field-wrapper`, {\n    [`${prefix}--text-input__field-wrapper--warning`]: normalizedProps.warn\n  });\n  const iconClasses = cx({\n    [`${prefix}--text-input__invalid-icon`]: normalizedProps.invalid || normalizedProps.warn,\n    [`${prefix}--text-input__invalid-icon--warning`]: normalizedProps.warn\n  });\n  const label = labelText ? /*#__PURE__*/React__default.createElement(\"label\", {\n    htmlFor: id,\n    className: labelClasses\n  }, labelText) : null;\n  const helper = helperText ? /*#__PURE__*/React__default.createElement(\"div\", {\n    id: normalizedProps.helperId,\n    className: helperTextClasses\n  }, helperText) : null;\n  const passwordIsVisible = inputType === 'text';\n  const passwordVisibilityIcon = passwordIsVisible ? /*#__PURE__*/React__default.createElement(ViewOff, {\n    className: `${prefix}--icon-visibility-off`\n  }) : /*#__PURE__*/React__default.createElement(View, {\n    className: `${prefix}--icon-visibility-on`\n  });\n  const passwordVisibilityToggleClasses = cx(`${prefix}--text-input--password__visibility__toggle`, `${prefix}--btn`, `${prefix}--tooltip__trigger`, `${prefix}--tooltip--a11y`, {\n    [`${prefix}--tooltip--${tooltipPosition}`]: tooltipPosition,\n    [`${prefix}--tooltip--align-${tooltipAlignment}`]: tooltipAlignment\n  });\n  let align = undefined;\n  if (tooltipPosition === 'top' || tooltipPosition === 'bottom') {\n    if (tooltipAlignment === 'center') {\n      align = tooltipPosition;\n    }\n    if (tooltipAlignment === 'end') {\n      align = `${tooltipPosition}-end`;\n    }\n    if (tooltipAlignment === 'start') {\n      align = `${tooltipPosition}-start`;\n    }\n  }\n  if (tooltipPosition === 'right' || tooltipPosition === 'left') {\n    align = tooltipPosition;\n  }\n  const input = /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"input\", _extends({}, textInputProps({\n    sharedTextInputProps,\n    invalid: normalizedProps.invalid,\n    invalidId: normalizedProps.invalidId,\n    warn: normalizedProps.warn,\n    warnId: normalizedProps.warnId,\n    hasHelper: Boolean(helperText && !isFluid && (inline || !inline && !normalizedProps.validation)),\n    helperId: normalizedProps.helperId\n  }), {\n    disabled: disabled,\n    \"data-toggle-password-visibility\": inputType === 'password'\n  })), isFluid && /*#__PURE__*/React__default.createElement(\"hr\", {\n    className: `${prefix}--text-input__divider`\n  }), /*#__PURE__*/React__default.createElement(Tooltip, {\n    align: align,\n    className: `${prefix}--toggle-password-tooltip`,\n    label: passwordIsVisible ? hidePasswordLabel : showPasswordLabel\n  }, /*#__PURE__*/React__default.createElement(\"button\", {\n    type: \"button\",\n    className: passwordVisibilityToggleClasses,\n    disabled: disabled,\n    onClick: handleTogglePasswordVisibility\n  }, passwordVisibilityIcon)));\n  useEffect(() => {\n    setInputType(type);\n  }, [type]);\n  const Icon = normalizedProps.icon;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: inputWrapperClasses\n  }, !inline ? label : /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--text-input__label-helper-wrapper`\n  }, label, !isFluid && helper), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: fieldOuterWrapperClasses\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: fieldWrapperClasses,\n    \"data-invalid\": normalizedProps.invalid || null\n  }, Icon && /*#__PURE__*/React__default.createElement(Icon, {\n    className: iconClasses\n  }), input, isFluid && !inline && normalizedProps.validation), !isFluid && !inline && (normalizedProps.validation || helper)));\n});\nPasswordInput.displayName = 'PasswordInput';\nPasswordInput.propTypes = {\n  /**\n   * Provide a custom className that is applied directly to the underlying\n   * `<input>` node\n   */\n  className: PropTypes.string,\n  /**\n   * Optionally provide the default value of the `<input>`\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify whether the control is disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Provide text that is used alongside the control label for additional help\n   */\n  helperText: PropTypes.node,\n  /**\n   * Specify whether or not the underlying label is visually hidden\n   */\n  hideLabel: PropTypes.bool,\n  /**\n   * \"Hide password\" tooltip text on password visibility toggle\n   */\n  hidePasswordLabel: PropTypes.string,\n  /**\n   * Provide a unique identifier for the input field\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * `true` to use the inline version.\n   */\n  inline: PropTypes.bool,\n  /**\n   * Specify whether the control is currently invalid\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Provide the text that will be read by a screen reader when visiting this\n   * control\n   */\n  labelText: PropTypes.node.isRequired,\n  /**\n   * `true` to use the light version. For use on $ui-01 backgrounds only.\n   * Don't use this to make tile background color same as container background color.\n   */\n  light: deprecate(PropTypes.bool, 'The `light` prop for `PasswordInput` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * Optionally provide an `onChange` handler that is called whenever `<input>`\n   * is updated\n   */\n  onChange: PropTypes.func,\n  /**\n   * Optionally provide an `onClick` handler that is called whenever the\n   * `<input>` is clicked\n   */\n  onClick: PropTypes.func,\n  /**\n   * Callback function that is called whenever the toggle password visibility\n   * button is clicked\n   */\n  onTogglePasswordVisibility: PropTypes.func,\n  /**\n   * Specify the placeholder attribute for the `<input>`\n   */\n  placeholder: PropTypes.string,\n  /**\n   * \"Show password\" tooltip text on password visibility toggle\n   */\n  showPasswordLabel: PropTypes.string,\n  /**\n   * Specify the size of the Text Input. Supports `sm`, `md`, or `lg`.\n   */\n  size: PropTypes.oneOf(['sm', 'md', 'lg']),\n  /**\n   * Specify the alignment of the tooltip to the icon-only button.\n   * Can be one of: start, center, or end.\n   */\n  tooltipAlignment: PropTypes.oneOf(['start', 'center', 'end']),\n  /**\n   * Specify the direction of the tooltip for icon-only buttons.\n   * Can be either top, right, bottom, or left.\n   */\n  tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n  /**\n   * The input type, either password or text\n   */\n  type: PropTypes.oneOf(['password', 'text']),\n  /**\n   * Provide the current value of the `<input>`\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\n\nexport { PasswordInput as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}