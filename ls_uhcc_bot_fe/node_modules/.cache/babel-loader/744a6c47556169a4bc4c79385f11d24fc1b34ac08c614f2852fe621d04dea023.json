{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { useContext, useRef, useState, useEffect } from 'react';\nimport cx from 'classnames';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { WarningFilled, WarningAltFilled } from '@carbon/icons-react';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport '../FluidForm/FluidForm.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\nimport { useAnnouncer } from '../../internal/useAnnouncer.js';\nimport useIsomorphicEffect from '../../internal/useIsomorphicEffect.js';\nimport { useMergedRefs } from '../../internal/useMergedRefs.js';\nimport { useId } from '../../internal/useId.js';\nimport { noopFn } from '../../internal/noopFn.js';\nimport '../Text/index.js';\nimport { Text } from '../Text/Text.js';\nconst TextArea = /*#__PURE__*/React__default.forwardRef((props, forwardRef) => {\n  var _slug$type;\n  const {\n    className,\n    disabled = false,\n    id,\n    labelText,\n    hideLabel,\n    onChange = noopFn,\n    onClick = noopFn,\n    onKeyDown = noopFn,\n    invalid = false,\n    invalidText = '',\n    helperText = '',\n    light,\n    placeholder = '',\n    enableCounter = false,\n    maxCount = undefined,\n    counterMode = 'character',\n    warn = false,\n    warnText = '',\n    rows = 4,\n    slug,\n    ...other\n  } = props;\n  const prefix = usePrefix();\n  const {\n    isFluid\n  } = useContext(FormContext);\n  const {\n    defaultValue,\n    value\n  } = other;\n  const textAreaInstanceId = useId();\n  const textareaRef = useRef(null);\n  const ref = useMergedRefs([forwardRef, textareaRef]);\n  function getInitialTextCount() {\n    var _textareaRef$current;\n    const targetValue = defaultValue || value || ((_textareaRef$current = textareaRef.current) === null || _textareaRef$current === void 0 ? void 0 : _textareaRef$current.value) || '';\n    const strValue = targetValue.toString();\n    if (counterMode === 'character') {\n      return strValue.length;\n    } else {\n      var _strValue$match;\n      return ((_strValue$match = strValue.match(/\\w+/g)) === null || _strValue$match === void 0 ? void 0 : _strValue$match.length) || 0;\n    }\n  }\n  const [textCount, setTextCount] = useState(getInitialTextCount());\n  useEffect(() => {\n    setTextCount(getInitialTextCount());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value, defaultValue, counterMode]);\n  useIsomorphicEffect(() => {\n    if (other.cols && textareaRef.current) {\n      textareaRef.current.style.width = '';\n      textareaRef.current.style.resize = 'none';\n    } else if (textareaRef.current) {\n      textareaRef.current.style.width = \"100%\";\n    }\n  }, [other.cols]);\n  const textareaProps = {\n    id,\n    onKeyDown: evt => {\n      if (!disabled && enableCounter && counterMode === 'word') {\n        const key = evt.which;\n        if (maxCount && textCount >= maxCount && key === 32 || maxCount && textCount >= maxCount && key === 13) {\n          evt.preventDefault();\n        }\n      }\n      if (!disabled && onKeyDown) {\n        onKeyDown(evt);\n      }\n    },\n    onPaste: evt => {\n      if (!disabled) {\n        if (counterMode === 'word' && enableCounter && typeof maxCount !== 'undefined' && textareaRef.current !== null) {\n          const existingWords = textareaRef.current.value.match(/\\w+/g) || [];\n          const pastedWords = evt.clipboardData.getData('Text').match(/\\w+/g) || [];\n          const totalWords = existingWords.length + pastedWords.length;\n          if (totalWords > maxCount) {\n            evt.preventDefault();\n            const allowedWords = existingWords.concat(pastedWords).slice(0, maxCount);\n            setTimeout(() => {\n              setTextCount(maxCount);\n            }, 0);\n            textareaRef.current.value = allowedWords.join(' ');\n          }\n        }\n      }\n    },\n    onChange: evt => {\n      if (!disabled) {\n        if (counterMode == 'character') {\n          var _evt$persist;\n          evt === null || evt === void 0 || (_evt$persist = evt.persist) === null || _evt$persist === void 0 || _evt$persist.call(evt);\n          // delay textCount assignation to give the textarea element value time to catch up if is a controlled input\n          setTimeout(() => {\n            var _evt$target;\n            setTextCount((_evt$target = evt.target) === null || _evt$target === void 0 || (_evt$target = _evt$target.value) === null || _evt$target === void 0 ? void 0 : _evt$target.length);\n          }, 0);\n        } else if (counterMode == 'word') {\n          if (!evt.target.value) {\n            setTimeout(() => {\n              setTextCount(0);\n            }, 0);\n            return;\n          }\n          if (enableCounter && typeof maxCount !== 'undefined' && textareaRef.current !== null) {\n            var _evt$target2;\n            const matchedWords = (_evt$target2 = evt.target) === null || _evt$target2 === void 0 || (_evt$target2 = _evt$target2.value) === null || _evt$target2 === void 0 ? void 0 : _evt$target2.match(/\\w+/g);\n            if (matchedWords && matchedWords.length <= maxCount) {\n              textareaRef.current.removeAttribute('maxLength');\n              setTimeout(() => {\n                setTextCount(matchedWords.length);\n              }, 0);\n            } else if (matchedWords && matchedWords.length > maxCount) {\n              setTimeout(() => {\n                setTextCount(matchedWords.length);\n              }, 0);\n            }\n          }\n        }\n        if (onChange) {\n          onChange(evt);\n        }\n      }\n    },\n    onClick: evt => {\n      if (!disabled && onClick) {\n        onClick(evt);\n      }\n    }\n  };\n  const formItemClasses = cx(\"\".concat(prefix, \"--form-item\"), className);\n  const textAreaWrapperClasses = cx(\"\".concat(prefix, \"--text-area__wrapper\"), {\n    [\"\".concat(prefix, \"--text-area__wrapper--cols\")]: other.cols,\n    [\"\".concat(prefix, \"--text-area__wrapper--readonly\")]: other.readOnly,\n    [\"\".concat(prefix, \"--text-area__wrapper--warn\")]: warn,\n    [\"\".concat(prefix, \"--text-area__wrapper--slug\")]: slug\n  });\n  const labelClasses = cx(\"\".concat(prefix, \"--label\"), {\n    [\"\".concat(prefix, \"--visually-hidden\")]: hideLabel && !isFluid,\n    [\"\".concat(prefix, \"--label--disabled\")]: disabled\n  });\n  const textareaClasses = cx(\"\".concat(prefix, \"--text-area\"), {\n    [\"\".concat(prefix, \"--text-area--light\")]: light,\n    [\"\".concat(prefix, \"--text-area--invalid\")]: invalid,\n    [\"\".concat(prefix, \"--text-area--warn\")]: warn\n  });\n  const counterClasses = cx(\"\".concat(prefix, \"--label\"), {\n    [\"\".concat(prefix, \"--label--disabled\")]: disabled\n  });\n  const helperTextClasses = cx(\"\".concat(prefix, \"--form__helper-text\"), {\n    [\"\".concat(prefix, \"--form__helper-text--disabled\")]: disabled\n  });\n  const label = labelText ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"label\",\n    htmlFor: id,\n    className: labelClasses\n  }, labelText) : null;\n  const counter = enableCounter && maxCount && (counterMode === 'character' || counterMode === 'word') ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: counterClasses\n  }, \"\".concat(textCount, \"/\").concat(maxCount)) : null;\n  const helperId = !helperText ? undefined : \"text-area-helper-text-\".concat(textAreaInstanceId);\n  const helper = helperText ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    id: helperId,\n    className: helperTextClasses\n  }, helperText) : null;\n  const errorId = id + '-error-msg';\n  const error = invalid ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    role: \"alert\",\n    className: \"\".concat(prefix, \"--form-requirement\"),\n    id: errorId\n  }, invalidText, isFluid && /*#__PURE__*/React__default.createElement(WarningFilled, {\n    className: \"\".concat(prefix, \"--text-area__invalid-icon\")\n  })) : null;\n  const warning = warn ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    role: \"alert\",\n    className: \"\".concat(prefix, \"--form-requirement\")\n  }, warnText, isFluid && /*#__PURE__*/React__default.createElement(WarningAltFilled, {\n    className: \"\".concat(prefix, \"--text-area__invalid-icon \").concat(prefix, \"--text-area__invalid-icon--warning\")\n  })) : null;\n  let ariaDescribedBy;\n  if (invalid) {\n    ariaDescribedBy = errorId;\n  } else if (!invalid && !warn && !isFluid && helperText) {\n    ariaDescribedBy = helperId;\n  }\n  if (enableCounter) {\n    // handle different counter mode\n    if (counterMode == 'character') {\n      textareaProps.maxLength = maxCount;\n    }\n  }\n  const announcerRef = useRef(null);\n  const [prevAnnouncement, setPrevAnnouncement] = useState('');\n  const ariaAnnouncement = useAnnouncer(textCount, maxCount, counterMode === 'word' ? 'words' : undefined);\n  useEffect(() => {\n    if (ariaAnnouncement && ariaAnnouncement !== prevAnnouncement) {\n      const announcer = announcerRef.current;\n      if (announcer) {\n        // Clear the content first\n        announcer.textContent = '';\n\n        // Set the new content after a small delay\n        const timeoutId = setTimeout(() => {\n          if (announcer) {\n            announcer.textContent = ariaAnnouncement;\n            setPrevAnnouncement(ariaAnnouncement);\n          }\n        }, counterMode === 'word' ? 2000 : 1000);\n\n        //clear the timeout\n        return () => {\n          if (timeoutId) {\n            clearTimeout(timeoutId);\n          }\n        };\n      }\n    }\n  }, [ariaAnnouncement, prevAnnouncement, counterMode]);\n  const input = /*#__PURE__*/React__default.createElement(\"textarea\", _extends({}, other, textareaProps, {\n    placeholder: placeholder,\n    \"aria-readonly\": other.readOnly ? true : false,\n    className: textareaClasses,\n    \"aria-invalid\": invalid,\n    \"aria-describedby\": ariaDescribedBy,\n    disabled: disabled,\n    rows: rows,\n    readOnly: other.readOnly,\n    ref: ref\n  }));\n\n  // Slug is always size `mini`\n  let normalizedSlug;\n  if (slug && ((_slug$type = slug['type']) === null || _slug$type === void 0 ? void 0 : _slug$type.displayName) === 'Slug') {\n    normalizedSlug = /*#__PURE__*/React__default.cloneElement(slug, {\n      size: 'mini'\n    });\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: formItemClasses\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--text-area__label-wrapper\")\n  }, label, counter), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: textAreaWrapperClasses,\n    \"data-invalid\": invalid || null\n  }, invalid && !isFluid && /*#__PURE__*/React__default.createElement(WarningFilled, {\n    className: \"\".concat(prefix, \"--text-area__invalid-icon\")\n  }), warn && !invalid && !isFluid && /*#__PURE__*/React__default.createElement(WarningAltFilled, {\n    className: \"\".concat(prefix, \"--text-area__invalid-icon \").concat(prefix, \"--text-area__invalid-icon--warning\")\n  }), input, normalizedSlug, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--text-area__counter-alert\"),\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\",\n    ref: announcerRef\n  }, ariaAnnouncement), isFluid && /*#__PURE__*/React__default.createElement(\"hr\", {\n    className: \"\".concat(prefix, \"--text-area__divider\")\n  }), isFluid && invalid ? error : null, isFluid && warn && !invalid ? warning : null), !invalid && !warn && !isFluid ? helper : null, invalid && !isFluid ? error : null, warn && !invalid && !isFluid ? warning : null);\n});\nTextArea.displayName = 'TextArea';\nTextArea.propTypes = {\n  /**\n   * Provide a custom className that is applied directly to the underlying\n   * `<textarea>` node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the `cols` attribute for the underlying `<textarea>` node\n   */\n  cols: PropTypes.number,\n  /**\n   * Specify the method used for calculating the counter number\n   */\n  counterMode: PropTypes.oneOf(['character', 'word']),\n  /**\n   * Optionally provide the default value of the `<textarea>`\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify whether the control is disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify whether to display the counter\n   */\n  enableCounter: PropTypes.bool,\n  /**\n   * Provide text that is used alongside the control label for additional help\n   */\n  helperText: PropTypes.node,\n  /**\n   * Specify whether you want the underlying label to be visually hidden\n   */\n  hideLabel: PropTypes.bool,\n  /**\n   * Provide a unique identifier for the control\n   */\n  id: PropTypes.string,\n  /**\n   * Specify whether the control is currently invalid\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Provide the text that will be read by a screen reader when visiting this\n   * control\n   */\n  labelText: PropTypes.node.isRequired,\n  /**\n   * `true` to use the light version. For use on $ui-01 backgrounds only.\n   * Don't use this to make tile background color same as container background color.\n   */\n  light: deprecate(PropTypes.bool, 'The `light` prop for `TextArea` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * Max entity count allowed for the textarea. This is needed in order for enableCounter to display\n   */\n  maxCount: PropTypes.number,\n  /**\n   * Optionally provide an `onChange` handler that is called whenever `<textarea>`\n   * is updated\n   */\n  onChange: PropTypes.func,\n  /**\n   * Optionally provide an `onClick` handler that is called whenever the\n   * `<textarea>` is clicked\n   */\n  onClick: PropTypes.func,\n  /**\n   * Optionally provide an `onKeyDown` handler that is called whenever `<textarea>`\n   * is keyed\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Specify the placeholder attribute for the `<textarea>`\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Whether the textarea should be read-only\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Specify the rows attribute for the `<textarea>`\n   */\n  rows: PropTypes.number,\n  /**\n   * **Experimental**: Provide a `Slug` component to be rendered inside the `TextArea` component\n   */\n  slug: PropTypes.node,\n  /**\n   * Provide the current value of the `<textarea>`\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\nexport { TextArea as default };","map":{"version":3,"names":["extends","_extends","PropTypes","React__default","useContext","useRef","useState","useEffect","cx","deprecate","WarningFilled","WarningAltFilled","usePrefix","FormContext","useAnnouncer","useIsomorphicEffect","useMergedRefs","useId","noopFn","Text","TextArea","forwardRef","props","_slug$type","className","disabled","id","labelText","hideLabel","onChange","onClick","onKeyDown","invalid","invalidText","helperText","light","placeholder","enableCounter","maxCount","undefined","counterMode","warn","warnText","rows","slug","other","prefix","isFluid","defaultValue","value","textAreaInstanceId","textareaRef","ref","getInitialTextCount","_textareaRef$current","targetValue","current","strValue","toString","length","_strValue$match","match","textCount","setTextCount","cols","style","width","resize","textareaProps","evt","key","which","preventDefault","onPaste","existingWords","pastedWords","clipboardData","getData","totalWords","allowedWords","concat","slice","setTimeout","join","_evt$persist","persist","call","_evt$target","target","_evt$target2","matchedWords","removeAttribute","formItemClasses","textAreaWrapperClasses","readOnly","labelClasses","textareaClasses","counterClasses","helperTextClasses","label","createElement","as","htmlFor","counter","helperId","helper","errorId","error","role","warning","ariaDescribedBy","maxLength","announcerRef","prevAnnouncement","setPrevAnnouncement","ariaAnnouncement","announcer","textContent","timeoutId","clearTimeout","input","normalizedSlug","displayName","cloneElement","size","propTypes","string","number","oneOf","oneOfType","bool","node","isRequired","func","default"],"sources":["/Users/davidguan/Local Sites/e/app/public/wp-content/plugins/drhaiel/ls_uhcc_bot_fe/node_modules/@carbon/react/es/components/TextArea/TextArea.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { useContext, useRef, useState, useEffect } from 'react';\nimport cx from 'classnames';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { WarningFilled, WarningAltFilled } from '@carbon/icons-react';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport '../FluidForm/FluidForm.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\nimport { useAnnouncer } from '../../internal/useAnnouncer.js';\nimport useIsomorphicEffect from '../../internal/useIsomorphicEffect.js';\nimport { useMergedRefs } from '../../internal/useMergedRefs.js';\nimport { useId } from '../../internal/useId.js';\nimport { noopFn } from '../../internal/noopFn.js';\nimport '../Text/index.js';\nimport { Text } from '../Text/Text.js';\n\nconst TextArea = /*#__PURE__*/React__default.forwardRef((props, forwardRef) => {\n  const {\n    className,\n    disabled = false,\n    id,\n    labelText,\n    hideLabel,\n    onChange = noopFn,\n    onClick = noopFn,\n    onKeyDown = noopFn,\n    invalid = false,\n    invalidText = '',\n    helperText = '',\n    light,\n    placeholder = '',\n    enableCounter = false,\n    maxCount = undefined,\n    counterMode = 'character',\n    warn = false,\n    warnText = '',\n    rows = 4,\n    slug,\n    ...other\n  } = props;\n  const prefix = usePrefix();\n  const {\n    isFluid\n  } = useContext(FormContext);\n  const {\n    defaultValue,\n    value\n  } = other;\n  const textAreaInstanceId = useId();\n  const textareaRef = useRef(null);\n  const ref = useMergedRefs([forwardRef, textareaRef]);\n  function getInitialTextCount() {\n    const targetValue = defaultValue || value || textareaRef.current?.value || '';\n    const strValue = targetValue.toString();\n    if (counterMode === 'character') {\n      return strValue.length;\n    } else {\n      return strValue.match(/\\w+/g)?.length || 0;\n    }\n  }\n  const [textCount, setTextCount] = useState(getInitialTextCount());\n  useEffect(() => {\n    setTextCount(getInitialTextCount());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value, defaultValue, counterMode]);\n  useIsomorphicEffect(() => {\n    if (other.cols && textareaRef.current) {\n      textareaRef.current.style.width = '';\n      textareaRef.current.style.resize = 'none';\n    } else if (textareaRef.current) {\n      textareaRef.current.style.width = `100%`;\n    }\n  }, [other.cols]);\n  const textareaProps = {\n    id,\n    onKeyDown: evt => {\n      if (!disabled && enableCounter && counterMode === 'word') {\n        const key = evt.which;\n        if (maxCount && textCount >= maxCount && key === 32 || maxCount && textCount >= maxCount && key === 13) {\n          evt.preventDefault();\n        }\n      }\n      if (!disabled && onKeyDown) {\n        onKeyDown(evt);\n      }\n    },\n    onPaste: evt => {\n      if (!disabled) {\n        if (counterMode === 'word' && enableCounter && typeof maxCount !== 'undefined' && textareaRef.current !== null) {\n          const existingWords = textareaRef.current.value.match(/\\w+/g) || [];\n          const pastedWords = evt.clipboardData.getData('Text').match(/\\w+/g) || [];\n          const totalWords = existingWords.length + pastedWords.length;\n          if (totalWords > maxCount) {\n            evt.preventDefault();\n            const allowedWords = existingWords.concat(pastedWords).slice(0, maxCount);\n            setTimeout(() => {\n              setTextCount(maxCount);\n            }, 0);\n            textareaRef.current.value = allowedWords.join(' ');\n          }\n        }\n      }\n    },\n    onChange: evt => {\n      if (!disabled) {\n        if (counterMode == 'character') {\n          evt?.persist?.();\n          // delay textCount assignation to give the textarea element value time to catch up if is a controlled input\n          setTimeout(() => {\n            setTextCount(evt.target?.value?.length);\n          }, 0);\n        } else if (counterMode == 'word') {\n          if (!evt.target.value) {\n            setTimeout(() => {\n              setTextCount(0);\n            }, 0);\n            return;\n          }\n          if (enableCounter && typeof maxCount !== 'undefined' && textareaRef.current !== null) {\n            const matchedWords = evt.target?.value?.match(/\\w+/g);\n            if (matchedWords && matchedWords.length <= maxCount) {\n              textareaRef.current.removeAttribute('maxLength');\n              setTimeout(() => {\n                setTextCount(matchedWords.length);\n              }, 0);\n            } else if (matchedWords && matchedWords.length > maxCount) {\n              setTimeout(() => {\n                setTextCount(matchedWords.length);\n              }, 0);\n            }\n          }\n        }\n        if (onChange) {\n          onChange(evt);\n        }\n      }\n    },\n    onClick: evt => {\n      if (!disabled && onClick) {\n        onClick(evt);\n      }\n    }\n  };\n  const formItemClasses = cx(`${prefix}--form-item`, className);\n  const textAreaWrapperClasses = cx(`${prefix}--text-area__wrapper`, {\n    [`${prefix}--text-area__wrapper--cols`]: other.cols,\n    [`${prefix}--text-area__wrapper--readonly`]: other.readOnly,\n    [`${prefix}--text-area__wrapper--warn`]: warn,\n    [`${prefix}--text-area__wrapper--slug`]: slug\n  });\n  const labelClasses = cx(`${prefix}--label`, {\n    [`${prefix}--visually-hidden`]: hideLabel && !isFluid,\n    [`${prefix}--label--disabled`]: disabled\n  });\n  const textareaClasses = cx(`${prefix}--text-area`, {\n    [`${prefix}--text-area--light`]: light,\n    [`${prefix}--text-area--invalid`]: invalid,\n    [`${prefix}--text-area--warn`]: warn\n  });\n  const counterClasses = cx(`${prefix}--label`, {\n    [`${prefix}--label--disabled`]: disabled\n  });\n  const helperTextClasses = cx(`${prefix}--form__helper-text`, {\n    [`${prefix}--form__helper-text--disabled`]: disabled\n  });\n  const label = labelText ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"label\",\n    htmlFor: id,\n    className: labelClasses\n  }, labelText) : null;\n  const counter = enableCounter && maxCount && (counterMode === 'character' || counterMode === 'word') ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: counterClasses\n  }, `${textCount}/${maxCount}`) : null;\n  const helperId = !helperText ? undefined : `text-area-helper-text-${textAreaInstanceId}`;\n  const helper = helperText ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    id: helperId,\n    className: helperTextClasses\n  }, helperText) : null;\n  const errorId = id + '-error-msg';\n  const error = invalid ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    role: \"alert\",\n    className: `${prefix}--form-requirement`,\n    id: errorId\n  }, invalidText, isFluid && /*#__PURE__*/React__default.createElement(WarningFilled, {\n    className: `${prefix}--text-area__invalid-icon`\n  })) : null;\n  const warning = warn ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    role: \"alert\",\n    className: `${prefix}--form-requirement`\n  }, warnText, isFluid && /*#__PURE__*/React__default.createElement(WarningAltFilled, {\n    className: `${prefix}--text-area__invalid-icon ${prefix}--text-area__invalid-icon--warning`\n  })) : null;\n  let ariaDescribedBy;\n  if (invalid) {\n    ariaDescribedBy = errorId;\n  } else if (!invalid && !warn && !isFluid && helperText) {\n    ariaDescribedBy = helperId;\n  }\n  if (enableCounter) {\n    // handle different counter mode\n    if (counterMode == 'character') {\n      textareaProps.maxLength = maxCount;\n    }\n  }\n  const announcerRef = useRef(null);\n  const [prevAnnouncement, setPrevAnnouncement] = useState('');\n  const ariaAnnouncement = useAnnouncer(textCount, maxCount, counterMode === 'word' ? 'words' : undefined);\n  useEffect(() => {\n    if (ariaAnnouncement && ariaAnnouncement !== prevAnnouncement) {\n      const announcer = announcerRef.current;\n      if (announcer) {\n        // Clear the content first\n        announcer.textContent = '';\n\n        // Set the new content after a small delay\n        const timeoutId = setTimeout(() => {\n          if (announcer) {\n            announcer.textContent = ariaAnnouncement;\n            setPrevAnnouncement(ariaAnnouncement);\n          }\n        }, counterMode === 'word' ? 2000 : 1000);\n\n        //clear the timeout\n        return () => {\n          if (timeoutId) {\n            clearTimeout(timeoutId);\n          }\n        };\n      }\n    }\n  }, [ariaAnnouncement, prevAnnouncement, counterMode]);\n  const input = /*#__PURE__*/React__default.createElement(\"textarea\", _extends({}, other, textareaProps, {\n    placeholder: placeholder,\n    \"aria-readonly\": other.readOnly ? true : false,\n    className: textareaClasses,\n    \"aria-invalid\": invalid,\n    \"aria-describedby\": ariaDescribedBy,\n    disabled: disabled,\n    rows: rows,\n    readOnly: other.readOnly,\n    ref: ref\n  }));\n\n  // Slug is always size `mini`\n  let normalizedSlug;\n  if (slug && slug['type']?.displayName === 'Slug') {\n    normalizedSlug = /*#__PURE__*/React__default.cloneElement(slug, {\n      size: 'mini'\n    });\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: formItemClasses\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--text-area__label-wrapper`\n  }, label, counter), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: textAreaWrapperClasses,\n    \"data-invalid\": invalid || null\n  }, invalid && !isFluid && /*#__PURE__*/React__default.createElement(WarningFilled, {\n    className: `${prefix}--text-area__invalid-icon`\n  }), warn && !invalid && !isFluid && /*#__PURE__*/React__default.createElement(WarningAltFilled, {\n    className: `${prefix}--text-area__invalid-icon ${prefix}--text-area__invalid-icon--warning`\n  }), input, normalizedSlug, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: `${prefix}--text-area__counter-alert`,\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\",\n    ref: announcerRef\n  }, ariaAnnouncement), isFluid && /*#__PURE__*/React__default.createElement(\"hr\", {\n    className: `${prefix}--text-area__divider`\n  }), isFluid && invalid ? error : null, isFluid && warn && !invalid ? warning : null), !invalid && !warn && !isFluid ? helper : null, invalid && !isFluid ? error : null, warn && !invalid && !isFluid ? warning : null);\n});\nTextArea.displayName = 'TextArea';\nTextArea.propTypes = {\n  /**\n   * Provide a custom className that is applied directly to the underlying\n   * `<textarea>` node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the `cols` attribute for the underlying `<textarea>` node\n   */\n  cols: PropTypes.number,\n  /**\n   * Specify the method used for calculating the counter number\n   */\n  counterMode: PropTypes.oneOf(['character', 'word']),\n  /**\n   * Optionally provide the default value of the `<textarea>`\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify whether the control is disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify whether to display the counter\n   */\n  enableCounter: PropTypes.bool,\n  /**\n   * Provide text that is used alongside the control label for additional help\n   */\n  helperText: PropTypes.node,\n  /**\n   * Specify whether you want the underlying label to be visually hidden\n   */\n  hideLabel: PropTypes.bool,\n  /**\n   * Provide a unique identifier for the control\n   */\n  id: PropTypes.string,\n  /**\n   * Specify whether the control is currently invalid\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Provide the text that will be read by a screen reader when visiting this\n   * control\n   */\n  labelText: PropTypes.node.isRequired,\n  /**\n   * `true` to use the light version. For use on $ui-01 backgrounds only.\n   * Don't use this to make tile background color same as container background color.\n   */\n  light: deprecate(PropTypes.bool, 'The `light` prop for `TextArea` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * Max entity count allowed for the textarea. This is needed in order for enableCounter to display\n   */\n  maxCount: PropTypes.number,\n  /**\n   * Optionally provide an `onChange` handler that is called whenever `<textarea>`\n   * is updated\n   */\n  onChange: PropTypes.func,\n  /**\n   * Optionally provide an `onClick` handler that is called whenever the\n   * `<textarea>` is clicked\n   */\n  onClick: PropTypes.func,\n  /**\n   * Optionally provide an `onKeyDown` handler that is called whenever `<textarea>`\n   * is keyed\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Specify the placeholder attribute for the `<textarea>`\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Whether the textarea should be read-only\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Specify the rows attribute for the `<textarea>`\n   */\n  rows: PropTypes.number,\n  /**\n   * **Experimental**: Provide a `Slug` component to be rendered inside the `TextArea` component\n   */\n  slug: PropTypes.node,\n  /**\n   * Provide the current value of the `<textarea>`\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\n\nexport { TextArea as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}