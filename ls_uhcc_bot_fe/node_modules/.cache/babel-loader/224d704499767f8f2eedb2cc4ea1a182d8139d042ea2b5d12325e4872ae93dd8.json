{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport { CARBON_SIDENAV_ITEMS } from './_utils.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nconst SideNavItems = _ref => {\n  let {\n    className: customClassName,\n    children,\n    isSideNavExpanded\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx([\"\".concat(prefix, \"--side-nav__items\")], customClassName);\n  const childrenWithExpandedState = React__default.Children.map(children, child => {\n    if ( /*#__PURE__*/React__default.isValidElement(child)) {\n      var _child$type;\n      // avoid spreading `isSideNavExpanded` to non-Carbon UI Shell children\n      const childDisplayName = (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName;\n      return /*#__PURE__*/React__default.cloneElement(child, {\n        ...(CARBON_SIDENAV_ITEMS.includes(childDisplayName) ? {\n          isSideNavExpanded\n        } : {})\n      });\n    }\n  });\n  return /*#__PURE__*/React__default.createElement(\"ul\", {\n    className: className\n  }, childrenWithExpandedState);\n};\nSideNavItems.displayName = 'SideNavItems';\nSideNavItems.propTypes = {\n  /**\n   * Provide a single icon as the child to `SideNavIcon` to render in the\n   * container\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Provide an optional class to be applied to the containing node\n   */\n  className: PropTypes.string,\n  /**\n   * Property to indicate if the side nav container is open (or not). Use to\n   * keep local state and styling in step with the SideNav expansion state.\n   */\n  isSideNavExpanded: PropTypes.bool\n};\nexport { SideNavItems as default };","map":{"version":3,"names":["cx","PropTypes","React__default","CARBON_SIDENAV_ITEMS","usePrefix","SideNavItems","_ref","className","customClassName","children","isSideNavExpanded","prefix","concat","childrenWithExpandedState","Children","map","child","isValidElement","_child$type","childDisplayName","type","displayName","cloneElement","includes","createElement","propTypes","node","isRequired","string","bool","default"],"sources":["/Users/davidguan/Local Sites/e/app/public/wp-content/plugins/drhaiel/ls_uhcc_bot_fe/node_modules/@carbon/react/es/components/UIShell/SideNavItems.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport { CARBON_SIDENAV_ITEMS } from './_utils.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\nconst SideNavItems = _ref => {\n  let {\n    className: customClassName,\n    children,\n    isSideNavExpanded\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx([`${prefix}--side-nav__items`], customClassName);\n  const childrenWithExpandedState = React__default.Children.map(children, child => {\n    if ( /*#__PURE__*/React__default.isValidElement(child)) {\n      // avoid spreading `isSideNavExpanded` to non-Carbon UI Shell children\n      const childDisplayName = child.type?.displayName;\n      return /*#__PURE__*/React__default.cloneElement(child, {\n        ...(CARBON_SIDENAV_ITEMS.includes(childDisplayName) ? {\n          isSideNavExpanded\n        } : {})\n      });\n    }\n  });\n  return /*#__PURE__*/React__default.createElement(\"ul\", {\n    className: className\n  }, childrenWithExpandedState);\n};\nSideNavItems.displayName = 'SideNavItems';\nSideNavItems.propTypes = {\n  /**\n   * Provide a single icon as the child to `SideNavIcon` to render in the\n   * container\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * Provide an optional class to be applied to the containing node\n   */\n  className: PropTypes.string,\n  /**\n   * Property to indicate if the side nav container is open (or not). Use to\n   * keep local state and styling in step with the SideNav expansion state.\n   */\n  isSideNavExpanded: PropTypes.bool\n};\n\nexport { SideNavItems as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,EAAE,MAAM,YAAY;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,OAAO;AAClC,SAASC,oBAAoB,QAAQ,aAAa;AAClD,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,MAAMC,YAAY,GAAGC,IAAI,IAAI;EAC3B,IAAI;IACFC,SAAS,EAAEC,eAAe;IAC1BC,QAAQ;IACRC;EACF,CAAC,GAAGJ,IAAI;EACR,MAAMK,MAAM,GAAGP,SAAS,CAAC,CAAC;EAC1B,MAAMG,SAAS,GAAGP,EAAE,CAAC,IAAAY,MAAA,CAAID,MAAM,uBAAoB,EAAEH,eAAe,CAAC;EACrE,MAAMK,yBAAyB,GAAGX,cAAc,CAACY,QAAQ,CAACC,GAAG,CAACN,QAAQ,EAAEO,KAAK,IAAI;IAC/E,KAAK,aAAad,cAAc,CAACe,cAAc,CAACD,KAAK,CAAC,EAAE;MAAA,IAAAE,WAAA;MACtD;MACA,MAAMC,gBAAgB,IAAAD,WAAA,GAAGF,KAAK,CAACI,IAAI,cAAAF,WAAA,uBAAVA,WAAA,CAAYG,WAAW;MAChD,OAAO,aAAanB,cAAc,CAACoB,YAAY,CAACN,KAAK,EAAE;QACrD,IAAIb,oBAAoB,CAACoB,QAAQ,CAACJ,gBAAgB,CAAC,GAAG;UACpDT;QACF,CAAC,GAAG,CAAC,CAAC;MACR,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EACF,OAAO,aAAaR,cAAc,CAACsB,aAAa,CAAC,IAAI,EAAE;IACrDjB,SAAS,EAAEA;EACb,CAAC,EAAEM,yBAAyB,CAAC;AAC/B,CAAC;AACDR,YAAY,CAACgB,WAAW,GAAG,cAAc;AACzChB,YAAY,CAACoB,SAAS,GAAG;EACvB;AACF;AACA;AACA;EACEhB,QAAQ,EAAER,SAAS,CAACyB,IAAI,CAACC,UAAU;EACnC;AACF;AACA;EACEpB,SAAS,EAAEN,SAAS,CAAC2B,MAAM;EAC3B;AACF;AACA;AACA;EACElB,iBAAiB,EAAET,SAAS,CAAC4B;AAC/B,CAAC;AAED,SAASxB,YAAY,IAAIyB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}