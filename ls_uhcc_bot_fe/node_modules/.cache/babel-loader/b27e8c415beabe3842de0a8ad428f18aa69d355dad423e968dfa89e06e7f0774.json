{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport Button from '../Button/Button.js';\nimport '../Button/Button.Skeleton.js';\nimport TableActionList from './TableActionList.js';\nimport '../Text/index.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { Text } from '../Text/Text.js';\nconst TableBatchActionsTranslationKeys = ['carbon.table.batch.cancel', 'carbon.table.batch.items.selected', 'carbon.table.batch.item.selected', 'carbon.table.batch.selectAll'];\nconst translationKeys = {\n  'carbon.table.batch.cancel': 'Cancel',\n  'carbon.table.batch.items.selected': 'items selected',\n  'carbon.table.batch.item.selected': 'item selected',\n  'carbon.table.batch.selectAll': 'Select all'\n};\nconst translateWithId = function (id) {\n  let {\n    totalSelected,\n    totalCount\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    totalSelected: 0,\n    totalCount: 0\n  };\n  if (id === 'carbon.table.batch.cancel') {\n    return translationKeys[id];\n  }\n  if (id === 'carbon.table.batch.selectAll') {\n    return \"\".concat(translationKeys[id], \" (\").concat(totalCount, \")\");\n  }\n  return \"\".concat(totalSelected, \" \").concat(translationKeys[id]);\n};\nconst TableBatchActions = _ref => {\n  let {\n    className,\n    children,\n    shouldShowBatchActions,\n    totalSelected,\n    totalCount,\n    onCancel,\n    onSelectAll,\n    translateWithId: t = translateWithId,\n    ...rest\n  } = _ref;\n  const [isScrolling, setIsScrolling] = React__default.useState(false);\n  const prefix = usePrefix();\n  const batchActionsClasses = cx({\n    [\"\".concat(prefix, \"--batch-actions\")]: true,\n    [\"\".concat(prefix, \"--batch-actions--active\")]: shouldShowBatchActions\n  }, className);\n  const batchSummaryClasses = cx(\"\".concat(prefix, \"--batch-summary\"), {\n    [\"\".concat(prefix, \"--batch-summary__scroll\")]: isScrolling\n  });\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    onScroll: () => {\n      setIsScrolling(!isScrolling);\n    },\n    \"aria-hidden\": !shouldShowBatchActions,\n    className: batchActionsClasses\n  }, rest), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: batchSummaryClasses\n  }, /*#__PURE__*/React__default.createElement(\"p\", {\n    className: \"\".concat(prefix, \"--batch-summary__para\")\n  }, /*#__PURE__*/React__default.createElement(Text, null, totalSelected > 1 || totalSelected === 0 ? t('carbon.table.batch.items.selected', {\n    totalSelected\n  }) : t('carbon.table.batch.item.selected', {\n    totalSelected\n  }))), onSelectAll && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--batch-summary__divider\")\n  }, \"|\"), /*#__PURE__*/React__default.createElement(Button, {\n    onClick: onSelectAll,\n    tabIndex: shouldShowBatchActions ? 0 : -1\n  }, t('carbon.table.batch.selectAll', {\n    totalCount\n  })))), /*#__PURE__*/React__default.createElement(TableActionList, null, children, /*#__PURE__*/React__default.createElement(Button, {\n    className: \"\".concat(prefix, \"--batch-summary__cancel\"),\n    tabIndex: shouldShowBatchActions ? 0 : -1,\n    onClick: onCancel\n  }, t('carbon.table.batch.cancel'))));\n};\nTableBatchActions.translationKeys = TableBatchActionsTranslationKeys;\nTableBatchActions.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  /**\n   * Hook required to listen for when the user initiates a cancel request\n   * through this component\n   */\n  onCancel: PropTypes.func.isRequired,\n  /**\n   * Hook to listen for when the user initiates a select all\n   * request through this component. This _only_ controls the rendering\n   * of the `Select All` button and does not include built in functionality\n   */\n  onSelectAll: PropTypes.func,\n  /**\n   * Boolean specifier for whether or not the batch action bar should be\n   * displayed\n   */\n  shouldShowBatchActions: PropTypes.bool,\n  /**\n   * Numeric representation of the total number of items in a table.\n   * This number is used in the select all button text\n   */\n  totalCount: PropTypes.number,\n  /**\n   * Numeric representation of the total number of items selected in a table.\n   * This number is used to derive the selection message\n   */\n  totalSelected: PropTypes.number.isRequired,\n  /**\n   * Supply a method to translate internal strings with your i18n tool of\n   * choice. Translation keys are available on the `translationKeys` field for\n   * this component.\n   */\n  translateWithId: PropTypes.func\n};\nexport { TableBatchActions as default };","map":{"version":3,"names":["extends","_extends","cx","PropTypes","React__default","Button","TableActionList","usePrefix","Text","TableBatchActionsTranslationKeys","translationKeys","translateWithId","id","totalSelected","totalCount","arguments","length","undefined","concat","TableBatchActions","_ref","className","children","shouldShowBatchActions","onCancel","onSelectAll","t","rest","isScrolling","setIsScrolling","useState","prefix","batchActionsClasses","batchSummaryClasses","createElement","onScroll","Fragment","onClick","tabIndex","propTypes","node","string","func","isRequired","bool","number","default"],"sources":["/Users/davidguan/Local Sites/e/app/public/wp-content/plugins/drhaiel/ls_uhcc_bot_fe/node_modules/@carbon/react/es/components/DataTable/TableBatchActions.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport Button from '../Button/Button.js';\nimport '../Button/Button.Skeleton.js';\nimport TableActionList from './TableActionList.js';\nimport '../Text/index.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { Text } from '../Text/Text.js';\n\nconst TableBatchActionsTranslationKeys = ['carbon.table.batch.cancel', 'carbon.table.batch.items.selected', 'carbon.table.batch.item.selected', 'carbon.table.batch.selectAll'];\nconst translationKeys = {\n  'carbon.table.batch.cancel': 'Cancel',\n  'carbon.table.batch.items.selected': 'items selected',\n  'carbon.table.batch.item.selected': 'item selected',\n  'carbon.table.batch.selectAll': 'Select all'\n};\nconst translateWithId = function (id) {\n  let {\n    totalSelected,\n    totalCount\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    totalSelected: 0,\n    totalCount: 0\n  };\n  if (id === 'carbon.table.batch.cancel') {\n    return translationKeys[id];\n  }\n  if (id === 'carbon.table.batch.selectAll') {\n    return `${translationKeys[id]} (${totalCount})`;\n  }\n  return `${totalSelected} ${translationKeys[id]}`;\n};\nconst TableBatchActions = _ref => {\n  let {\n    className,\n    children,\n    shouldShowBatchActions,\n    totalSelected,\n    totalCount,\n    onCancel,\n    onSelectAll,\n    translateWithId: t = translateWithId,\n    ...rest\n  } = _ref;\n  const [isScrolling, setIsScrolling] = React__default.useState(false);\n  const prefix = usePrefix();\n  const batchActionsClasses = cx({\n    [`${prefix}--batch-actions`]: true,\n    [`${prefix}--batch-actions--active`]: shouldShowBatchActions\n  }, className);\n  const batchSummaryClasses = cx(`${prefix}--batch-summary`, {\n    [`${prefix}--batch-summary__scroll`]: isScrolling\n  });\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    onScroll: () => {\n      setIsScrolling(!isScrolling);\n    },\n    \"aria-hidden\": !shouldShowBatchActions,\n    className: batchActionsClasses\n  }, rest), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: batchSummaryClasses\n  }, /*#__PURE__*/React__default.createElement(\"p\", {\n    className: `${prefix}--batch-summary__para`\n  }, /*#__PURE__*/React__default.createElement(Text, null, totalSelected > 1 || totalSelected === 0 ? t('carbon.table.batch.items.selected', {\n    totalSelected\n  }) : t('carbon.table.batch.item.selected', {\n    totalSelected\n  }))), onSelectAll && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: `${prefix}--batch-summary__divider`\n  }, \"|\"), /*#__PURE__*/React__default.createElement(Button, {\n    onClick: onSelectAll,\n    tabIndex: shouldShowBatchActions ? 0 : -1\n  }, t('carbon.table.batch.selectAll', {\n    totalCount\n  })))), /*#__PURE__*/React__default.createElement(TableActionList, null, children, /*#__PURE__*/React__default.createElement(Button, {\n    className: `${prefix}--batch-summary__cancel`,\n    tabIndex: shouldShowBatchActions ? 0 : -1,\n    onClick: onCancel\n  }, t('carbon.table.batch.cancel'))));\n};\nTableBatchActions.translationKeys = TableBatchActionsTranslationKeys;\nTableBatchActions.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  /**\n   * Hook required to listen for when the user initiates a cancel request\n   * through this component\n   */\n  onCancel: PropTypes.func.isRequired,\n  /**\n   * Hook to listen for when the user initiates a select all\n   * request through this component. This _only_ controls the rendering\n   * of the `Select All` button and does not include built in functionality\n   */\n  onSelectAll: PropTypes.func,\n  /**\n   * Boolean specifier for whether or not the batch action bar should be\n   * displayed\n   */\n  shouldShowBatchActions: PropTypes.bool,\n  /**\n   * Numeric representation of the total number of items in a table.\n   * This number is used in the select all button text\n   */\n  totalCount: PropTypes.number,\n  /**\n   * Numeric representation of the total number of items selected in a table.\n   * This number is used to derive the selection message\n   */\n  totalSelected: PropTypes.number.isRequired,\n  /**\n   * Supply a method to translate internal strings with your i18n tool of\n   * choice. Translation keys are available on the `translationKeys` field for\n   * this component.\n   */\n  translateWithId: PropTypes.func\n};\n\nexport { TableBatchActions as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}