{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { CaretDown } from '@carbon/icons-react';\nimport cx from 'classnames';\nimport uniqueId from '../../tools/uniqueId.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { useControllableState } from '../../internal/useControllableState.js';\nimport { useFeatureFlag } from '../FeatureFlags/index.js';\nimport { matches, match } from '../../internal/keyboard/match.js';\nimport { ArrowLeft, ArrowRight, Enter, Space } from '../../internal/keyboard/keys.js';\nconst TreeNode = /*#__PURE__*/React__default.forwardRef((_ref, ref) => {\n  let {\n    active,\n    children,\n    className,\n    depth,\n    disabled,\n    id: nodeId,\n    isExpanded,\n    defaultIsExpanded,\n    label,\n    onNodeFocusEvent,\n    onSelect: onNodeSelect,\n    onToggle,\n    onTreeSelect,\n    renderIcon: Icon,\n    selected,\n    value,\n    ...rest\n  } = _ref;\n  const enableTreeviewControllable = useFeatureFlag('enable-treeview-controllable');\n  const {\n    current: id\n  } = useRef(nodeId || uniqueId());\n  const controllableExpandedState = useControllableState({\n    value: isExpanded,\n    onChange: onToggle,\n    defaultValue: defaultIsExpanded\n  });\n  const uncontrollableExpandedState = useState(isExpanded);\n  const [expanded, setExpanded] = enableTreeviewControllable ? controllableExpandedState : uncontrollableExpandedState;\n  const currentNode = useRef(null);\n  const currentNodeLabel = useRef(null);\n  const prefix = usePrefix();\n  const nodesWithProps = React__default.Children.map(children, node => {\n    if ( /*#__PURE__*/React__default.isValidElement(node)) {\n      return /*#__PURE__*/React__default.cloneElement(node, {\n        active,\n        depth: depth + 1,\n        disabled: disabled || node.props.disabled,\n        onTreeSelect,\n        selected,\n        tabIndex: !node.props.disabled && -1 || null\n      });\n    }\n  });\n  const isActive = active === id;\n  const isSelected = selected.includes(id);\n  const treeNodeClasses = cx(className, \"\".concat(prefix, \"--tree-node\"), {\n    [\"\".concat(prefix, \"--tree-node--active\")]: isActive,\n    [\"\".concat(prefix, \"--tree-node--disabled\")]: disabled,\n    [\"\".concat(prefix, \"--tree-node--selected\")]: isSelected,\n    [\"\".concat(prefix, \"--tree-node--with-icon\")]: Icon,\n    [\"\".concat(prefix, \"--tree-leaf-node\")]: !children,\n    [\"\".concat(prefix, \"--tree-parent-node\")]: children\n  });\n  const toggleClasses = cx(\"\".concat(prefix, \"--tree-parent-node__toggle-icon\"), {\n    [\"\".concat(prefix, \"--tree-parent-node__toggle-icon--expanded\")]: expanded\n  });\n  function handleToggleClick(event) {\n    if (disabled) {\n      return;\n    }\n\n    // Prevent the node from being selected\n    event.stopPropagation();\n    if (!enableTreeviewControllable) {\n      onToggle === null || onToggle === void 0 || onToggle(event, {\n        id,\n        isExpanded: !expanded,\n        label,\n        value\n      });\n    }\n    setExpanded(!expanded);\n  }\n  function handleClick(event) {\n    event.stopPropagation();\n    if (!disabled) {\n      var _rest$onClick;\n      onTreeSelect === null || onTreeSelect === void 0 || onTreeSelect(event, {\n        id,\n        label,\n        value\n      });\n      onNodeSelect === null || onNodeSelect === void 0 || onNodeSelect(event, {\n        id,\n        label,\n        value\n      });\n      rest === null || rest === void 0 || (_rest$onClick = rest.onClick) === null || _rest$onClick === void 0 || _rest$onClick.call(rest, event);\n    }\n  }\n  function handleKeyDown(event) {\n    var _rest$onKeyDown;\n    if (disabled) {\n      return;\n    }\n    if (matches(event, [ArrowLeft, ArrowRight, Enter])) {\n      event.stopPropagation();\n    }\n    if (match(event, ArrowLeft)) {\n      const findParentTreeNode = node => {\n        if (node.classList.contains(\"\".concat(prefix, \"--tree-parent-node\"))) {\n          return node;\n        }\n        if (node.classList.contains(\"\".concat(prefix, \"--tree\"))) {\n          return null;\n        }\n        return findParentTreeNode(node.parentNode);\n      };\n      if (children && expanded) {\n        if (!enableTreeviewControllable) {\n          onToggle === null || onToggle === void 0 || onToggle(event, {\n            id,\n            isExpanded: false,\n            label,\n            value\n          });\n        }\n        setExpanded(false);\n      } else {\n        var _findParentTreeNode;\n        /**\n         * When focus is on a leaf node or a closed parent node, move focus to\n         * its parent node (unless its depth is level 1)\n         */\n        (_findParentTreeNode = findParentTreeNode(currentNode.current.parentNode)) === null || _findParentTreeNode === void 0 || _findParentTreeNode.focus();\n      }\n    }\n    if (children && match(event, ArrowRight)) {\n      if (expanded) {\n        /**\n         * When focus is on an expanded parent node, move focus to the first\n         * child node\n         */\n        currentNode.current.lastChild.firstChild.focus();\n      } else {\n        if (!enableTreeviewControllable) {\n          onToggle === null || onToggle === void 0 || onToggle(event, {\n            id,\n            isExpanded: true,\n            label,\n            value\n          });\n        }\n        setExpanded(true);\n      }\n    }\n    if (matches(event, [Enter, Space])) {\n      event.preventDefault();\n      handleClick(event);\n    }\n    rest === null || rest === void 0 || (_rest$onKeyDown = rest.onKeyDown) === null || _rest$onKeyDown === void 0 || _rest$onKeyDown.call(rest, event);\n  }\n  function handleFocusEvent(event) {\n    if (event.type === 'blur') {\n      var _rest$onBlur;\n      rest === null || rest === void 0 || (_rest$onBlur = rest.onBlur) === null || _rest$onBlur === void 0 || _rest$onBlur.call(rest, event);\n    }\n    if (event.type === 'focus') {\n      var _rest$onFocus;\n      rest === null || rest === void 0 || (_rest$onFocus = rest.onFocus) === null || _rest$onFocus === void 0 || _rest$onFocus.call(rest, event);\n    }\n    onNodeFocusEvent === null || onNodeFocusEvent === void 0 || onNodeFocusEvent(event);\n  }\n  useEffect(() => {\n    /**\n     * Negative margin shifts node to align with the left side boundary of the\n     * tree\n     * Dynamically calculate padding to recreate tree node indentation\n     * - parent nodes with icon have (depth + 1rem + depth * 0.5) left padding\n     * - parent nodes have (depth + 1rem) left padding\n     * - leaf nodes have (depth + 2.5rem) left padding without icons (because\n     *   of expand icon + spacing)\n     * - leaf nodes have (depth + 2rem + depth * 0.5) left padding with icons (because of\n     *   reduced spacing between the expand icon and the node icon + label)\n     */\n    const calcOffset = () => {\n      // parent node with icon\n      if (children && Icon) {\n        return depth + 1 + depth * 0.5;\n      }\n      // parent node without icon\n      if (children) {\n        return depth + 1;\n      }\n      // leaf node with icon\n      if (Icon) {\n        return depth + 2 + depth * 0.5;\n      }\n      // leaf node without icon\n      return depth + 2.5;\n    };\n    if (currentNodeLabel.current) {\n      currentNodeLabel.current.style.marginInlineStart = \"-\".concat(calcOffset(), \"rem\");\n      currentNodeLabel.current.style.paddingInlineStart = \"\".concat(calcOffset(), \"rem\");\n    }\n    if (!enableTreeviewControllable) {\n      // sync props and state\n      setExpanded(isExpanded);\n    }\n  }, [children, depth, Icon, isExpanded, enableTreeviewControllable, setExpanded]);\n  const treeNodeProps = {\n    ...rest,\n    ['aria-current']: isActive || null,\n    ['aria-selected']: disabled ? null : isSelected,\n    ['aria-disabled']: disabled,\n    className: treeNodeClasses,\n    id,\n    onBlur: handleFocusEvent,\n    onClick: handleClick,\n    onFocus: handleFocusEvent,\n    onKeyDown: handleKeyDown,\n    ref: currentNode,\n    role: 'treeitem'\n  };\n  if (!children) {\n    return /*#__PURE__*/React__default.createElement(\"li\", treeNodeProps, /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--tree-node__label\"),\n      ref: currentNodeLabel\n    }, Icon && /*#__PURE__*/React__default.createElement(Icon, {\n      className: \"\".concat(prefix, \"--tree-node__icon\")\n    }), label));\n  }\n  return /*#__PURE__*/(\n    // eslint-disable-next-line jsx-a11y/role-supports-aria-props\n    React__default.createElement(\"li\", _extends({}, treeNodeProps, {\n      \"aria-expanded\": !!expanded,\n      ref: ref\n    }), /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"\".concat(prefix, \"--tree-node__label\"),\n      ref: currentNodeLabel\n    }, /*#__PURE__*/React__default.createElement(\"span\", {\n      className: \"\".concat(prefix, \"--tree-parent-node__toggle\"),\n      disabled: disabled,\n      onClick: handleToggleClick\n    }, /*#__PURE__*/React__default.createElement(CaretDown, {\n      className: toggleClasses\n    })), /*#__PURE__*/React__default.createElement(\"span\", {\n      className: \"\".concat(prefix, \"--tree-node__label__details\")\n    }, Icon && /*#__PURE__*/React__default.createElement(Icon, {\n      className: \"\".concat(prefix, \"--tree-node__icon\")\n    }), label)), expanded && /*#__PURE__*/React__default.createElement(\"ul\", {\n      role: \"group\",\n      className: \"\".concat(prefix, \"--tree-node__children\")\n    }, nodesWithProps))\n  );\n});\nTreeNode.propTypes = {\n  /**\n   * **Note:** this is controlled by the parent TreeView component, do not set manually.\n   * The ID of the active node in the tree\n   */\n  active: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify the children of the TreeNode\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the TreeNode\n   */\n  className: PropTypes.string,\n  /**\n   * **[Experimental]** The default expansion state of the node.\n   * *This is only supported with the `enable-treeview-controllable` feature flag!*\n   */\n  defaultIsExpanded: PropTypes.bool,\n  /**\n   * **Note:** this is controlled by the parent TreeView component, do not set manually.\n   * TreeNode depth to determine spacing\n   */\n  depth: PropTypes.number,\n  /**\n   * Specify if the TreeNode is disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify the TreeNode's ID. Must be unique in the DOM and is used for props.active and props.selected\n   */\n  id: PropTypes.string,\n  /**\n   * Specify if the TreeNode is expanded (only applicable to parent nodes)\n   */\n  isExpanded: PropTypes.bool,\n  /**\n   * Rendered label for the TreeNode\n   */\n  label: PropTypes.node,\n  /**\n   * Callback function for when the node receives or loses focus\n   */\n  onNodeFocusEvent: PropTypes.func,\n  /**\n   * Callback function for when the node is selected\n   */\n  onSelect: PropTypes.func,\n  /**\n   * Callback function for when a parent node is expanded or collapsed\n   */\n  onToggle: PropTypes.func,\n  /**\n   * Callback function for when any node in the tree is selected\n   */\n  onTreeSelect: PropTypes.func,\n  /**\n   * Optional prop to allow each node to have an associated icon.\n   * Can be a React component class\n   */\n  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  /**\n   * **Note:** this is controlled by the parent TreeView component, do not set manually.\n   * Array containing all selected node IDs in the tree\n   */\n  selected: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  /**\n   * Specify the value of the TreeNode\n   */\n  value: PropTypes.string\n};\nTreeNode.displayName = 'TreeNode';\nvar TreeNode$1 = TreeNode;\nexport { TreeNode$1 as default };","map":{"version":3,"names":["extends","_extends","React__default","useRef","useState","useEffect","PropTypes","CaretDown","cx","uniqueId","usePrefix","useControllableState","useFeatureFlag","matches","match","ArrowLeft","ArrowRight","Enter","Space","TreeNode","forwardRef","_ref","ref","active","children","className","depth","disabled","id","nodeId","isExpanded","defaultIsExpanded","label","onNodeFocusEvent","onSelect","onNodeSelect","onToggle","onTreeSelect","renderIcon","Icon","selected","value","rest","enableTreeviewControllable","current","controllableExpandedState","onChange","defaultValue","uncontrollableExpandedState","expanded","setExpanded","currentNode","currentNodeLabel","prefix","nodesWithProps","Children","map","node","isValidElement","cloneElement","props","tabIndex","isActive","isSelected","includes","treeNodeClasses","concat","toggleClasses","handleToggleClick","event","stopPropagation","handleClick","_rest$onClick","onClick","call","handleKeyDown","_rest$onKeyDown","findParentTreeNode","classList","contains","parentNode","_findParentTreeNode","focus","lastChild","firstChild","preventDefault","onKeyDown","handleFocusEvent","type","_rest$onBlur","onBlur","_rest$onFocus","onFocus","calcOffset","style","marginInlineStart","paddingInlineStart","treeNodeProps","role","createElement","propTypes","oneOfType","string","number","bool","func","object","arrayOf","displayName","TreeNode$1","default"],"sources":["/Users/davidguan/Local Sites/e/app/public/wp-content/plugins/drhaiel/ls_uhcc_bot_fe/node_modules/@carbon/react/es/components/TreeView/TreeNode.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { CaretDown } from '@carbon/icons-react';\nimport cx from 'classnames';\nimport uniqueId from '../../tools/uniqueId.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { useControllableState } from '../../internal/useControllableState.js';\nimport { useFeatureFlag } from '../FeatureFlags/index.js';\nimport { matches, match } from '../../internal/keyboard/match.js';\nimport { ArrowLeft, ArrowRight, Enter, Space } from '../../internal/keyboard/keys.js';\n\nconst TreeNode = /*#__PURE__*/React__default.forwardRef((_ref, ref) => {\n  let {\n    active,\n    children,\n    className,\n    depth,\n    disabled,\n    id: nodeId,\n    isExpanded,\n    defaultIsExpanded,\n    label,\n    onNodeFocusEvent,\n    onSelect: onNodeSelect,\n    onToggle,\n    onTreeSelect,\n    renderIcon: Icon,\n    selected,\n    value,\n    ...rest\n  } = _ref;\n  const enableTreeviewControllable = useFeatureFlag('enable-treeview-controllable');\n  const {\n    current: id\n  } = useRef(nodeId || uniqueId());\n  const controllableExpandedState = useControllableState({\n    value: isExpanded,\n    onChange: onToggle,\n    defaultValue: defaultIsExpanded\n  });\n  const uncontrollableExpandedState = useState(isExpanded);\n  const [expanded, setExpanded] = enableTreeviewControllable ? controllableExpandedState : uncontrollableExpandedState;\n  const currentNode = useRef(null);\n  const currentNodeLabel = useRef(null);\n  const prefix = usePrefix();\n  const nodesWithProps = React__default.Children.map(children, node => {\n    if ( /*#__PURE__*/React__default.isValidElement(node)) {\n      return /*#__PURE__*/React__default.cloneElement(node, {\n        active,\n        depth: depth + 1,\n        disabled: disabled || node.props.disabled,\n        onTreeSelect,\n        selected,\n        tabIndex: !node.props.disabled && -1 || null\n      });\n    }\n  });\n  const isActive = active === id;\n  const isSelected = selected.includes(id);\n  const treeNodeClasses = cx(className, `${prefix}--tree-node`, {\n    [`${prefix}--tree-node--active`]: isActive,\n    [`${prefix}--tree-node--disabled`]: disabled,\n    [`${prefix}--tree-node--selected`]: isSelected,\n    [`${prefix}--tree-node--with-icon`]: Icon,\n    [`${prefix}--tree-leaf-node`]: !children,\n    [`${prefix}--tree-parent-node`]: children\n  });\n  const toggleClasses = cx(`${prefix}--tree-parent-node__toggle-icon`, {\n    [`${prefix}--tree-parent-node__toggle-icon--expanded`]: expanded\n  });\n  function handleToggleClick(event) {\n    if (disabled) {\n      return;\n    }\n\n    // Prevent the node from being selected\n    event.stopPropagation();\n    if (!enableTreeviewControllable) {\n      onToggle?.(event, {\n        id,\n        isExpanded: !expanded,\n        label,\n        value\n      });\n    }\n    setExpanded(!expanded);\n  }\n  function handleClick(event) {\n    event.stopPropagation();\n    if (!disabled) {\n      onTreeSelect?.(event, {\n        id,\n        label,\n        value\n      });\n      onNodeSelect?.(event, {\n        id,\n        label,\n        value\n      });\n      rest?.onClick?.(event);\n    }\n  }\n  function handleKeyDown(event) {\n    if (disabled) {\n      return;\n    }\n    if (matches(event, [ArrowLeft, ArrowRight, Enter])) {\n      event.stopPropagation();\n    }\n    if (match(event, ArrowLeft)) {\n      const findParentTreeNode = node => {\n        if (node.classList.contains(`${prefix}--tree-parent-node`)) {\n          return node;\n        }\n        if (node.classList.contains(`${prefix}--tree`)) {\n          return null;\n        }\n        return findParentTreeNode(node.parentNode);\n      };\n      if (children && expanded) {\n        if (!enableTreeviewControllable) {\n          onToggle?.(event, {\n            id,\n            isExpanded: false,\n            label,\n            value\n          });\n        }\n        setExpanded(false);\n      } else {\n        /**\n         * When focus is on a leaf node or a closed parent node, move focus to\n         * its parent node (unless its depth is level 1)\n         */\n        findParentTreeNode(currentNode.current.parentNode)?.focus();\n      }\n    }\n    if (children && match(event, ArrowRight)) {\n      if (expanded) {\n        /**\n         * When focus is on an expanded parent node, move focus to the first\n         * child node\n         */\n        currentNode.current.lastChild.firstChild.focus();\n      } else {\n        if (!enableTreeviewControllable) {\n          onToggle?.(event, {\n            id,\n            isExpanded: true,\n            label,\n            value\n          });\n        }\n        setExpanded(true);\n      }\n    }\n    if (matches(event, [Enter, Space])) {\n      event.preventDefault();\n      handleClick(event);\n    }\n    rest?.onKeyDown?.(event);\n  }\n  function handleFocusEvent(event) {\n    if (event.type === 'blur') {\n      rest?.onBlur?.(event);\n    }\n    if (event.type === 'focus') {\n      rest?.onFocus?.(event);\n    }\n    onNodeFocusEvent?.(event);\n  }\n  useEffect(() => {\n    /**\n     * Negative margin shifts node to align with the left side boundary of the\n     * tree\n     * Dynamically calculate padding to recreate tree node indentation\n     * - parent nodes with icon have (depth + 1rem + depth * 0.5) left padding\n     * - parent nodes have (depth + 1rem) left padding\n     * - leaf nodes have (depth + 2.5rem) left padding without icons (because\n     *   of expand icon + spacing)\n     * - leaf nodes have (depth + 2rem + depth * 0.5) left padding with icons (because of\n     *   reduced spacing between the expand icon and the node icon + label)\n     */\n    const calcOffset = () => {\n      // parent node with icon\n      if (children && Icon) {\n        return depth + 1 + depth * 0.5;\n      }\n      // parent node without icon\n      if (children) {\n        return depth + 1;\n      }\n      // leaf node with icon\n      if (Icon) {\n        return depth + 2 + depth * 0.5;\n      }\n      // leaf node without icon\n      return depth + 2.5;\n    };\n    if (currentNodeLabel.current) {\n      currentNodeLabel.current.style.marginInlineStart = `-${calcOffset()}rem`;\n      currentNodeLabel.current.style.paddingInlineStart = `${calcOffset()}rem`;\n    }\n    if (!enableTreeviewControllable) {\n      // sync props and state\n      setExpanded(isExpanded);\n    }\n  }, [children, depth, Icon, isExpanded, enableTreeviewControllable, setExpanded]);\n  const treeNodeProps = {\n    ...rest,\n    ['aria-current']: isActive || null,\n    ['aria-selected']: disabled ? null : isSelected,\n    ['aria-disabled']: disabled,\n    className: treeNodeClasses,\n    id,\n    onBlur: handleFocusEvent,\n    onClick: handleClick,\n    onFocus: handleFocusEvent,\n    onKeyDown: handleKeyDown,\n    ref: currentNode,\n    role: 'treeitem'\n  };\n  if (!children) {\n    return /*#__PURE__*/React__default.createElement(\"li\", treeNodeProps, /*#__PURE__*/React__default.createElement(\"div\", {\n      className: `${prefix}--tree-node__label`,\n      ref: currentNodeLabel\n    }, Icon && /*#__PURE__*/React__default.createElement(Icon, {\n      className: `${prefix}--tree-node__icon`\n    }), label));\n  }\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/role-supports-aria-props\n    React__default.createElement(\"li\", _extends({}, treeNodeProps, {\n      \"aria-expanded\": !!expanded,\n      ref: ref\n    }), /*#__PURE__*/React__default.createElement(\"div\", {\n      className: `${prefix}--tree-node__label`,\n      ref: currentNodeLabel\n    }, /*#__PURE__*/React__default.createElement(\"span\", {\n      className: `${prefix}--tree-parent-node__toggle`,\n      disabled: disabled,\n      onClick: handleToggleClick\n    }, /*#__PURE__*/React__default.createElement(CaretDown, {\n      className: toggleClasses\n    })), /*#__PURE__*/React__default.createElement(\"span\", {\n      className: `${prefix}--tree-node__label__details`\n    }, Icon && /*#__PURE__*/React__default.createElement(Icon, {\n      className: `${prefix}--tree-node__icon`\n    }), label)), expanded && /*#__PURE__*/React__default.createElement(\"ul\", {\n      role: \"group\",\n      className: `${prefix}--tree-node__children`\n    }, nodesWithProps))\n  );\n});\nTreeNode.propTypes = {\n  /**\n   * **Note:** this is controlled by the parent TreeView component, do not set manually.\n   * The ID of the active node in the tree\n   */\n  active: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify the children of the TreeNode\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the TreeNode\n   */\n  className: PropTypes.string,\n  /**\n   * **[Experimental]** The default expansion state of the node.\n   * *This is only supported with the `enable-treeview-controllable` feature flag!*\n   */\n  defaultIsExpanded: PropTypes.bool,\n  /**\n   * **Note:** this is controlled by the parent TreeView component, do not set manually.\n   * TreeNode depth to determine spacing\n   */\n  depth: PropTypes.number,\n  /**\n   * Specify if the TreeNode is disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify the TreeNode's ID. Must be unique in the DOM and is used for props.active and props.selected\n   */\n  id: PropTypes.string,\n  /**\n   * Specify if the TreeNode is expanded (only applicable to parent nodes)\n   */\n  isExpanded: PropTypes.bool,\n  /**\n   * Rendered label for the TreeNode\n   */\n  label: PropTypes.node,\n  /**\n   * Callback function for when the node receives or loses focus\n   */\n  onNodeFocusEvent: PropTypes.func,\n  /**\n   * Callback function for when the node is selected\n   */\n  onSelect: PropTypes.func,\n  /**\n   * Callback function for when a parent node is expanded or collapsed\n   */\n  onToggle: PropTypes.func,\n  /**\n   * Callback function for when any node in the tree is selected\n   */\n  onTreeSelect: PropTypes.func,\n  /**\n   * Optional prop to allow each node to have an associated icon.\n   * Can be a React component class\n   */\n  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  /**\n   * **Note:** this is controlled by the parent TreeView component, do not set manually.\n   * Array containing all selected node IDs in the tree\n   */\n  selected: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  /**\n   * Specify the value of the TreeNode\n   */\n  value: PropTypes.string\n};\nTreeNode.displayName = 'TreeNode';\nvar TreeNode$1 = TreeNode;\n\nexport { TreeNode$1 as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}