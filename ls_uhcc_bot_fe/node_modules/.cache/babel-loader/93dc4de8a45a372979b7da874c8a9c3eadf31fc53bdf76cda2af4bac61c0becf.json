{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport cx from 'classnames';\nimport '../MultiSelect/index.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\nimport FilterableMultiSelect from '../MultiSelect/FilterableMultiSelect.js';\nimport MultiSelect from '../MultiSelect/MultiSelect.js';\nconst FluidMultiSelect = /*#__PURE__*/React__default.forwardRef(function FluidMultiSelect(_ref, ref) {\n  let {\n    className,\n    isCondensed,\n    isFilterable,\n    ...other\n  } = _ref;\n  const prefix = usePrefix();\n  const classNames = cx(\"\".concat(prefix, \"--list-box__wrapper--fluid\"), className, {\n    [\"\".concat(prefix, \"--list-box__wrapper--fluid--condensed\")]: isCondensed\n  });\n  return /*#__PURE__*/React__default.createElement(FormContext.Provider, {\n    value: {\n      isFluid: true\n    }\n  }, isFilterable ? /*#__PURE__*/React__default.createElement(FilterableMultiSelect, _extends({\n    ref: ref,\n    className: classNames\n  }, other)) : /*#__PURE__*/React__default.createElement(MultiSelect, _extends({\n    ref: ref,\n    className: classNames\n  }, other)));\n});\nFluidMultiSelect.propTypes = {\n  /**\n   * Specify an optional className to be applied to the outer FluidForm wrapper\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the text that should be read for screen readers that describes total items selected\n   */\n  clearSelectionDescription: PropTypes.string,\n  /**\n   * Specify the text that should be read for screen readers to clear selection.\n   */\n  clearSelectionText: PropTypes.string,\n  /**\n   * Provide a compare function that is used to determine the ordering of\n   * options. See 'sortItems' for more control.\n   */\n  compareItems: PropTypes.func,\n  /**\n   * Specify the direction of the multiselect dropdown. Can be either top or bottom.\n   */\n  direction: PropTypes.oneOf(['top', 'bottom']),\n  /**\n   * Specify whether the `<input>` should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Additional props passed to Downshift.\n   *\n   * **Use with caution:** anything you define here overrides the components'\n   * internal handling of that prop. Downshift APIs and internals are subject to\n   * change, and in some cases they can not be shimmed by Carbon to shield you\n   * from potentially breaking changes.\n   */\n  downshiftProps: PropTypes.object,\n  /**\n   * Specify a custom `id` for the `<input>`\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Allow users to pass in arbitrary items from their collection that are\n   * pre-selected\n   */\n  initialSelectedItems: PropTypes.array,\n  /**\n   * Specify if the currently selected value is invalid.\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Specify if the `FluidMultiSelect` should render its menu items in condensed mode\n   */\n  isCondensed: PropTypes.bool,\n  /**\n   * Specify if the `FluidMultiSelect` should render the `filterable` variant of `FluidMultiSelect`\n   */\n  isFilterable: PropTypes.bool,\n  /**\n   * Function to render items as custom components instead of strings.\n   * Defaults to null and is overridden by a getter\n   */\n  itemToElement: PropTypes.func,\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list.\n   */\n  itemToString: PropTypes.func,\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n  /**\n   * Generic `label` that will be used as the textual representation of what\n   * this field is for\n   */\n  label: PropTypes.node.isRequired,\n  /**\n   * Specify the locale of the control. Used for the default `compareItems`\n   * used for sorting the list of items in the control.\n   */\n  locale: PropTypes.string,\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occurring.\n   */\n  onChange: PropTypes.func,\n  /**\n   * **Filterable variant only** - `onInputValueChange` is a utility for this controlled component to communicate to\n   * the currently typed input.\n   */\n  onInputValueChange: PropTypes.func,\n  /**\n   * `onMenuChange` is a utility for this controlled component to communicate to a\n   * consuming component that the menu was open(`true`)/closed(`false`).\n   */\n  onMenuChange: PropTypes.func,\n  /**\n   * Whether or not the Multiselect is readonly\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * For full control of the selected items\n   */\n  selectedItems: PropTypes.array,\n  /**\n   * Specify feedback (mode) of the selection.\n   * `top`: selected item jumps to top\n   * `fixed`: selected item stays at it's position\n   * `top-after-reopen`: selected item jump to top after reopen dropdown\n   */\n  selectionFeedback: PropTypes.oneOf(['top', 'fixed', 'top-after-reopen']),\n  /**\n   * Provide a method that sorts all options in the control. Overriding this\n   * prop means that you also have to handle the sort logic for selected versus\n   * un-selected items. If you just want to control ordering, consider the\n   * `compareItems` prop instead.\n   *\n   * The return value should be a number whose sign indicates the relative order\n   * of the two elements: negative if a is less than b, positive if a is greater\n   * than b, and zero if they are equal.\n   *\n   * sortItems :\n   *   (items: Array<Item>, {\n   *     selectedItems: Array<Item>,\n   *     itemToString: Item => string,\n   *     compareItems: (itemA: string, itemB: string, {\n   *       locale: string\n   *     }) => number,\n   *     locale: string,\n   *   }) => Array<Item>\n   */\n  sortItems: PropTypes.func,\n  /**\n   * Provide the title text that will be read by a screen reader when\n   * visiting this control\n   */\n  titleText: PropTypes.node,\n  /**\n   * Callback function for translating ListBoxMenuIcon SVG title\n   */\n  translateWithId: PropTypes.func,\n  /**\n   * Specify title to show title on hover\n   */\n  useTitleInItem: PropTypes.bool,\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\nvar FluidMultiSelect$1 = FluidMultiSelect;\nexport { FluidMultiSelect$1 as default };","map":{"version":3,"names":["extends","_extends","PropTypes","React__default","cx","usePrefix","FormContext","FilterableMultiSelect","MultiSelect","FluidMultiSelect","forwardRef","_ref","ref","className","isCondensed","isFilterable","other","prefix","classNames","concat","createElement","Provider","value","isFluid","propTypes","string","clearSelectionDescription","clearSelectionText","compareItems","func","direction","oneOf","disabled","bool","downshiftProps","object","id","isRequired","initialSelectedItems","array","invalid","invalidText","node","itemToElement","itemToString","items","label","locale","onChange","onInputValueChange","onMenuChange","readOnly","selectedItems","selectionFeedback","sortItems","titleText","translateWithId","useTitleInItem","warn","warnText","FluidMultiSelect$1","default"],"sources":["/Users/davidguan/Local Sites/e/app/public/wp-content/plugins/drhaiel/ls_uhcc_bot_fe/node_modules/@carbon/react/es/components/FluidMultiSelect/FluidMultiSelect.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport cx from 'classnames';\nimport '../MultiSelect/index.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\nimport FilterableMultiSelect from '../MultiSelect/FilterableMultiSelect.js';\nimport MultiSelect from '../MultiSelect/MultiSelect.js';\n\nconst FluidMultiSelect = /*#__PURE__*/React__default.forwardRef(function FluidMultiSelect(_ref, ref) {\n  let {\n    className,\n    isCondensed,\n    isFilterable,\n    ...other\n  } = _ref;\n  const prefix = usePrefix();\n  const classNames = cx(`${prefix}--list-box__wrapper--fluid`, className, {\n    [`${prefix}--list-box__wrapper--fluid--condensed`]: isCondensed\n  });\n  return /*#__PURE__*/React__default.createElement(FormContext.Provider, {\n    value: {\n      isFluid: true\n    }\n  }, isFilterable ? /*#__PURE__*/React__default.createElement(FilterableMultiSelect, _extends({\n    ref: ref,\n    className: classNames\n  }, other)) : /*#__PURE__*/React__default.createElement(MultiSelect, _extends({\n    ref: ref,\n    className: classNames\n  }, other)));\n});\nFluidMultiSelect.propTypes = {\n  /**\n   * Specify an optional className to be applied to the outer FluidForm wrapper\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the text that should be read for screen readers that describes total items selected\n   */\n  clearSelectionDescription: PropTypes.string,\n  /**\n   * Specify the text that should be read for screen readers to clear selection.\n   */\n  clearSelectionText: PropTypes.string,\n  /**\n   * Provide a compare function that is used to determine the ordering of\n   * options. See 'sortItems' for more control.\n   */\n  compareItems: PropTypes.func,\n  /**\n   * Specify the direction of the multiselect dropdown. Can be either top or bottom.\n   */\n  direction: PropTypes.oneOf(['top', 'bottom']),\n  /**\n   * Specify whether the `<input>` should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Additional props passed to Downshift.\n   *\n   * **Use with caution:** anything you define here overrides the components'\n   * internal handling of that prop. Downshift APIs and internals are subject to\n   * change, and in some cases they can not be shimmed by Carbon to shield you\n   * from potentially breaking changes.\n   */\n  downshiftProps: PropTypes.object,\n  /**\n   * Specify a custom `id` for the `<input>`\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Allow users to pass in arbitrary items from their collection that are\n   * pre-selected\n   */\n  initialSelectedItems: PropTypes.array,\n  /**\n   * Specify if the currently selected value is invalid.\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Specify if the `FluidMultiSelect` should render its menu items in condensed mode\n   */\n  isCondensed: PropTypes.bool,\n  /**\n   * Specify if the `FluidMultiSelect` should render the `filterable` variant of `FluidMultiSelect`\n   */\n  isFilterable: PropTypes.bool,\n  /**\n   * Function to render items as custom components instead of strings.\n   * Defaults to null and is overridden by a getter\n   */\n  itemToElement: PropTypes.func,\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list.\n   */\n  itemToString: PropTypes.func,\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n  /**\n   * Generic `label` that will be used as the textual representation of what\n   * this field is for\n   */\n  label: PropTypes.node.isRequired,\n  /**\n   * Specify the locale of the control. Used for the default `compareItems`\n   * used for sorting the list of items in the control.\n   */\n  locale: PropTypes.string,\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occurring.\n   */\n  onChange: PropTypes.func,\n  /**\n   * **Filterable variant only** - `onInputValueChange` is a utility for this controlled component to communicate to\n   * the currently typed input.\n   */\n  onInputValueChange: PropTypes.func,\n  /**\n   * `onMenuChange` is a utility for this controlled component to communicate to a\n   * consuming component that the menu was open(`true`)/closed(`false`).\n   */\n  onMenuChange: PropTypes.func,\n  /**\n   * Whether or not the Multiselect is readonly\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * For full control of the selected items\n   */\n  selectedItems: PropTypes.array,\n  /**\n   * Specify feedback (mode) of the selection.\n   * `top`: selected item jumps to top\n   * `fixed`: selected item stays at it's position\n   * `top-after-reopen`: selected item jump to top after reopen dropdown\n   */\n  selectionFeedback: PropTypes.oneOf(['top', 'fixed', 'top-after-reopen']),\n  /**\n   * Provide a method that sorts all options in the control. Overriding this\n   * prop means that you also have to handle the sort logic for selected versus\n   * un-selected items. If you just want to control ordering, consider the\n   * `compareItems` prop instead.\n   *\n   * The return value should be a number whose sign indicates the relative order\n   * of the two elements: negative if a is less than b, positive if a is greater\n   * than b, and zero if they are equal.\n   *\n   * sortItems :\n   *   (items: Array<Item>, {\n   *     selectedItems: Array<Item>,\n   *     itemToString: Item => string,\n   *     compareItems: (itemA: string, itemB: string, {\n   *       locale: string\n   *     }) => number,\n   *     locale: string,\n   *   }) => Array<Item>\n   */\n  sortItems: PropTypes.func,\n  /**\n   * Provide the title text that will be read by a screen reader when\n   * visiting this control\n   */\n  titleText: PropTypes.node,\n  /**\n   * Callback function for translating ListBoxMenuIcon SVG title\n   */\n  translateWithId: PropTypes.func,\n  /**\n   * Specify title to show title on hover\n   */\n  useTitleInItem: PropTypes.bool,\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\nvar FluidMultiSelect$1 = FluidMultiSelect;\n\nexport { FluidMultiSelect$1 as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}