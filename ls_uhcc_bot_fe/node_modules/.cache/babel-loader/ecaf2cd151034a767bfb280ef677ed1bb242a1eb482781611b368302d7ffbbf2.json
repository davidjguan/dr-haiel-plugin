{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { useState, useRef, useEffect } from 'react';\nimport deprecate from '../../prop-types/deprecate.js';\nimport cx from 'classnames';\nimport { Close, ErrorFilled, CheckmarkFilled, WarningFilled, WarningAltFilled, InformationFilled, InformationSquareFilled } from '@carbon/icons-react';\nimport '../Text/index.js';\nimport Button from '../Button/Button.js';\nimport '../Button/Button.Skeleton.js';\nimport useIsomorphicEffect from '../../internal/useIsomorphicEffect.js';\nimport { useNoInteractiveChildren, useInteractiveChildrenNeedDescription } from '../../internal/useNoInteractiveChildren.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { useId } from '../../internal/useId.js';\nimport { noopFn } from '../../internal/noopFn.js';\nimport wrapFocus, { wrapFocusWithoutSentinels } from '../../internal/wrapFocus.js';\nimport { useFeatureFlag } from '../FeatureFlags/index.js';\nimport { Text } from '../Text/Text.js';\nimport { match, matches } from '../../internal/keyboard/match.js';\nimport { Tab, Escape } from '../../internal/keyboard/keys.js';\n\n/**\n * Conditionally call a callback when the escape key is pressed\n * @param {node} ref - ref of the container element to scope the functionality to\n * @param {func} callback - function to be called\n * @param {bool} override - escape hatch to conditionally call the callback\n */\nfunction useEscapeToClose(ref, callback) {\n  let override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const handleKeyDown = event => {\n    // The callback should only be called when focus is on or within the container\n    const elementContainsFocus = ref.current && document.activeElement === ref.current || ref.current.contains(document.activeElement);\n    if (matches(event, [Escape]) && override && elementContainsFocus) {\n      callback(event);\n    }\n  };\n  useIsomorphicEffect(() => {\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => document.removeEventListener('keydown', handleKeyDown, false);\n  });\n}\nfunction NotificationActionButton(_ref) {\n  let {\n    children,\n    className: customClassName,\n    onClick,\n    inline,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx(customClassName, {\n    [\"\".concat(prefix, \"--actionable-notification__action-button\")]: true\n  });\n  return /*#__PURE__*/React__default.createElement(Button, _extends({\n    className: className,\n    kind: inline ? 'ghost' : 'tertiary',\n    onClick: onClick,\n    size: \"sm\"\n  }, rest), children);\n}\nNotificationActionButton.propTypes = {\n  /**\n   * Specify the content of the notification action button.\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the notification action button\n   */\n  className: PropTypes.string,\n  /**\n   * Specify if the visual treatment of the button should be for an inline notification\n   */\n  inline: PropTypes.bool,\n  /**\n   * Optionally specify a click handler for the notification action button.\n   */\n  onClick: PropTypes.func\n};\n\n/**\n * NotificationButton\n * ==================\n */\n\nfunction NotificationButton(_ref2) {\n  let {\n    'aria-label': ariaLabel = 'close notification',\n    ariaLabel: deprecatedAriaLabel,\n    className,\n    type = 'button',\n    renderIcon: IconTag = Close,\n    name,\n    notificationType = 'toast',\n    ...rest\n  } = _ref2;\n  const prefix = usePrefix();\n  const buttonClassName = cx(className, {\n    [\"\".concat(prefix, \"--\").concat(notificationType, \"-notification__close-button\")]: notificationType\n  });\n  const iconClassName = cx({\n    [\"\".concat(prefix, \"--\").concat(notificationType, \"-notification__close-icon\")]: notificationType\n  });\n  return /*#__PURE__*/React__default.createElement(\"button\", _extends({}, rest, {\n    // eslint-disable-next-line react/button-has-type\n    type: type,\n    \"aria-label\": deprecatedAriaLabel || ariaLabel,\n    title: deprecatedAriaLabel || ariaLabel,\n    className: buttonClassName\n  }), IconTag && /*#__PURE__*/React__default.createElement(IconTag, {\n    className: iconClassName,\n    name: name\n  }));\n}\nNotificationButton.propTypes = {\n  /**\n   * Specify a label to be read by screen readers on the container node\n   */\n  ['aria-label']: PropTypes.string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Specify a label to be read by screen readers on the container note.\n   */\n  ariaLabel: deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * Specify an optional className to be applied to the notification button\n   */\n  className: PropTypes.string,\n  /**\n   * Specify an optional icon for the Button through a string,\n   * if something but regular \"close\" icon is desirable\n   */\n  name: PropTypes.string,\n  /**\n   * Specify the notification type\n   */\n  notificationType: PropTypes.oneOf(['toast', 'inline', 'actionable']),\n  /**\n   * Optional prop to allow overriding the icon rendering.\n   * Can be a React component class\n   */\n  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  /**\n   * Optional prop to specify the type of the Button\n   */\n  type: PropTypes.string\n};\n\n/**\n * NotificationIcon\n * ================\n */\n\nconst iconTypes = {\n  error: ErrorFilled,\n  success: CheckmarkFilled,\n  warning: WarningFilled,\n  ['warning-alt']: WarningAltFilled,\n  info: InformationFilled,\n  ['info-square']: InformationSquareFilled\n};\nfunction NotificationIcon(_ref3) {\n  let {\n    iconDescription,\n    kind,\n    notificationType\n  } = _ref3;\n  const prefix = usePrefix();\n  const IconForKind = iconTypes[kind];\n  if (!IconForKind) {\n    return null;\n  }\n  return /*#__PURE__*/React__default.createElement(IconForKind, {\n    className: \"\".concat(prefix, \"--\").concat(notificationType, \"-notification__icon\"),\n    size: 20\n  }, /*#__PURE__*/React__default.createElement(\"title\", null, iconDescription));\n}\nNotificationIcon.propTypes = {\n  iconDescription: PropTypes.string.isRequired,\n  kind: PropTypes.oneOf(['error', 'success', 'warning', 'warning-alt', 'info', 'info-square']).isRequired,\n  notificationType: PropTypes.oneOf(['inline', 'toast']).isRequired\n};\n\n/**\n * ToastNotification\n * =================\n */\n\nfunction ToastNotification(_ref4) {\n  let {\n    ['aria-label']: ariaLabel,\n    // @ts-expect-error: deprecated prop\n    ariaLabel: deprecatedAriaLabel,\n    role = 'status',\n    onClose,\n    onCloseButtonClick = noopFn,\n    statusIconDescription,\n    className,\n    children,\n    kind = 'error',\n    lowContrast,\n    hideCloseButton = false,\n    timeout = 0,\n    title,\n    caption,\n    subtitle,\n    ...rest\n  } = _ref4;\n  const [isOpen, setIsOpen] = useState(true);\n  const prefix = usePrefix();\n  const containerClassName = cx(className, {\n    [\"\".concat(prefix, \"--toast-notification\")]: true,\n    [\"\".concat(prefix, \"--toast-notification--low-contrast\")]: lowContrast,\n    [\"\".concat(prefix, \"--toast-notification--\").concat(kind)]: kind\n  });\n  const contentRef = useRef(null);\n  useNoInteractiveChildren(contentRef);\n  const handleClose = evt => {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n  const ref = useRef(null);\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n  const savedOnClose = useRef(onClose);\n  useEffect(() => {\n    savedOnClose.current = onClose;\n  });\n  useEffect(() => {\n    if (!timeout) {\n      return;\n    }\n    const timeoutId = window.setTimeout(event => {\n      setIsOpen(false);\n      if (savedOnClose.current) {\n        savedOnClose.current(event);\n      }\n    }, timeout);\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [timeout]);\n  if (!isOpen) {\n    return null;\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    role: role,\n    className: containerClassName\n  }), /*#__PURE__*/React__default.createElement(NotificationIcon, {\n    notificationType: \"toast\",\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    ref: contentRef,\n    className: \"\".concat(prefix, \"--toast-notification__details\")\n  }, title && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: \"\".concat(prefix, \"--toast-notification__title\")\n  }, title), subtitle && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: \"\".concat(prefix, \"--toast-notification__subtitle\")\n  }, subtitle), caption && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: \"\".concat(prefix, \"--toast-notification__caption\")\n  }, caption), children), !hideCloseButton && /*#__PURE__*/React__default.createElement(NotificationButton, {\n    notificationType: \"toast\",\n    onClick: handleCloseButtonClick,\n    \"aria-hidden\": \"true\",\n    \"aria-label\": deprecatedAriaLabel || ariaLabel,\n    tabIndex: -1\n  }));\n}\nToastNotification.propTypes = {\n  /**\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  ['aria-label']: PropTypes.string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  ariaLabel: deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * Specify the caption\n   */\n  caption: PropTypes.string,\n  /**\n   * Specify the content\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']),\n  /**\n   * Specify whether you are using the low contrast variant of the ToastNotification.\n   */\n  lowContrast: PropTypes.bool,\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n  /**\n   * By default, this value is \"status\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side\n   */\n  role: PropTypes.oneOf(['alert', 'log', 'status']),\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n  /**\n   * Specify the subtitle\n   */\n  subtitle: PropTypes.string,\n  /**\n   * Specify an optional duration the notification should be closed in\n   */\n  timeout: PropTypes.number,\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string\n};\n\n/**\n * InlineNotification\n * ==================\n */\n\nfunction InlineNotification(_ref5) {\n  let {\n    ['aria-label']: ariaLabel,\n    children,\n    title,\n    subtitle,\n    role = 'status',\n    onClose,\n    onCloseButtonClick = noopFn,\n    statusIconDescription,\n    className,\n    kind = 'error',\n    lowContrast,\n    hideCloseButton = false,\n    ...rest\n  } = _ref5;\n  const [isOpen, setIsOpen] = useState(true);\n  const prefix = usePrefix();\n  const containerClassName = cx(className, {\n    [\"\".concat(prefix, \"--inline-notification\")]: true,\n    [\"\".concat(prefix, \"--inline-notification--low-contrast\")]: lowContrast,\n    [\"\".concat(prefix, \"--inline-notification--\").concat(kind)]: kind,\n    [\"\".concat(prefix, \"--inline-notification--hide-close-button\")]: hideCloseButton\n  });\n  const contentRef = useRef(null);\n  useNoInteractiveChildren(contentRef);\n  const handleClose = evt => {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n  const ref = useRef(null);\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n  if (!isOpen) {\n    return null;\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    role: role,\n    className: containerClassName\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--inline-notification__details\")\n  }, /*#__PURE__*/React__default.createElement(NotificationIcon, {\n    notificationType: \"inline\",\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    ref: contentRef,\n    className: \"\".concat(prefix, \"--inline-notification__text-wrapper\")\n  }, title && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: \"\".concat(prefix, \"--inline-notification__title\")\n  }, title), subtitle && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: \"\".concat(prefix, \"--inline-notification__subtitle\")\n  }, subtitle), children)), !hideCloseButton && /*#__PURE__*/React__default.createElement(NotificationButton, {\n    notificationType: \"inline\",\n    onClick: handleCloseButtonClick,\n    \"aria-hidden\": \"true\",\n    \"aria-label\": ariaLabel,\n    tabIndex: -1\n  }));\n}\nInlineNotification.propTypes = {\n  /**\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  ['aria-label']: PropTypes.string,\n  /**\n   * Specify the content\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']),\n  /**\n   * Specify whether you are using the low contrast variant of the InlineNotification.\n   */\n  lowContrast: PropTypes.bool,\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n  /**\n   * By default, this value is \"status\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side.\n   */\n  role: PropTypes.oneOf(['alert', 'log', 'status']),\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n  /**\n   * Specify the subtitle\n   */\n  subtitle: PropTypes.string,\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string\n};\n\n/**\n * ActionableNotification\n * ======================\n */\n\nfunction ActionableNotification(_ref6) {\n  let {\n    actionButtonLabel,\n    ['aria-label']: ariaLabel,\n    // @ts-expect-error: deprecated prop\n    ariaLabel: deprecatedAriaLabel,\n    children,\n    role = 'alertdialog',\n    onActionButtonClick,\n    onClose,\n    onCloseButtonClick = noopFn,\n    statusIconDescription,\n    className,\n    inline = false,\n    kind = 'error',\n    lowContrast,\n    hideCloseButton = false,\n    hasFocus = true,\n    closeOnEscape = true,\n    title,\n    subtitle,\n    ...rest\n  } = _ref6;\n  const [isOpen, setIsOpen] = useState(true);\n  const prefix = usePrefix();\n  const id = useId('actionable-notification');\n  const subtitleId = useId('actionable-notification-subtitle');\n  const containerClassName = cx(className, {\n    [\"\".concat(prefix, \"--actionable-notification\")]: true,\n    [\"\".concat(prefix, \"--actionable-notification--toast\")]: !inline,\n    [\"\".concat(prefix, \"--actionable-notification--low-contrast\")]: lowContrast,\n    [\"\".concat(prefix, \"--actionable-notification--\").concat(kind)]: kind,\n    [\"\".concat(prefix, \"--actionable-notification--hide-close-button\")]: hideCloseButton\n  });\n  const innerModal = useRef(null);\n  const startTrap = useRef(null);\n  const endTrap = useRef(null);\n  const ref = useRef(null);\n  const focusTrapWithoutSentinels = useFeatureFlag('enable-experimental-focus-wrap-without-sentinels');\n  useIsomorphicEffect(() => {\n    if (hasFocus) {\n      const button = document.querySelector('button.cds--actionable-notification__action-button');\n      button === null || button === void 0 || button.focus();\n    }\n  });\n  function handleBlur(_ref7) {\n    let {\n      target: oldActiveNode,\n      relatedTarget: currentActiveNode\n    } = _ref7;\n    if (isOpen && currentActiveNode && oldActiveNode) {\n      const {\n        current: bodyNode\n      } = innerModal;\n      const {\n        current: startTrapNode\n      } = startTrap;\n      const {\n        current: endTrapNode\n      } = endTrap;\n      wrapFocus({\n        bodyNode,\n        startTrapNode,\n        endTrapNode,\n        currentActiveNode,\n        oldActiveNode\n      });\n    }\n  }\n  function handleKeyDown(event) {\n    if (isOpen && match(event, Tab) && ref.current) {\n      wrapFocusWithoutSentinels({\n        containerNode: ref.current,\n        currentActiveNode: event.target,\n        event\n      });\n    }\n  }\n  const handleClose = evt => {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n  useEscapeToClose(ref, handleCloseButtonClick, closeOnEscape);\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n  if (!isOpen) {\n    return null;\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({}, rest, {\n    ref: ref,\n    role: role,\n    className: containerClassName,\n    \"aria-labelledby\": title ? id : subtitleId,\n    onBlur: !focusTrapWithoutSentinels ? handleBlur : () => {},\n    onKeyDown: focusTrapWithoutSentinels ? handleKeyDown : () => {}\n  }), !focusTrapWithoutSentinels && /*#__PURE__*/React__default.createElement(\"span\", {\n    ref: startTrap,\n    tabIndex: 0,\n    role: \"link\",\n    className: \"\".concat(prefix, \"--visually-hidden\")\n  }, \"Focus sentinel\"), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--actionable-notification__details\")\n  }, /*#__PURE__*/React__default.createElement(NotificationIcon, {\n    notificationType: inline ? 'inline' : 'toast',\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--actionable-notification__text-wrapper\")\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--actionable-notification__content\")\n  }, title && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: \"\".concat(prefix, \"--actionable-notification__title\"),\n    id: id\n  }, title), subtitle && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: \"\".concat(prefix, \"--actionable-notification__subtitle\"),\n    id: subtitleId\n  }, subtitle), children))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--actionable-notification__button-wrapper\"),\n    ref: innerModal\n  }, actionButtonLabel && /*#__PURE__*/React__default.createElement(NotificationActionButton, {\n    onClick: onActionButtonClick,\n    inline: inline\n  }, actionButtonLabel), !hideCloseButton && /*#__PURE__*/React__default.createElement(NotificationButton, {\n    \"aria-label\": deprecatedAriaLabel || ariaLabel,\n    notificationType: \"actionable\",\n    onClick: handleCloseButtonClick\n  })), !focusTrapWithoutSentinels && /*#__PURE__*/React__default.createElement(\"span\", {\n    ref: endTrap,\n    tabIndex: 0,\n    role: \"link\",\n    className: \"\".concat(prefix, \"--visually-hidden\")\n  }, \"Focus sentinel\"));\n}\nActionableNotification.propTypes = {\n  /**\n   * Pass in the action button label that will be rendered within the ActionableNotification.\n   */\n  actionButtonLabel: PropTypes.string,\n  /**\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  ['aria-label']: PropTypes.string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  ariaLabel: deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * Specify the content\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n  /**\n   * Specify if pressing the escape key should close notifications\n   */\n  closeOnEscape: PropTypes.bool,\n  /**\n   * Deprecated, please use StaticNotification once it's available. Issue #15532\n   * Specify if focus should be moved to the component when the notification contains actions\n   */\n  hasFocus: deprecate(PropTypes.bool),\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n  /*\n   * Specify if the notification should have inline styling applied instead of toast\n   */\n  inline: PropTypes.bool,\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']),\n  /**\n   * Specify whether you are using the low contrast variant of the ActionableNotification.\n   */\n  lowContrast: PropTypes.bool,\n  /**\n   * Provide a function that is called when the action is clicked\n   */\n  onActionButtonClick: PropTypes.func,\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n  /**\n   * By default, this value is \"alertdialog\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side.\n   */\n  role: PropTypes.string,\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n  /**\n   * Specify the subtitle\n   */\n  subtitle: PropTypes.node,\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string\n};\n\n/**\n * StaticNotification\n * ==================\n */\n\nfunction StaticNotification(_ref8) {\n  let {\n    actionButtonLabel,\n    children,\n    onActionButtonClick,\n    title,\n    titleId,\n    subtitle,\n    statusIconDescription,\n    className,\n    kind = 'error',\n    lowContrast,\n    ...rest\n  } = _ref8;\n  const prefix = usePrefix();\n  const containerClassName = cx(className, {\n    [\"\".concat(prefix, \"--actionable-notification\")]: true,\n    [\"\".concat(prefix, \"--actionable-notification--low-contrast\")]: lowContrast,\n    [\"\".concat(prefix, \"--actionable-notification--\").concat(kind)]: kind,\n    [\"\".concat(prefix, \"--actionable-notification--hide-close-button\")]: true\n  });\n  const ref = useRef(null);\n  useInteractiveChildrenNeedDescription(ref, \"interactive child node(s) should have an `aria-describedby` property with a value matching the value of `titleId`\");\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    className: containerClassName\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--actionable-notification__details\")\n  }, /*#__PURE__*/React__default.createElement(NotificationIcon, {\n    notificationType: \"inline\",\n    kind: kind,\n    iconDescription: statusIconDescription || \"\".concat(kind, \" icon\")\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--actionable-notification__text-wrapper\")\n  }, title && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    id: titleId,\n    className: \"\".concat(prefix, \"--actionable-notification__title\")\n  }, title), subtitle && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: \"\".concat(prefix, \"--actionable-notification__subtitle\")\n  }, subtitle), children)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--actionable-notification__button-wrapper\")\n  }, actionButtonLabel && /*#__PURE__*/React__default.createElement(NotificationActionButton, {\n    onClick: onActionButtonClick,\n    \"aria-describedby\": titleId,\n    inline: true\n  }, actionButtonLabel)));\n}\nStaticNotification.propTypes = {\n  /**\n   * Pass in the action button label that will be rendered within the ActionableNotification.\n   */\n  actionButtonLabel: PropTypes.string,\n  /**\n   * Specify the content\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']),\n  /**\n   * Specify whether you are using the low contrast variant of the StaticNotification.\n   */\n  lowContrast: PropTypes.bool,\n  /**\n   * Provide a function that is called when the action is clicked\n   */\n  onActionButtonClick: PropTypes.func,\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n  /**\n   * Specify the subtitle\n   */\n  subtitle: PropTypes.node,\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string,\n  /**\n   * Specify the id for the element containing the title\n   */\n  titleId: PropTypes.string\n};\nexport { ActionableNotification, InlineNotification, NotificationActionButton, NotificationButton, StaticNotification, ToastNotification };","map":{"version":3,"names":["extends","_extends","PropTypes","React__default","useState","useRef","useEffect","deprecate","cx","Close","ErrorFilled","CheckmarkFilled","WarningFilled","WarningAltFilled","InformationFilled","InformationSquareFilled","Button","useIsomorphicEffect","useNoInteractiveChildren","useInteractiveChildrenNeedDescription","usePrefix","useId","noopFn","wrapFocus","wrapFocusWithoutSentinels","useFeatureFlag","Text","match","matches","Tab","Escape","useEscapeToClose","ref","callback","override","arguments","length","undefined","handleKeyDown","event","elementContainsFocus","current","document","activeElement","contains","addEventListener","removeEventListener","NotificationActionButton","_ref","children","className","customClassName","onClick","inline","rest","prefix","concat","createElement","kind","size","propTypes","node","string","bool","func","NotificationButton","_ref2","ariaLabel","deprecatedAriaLabel","type","renderIcon","IconTag","name","notificationType","buttonClassName","iconClassName","title","oneOf","oneOfType","object","iconTypes","error","success","warning","info","NotificationIcon","_ref3","iconDescription","IconForKind","isRequired","ToastNotification","_ref4","role","onClose","onCloseButtonClick","statusIconDescription","lowContrast","hideCloseButton","timeout","caption","subtitle","isOpen","setIsOpen","containerClassName","contentRef","handleClose","evt","handleCloseButtonClick","savedOnClose","timeoutId","window","setTimeout","clearTimeout","as","tabIndex","number","InlineNotification","_ref5","ActionableNotification","_ref6","actionButtonLabel","onActionButtonClick","hasFocus","closeOnEscape","id","subtitleId","innerModal","startTrap","endTrap","focusTrapWithoutSentinels","button","querySelector","focus","handleBlur","_ref7","target","oldActiveNode","relatedTarget","currentActiveNode","bodyNode","startTrapNode","endTrapNode","containerNode","onBlur","onKeyDown","StaticNotification","_ref8","titleId"],"sources":["/Users/davidguan/Local Sites/e/app/public/wp-content/plugins/drhaiel/ls_uhcc_bot_fe/node_modules/@carbon/react/es/components/Notification/Notification.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default, { useState, useRef, useEffect } from 'react';\nimport deprecate from '../../prop-types/deprecate.js';\nimport cx from 'classnames';\nimport { Close, ErrorFilled, CheckmarkFilled, WarningFilled, WarningAltFilled, InformationFilled, InformationSquareFilled } from '@carbon/icons-react';\nimport '../Text/index.js';\nimport Button from '../Button/Button.js';\nimport '../Button/Button.Skeleton.js';\nimport useIsomorphicEffect from '../../internal/useIsomorphicEffect.js';\nimport { useNoInteractiveChildren, useInteractiveChildrenNeedDescription } from '../../internal/useNoInteractiveChildren.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { useId } from '../../internal/useId.js';\nimport { noopFn } from '../../internal/noopFn.js';\nimport wrapFocus, { wrapFocusWithoutSentinels } from '../../internal/wrapFocus.js';\nimport { useFeatureFlag } from '../FeatureFlags/index.js';\nimport { Text } from '../Text/Text.js';\nimport { match, matches } from '../../internal/keyboard/match.js';\nimport { Tab, Escape } from '../../internal/keyboard/keys.js';\n\n/**\n * Conditionally call a callback when the escape key is pressed\n * @param {node} ref - ref of the container element to scope the functionality to\n * @param {func} callback - function to be called\n * @param {bool} override - escape hatch to conditionally call the callback\n */\nfunction useEscapeToClose(ref, callback) {\n  let override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const handleKeyDown = event => {\n    // The callback should only be called when focus is on or within the container\n    const elementContainsFocus = ref.current && document.activeElement === ref.current || ref.current.contains(document.activeElement);\n    if (matches(event, [Escape]) && override && elementContainsFocus) {\n      callback(event);\n    }\n  };\n  useIsomorphicEffect(() => {\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => document.removeEventListener('keydown', handleKeyDown, false);\n  });\n}\nfunction NotificationActionButton(_ref) {\n  let {\n    children,\n    className: customClassName,\n    onClick,\n    inline,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx(customClassName, {\n    [`${prefix}--actionable-notification__action-button`]: true\n  });\n  return /*#__PURE__*/React__default.createElement(Button, _extends({\n    className: className,\n    kind: inline ? 'ghost' : 'tertiary',\n    onClick: onClick,\n    size: \"sm\"\n  }, rest), children);\n}\nNotificationActionButton.propTypes = {\n  /**\n   * Specify the content of the notification action button.\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the notification action button\n   */\n  className: PropTypes.string,\n  /**\n   * Specify if the visual treatment of the button should be for an inline notification\n   */\n  inline: PropTypes.bool,\n  /**\n   * Optionally specify a click handler for the notification action button.\n   */\n  onClick: PropTypes.func\n};\n\n/**\n * NotificationButton\n * ==================\n */\n\nfunction NotificationButton(_ref2) {\n  let {\n    'aria-label': ariaLabel = 'close notification',\n    ariaLabel: deprecatedAriaLabel,\n    className,\n    type = 'button',\n    renderIcon: IconTag = Close,\n    name,\n    notificationType = 'toast',\n    ...rest\n  } = _ref2;\n  const prefix = usePrefix();\n  const buttonClassName = cx(className, {\n    [`${prefix}--${notificationType}-notification__close-button`]: notificationType\n  });\n  const iconClassName = cx({\n    [`${prefix}--${notificationType}-notification__close-icon`]: notificationType\n  });\n  return /*#__PURE__*/React__default.createElement(\"button\", _extends({}, rest, {\n    // eslint-disable-next-line react/button-has-type\n    type: type,\n    \"aria-label\": deprecatedAriaLabel || ariaLabel,\n    title: deprecatedAriaLabel || ariaLabel,\n    className: buttonClassName\n  }), IconTag && /*#__PURE__*/React__default.createElement(IconTag, {\n    className: iconClassName,\n    name: name\n  }));\n}\nNotificationButton.propTypes = {\n  /**\n   * Specify a label to be read by screen readers on the container node\n   */\n  ['aria-label']: PropTypes.string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Specify a label to be read by screen readers on the container note.\n   */\n  ariaLabel: deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * Specify an optional className to be applied to the notification button\n   */\n  className: PropTypes.string,\n  /**\n   * Specify an optional icon for the Button through a string,\n   * if something but regular \"close\" icon is desirable\n   */\n  name: PropTypes.string,\n  /**\n   * Specify the notification type\n   */\n  notificationType: PropTypes.oneOf(['toast', 'inline', 'actionable']),\n  /**\n   * Optional prop to allow overriding the icon rendering.\n   * Can be a React component class\n   */\n  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  /**\n   * Optional prop to specify the type of the Button\n   */\n  type: PropTypes.string\n};\n\n/**\n * NotificationIcon\n * ================\n */\n\nconst iconTypes = {\n  error: ErrorFilled,\n  success: CheckmarkFilled,\n  warning: WarningFilled,\n  ['warning-alt']: WarningAltFilled,\n  info: InformationFilled,\n  ['info-square']: InformationSquareFilled\n};\nfunction NotificationIcon(_ref3) {\n  let {\n    iconDescription,\n    kind,\n    notificationType\n  } = _ref3;\n  const prefix = usePrefix();\n  const IconForKind = iconTypes[kind];\n  if (!IconForKind) {\n    return null;\n  }\n  return /*#__PURE__*/React__default.createElement(IconForKind, {\n    className: `${prefix}--${notificationType}-notification__icon`,\n    size: 20\n  }, /*#__PURE__*/React__default.createElement(\"title\", null, iconDescription));\n}\nNotificationIcon.propTypes = {\n  iconDescription: PropTypes.string.isRequired,\n  kind: PropTypes.oneOf(['error', 'success', 'warning', 'warning-alt', 'info', 'info-square']).isRequired,\n  notificationType: PropTypes.oneOf(['inline', 'toast']).isRequired\n};\n\n/**\n * ToastNotification\n * =================\n */\n\nfunction ToastNotification(_ref4) {\n  let {\n    ['aria-label']: ariaLabel,\n    // @ts-expect-error: deprecated prop\n    ariaLabel: deprecatedAriaLabel,\n    role = 'status',\n    onClose,\n    onCloseButtonClick = noopFn,\n    statusIconDescription,\n    className,\n    children,\n    kind = 'error',\n    lowContrast,\n    hideCloseButton = false,\n    timeout = 0,\n    title,\n    caption,\n    subtitle,\n    ...rest\n  } = _ref4;\n  const [isOpen, setIsOpen] = useState(true);\n  const prefix = usePrefix();\n  const containerClassName = cx(className, {\n    [`${prefix}--toast-notification`]: true,\n    [`${prefix}--toast-notification--low-contrast`]: lowContrast,\n    [`${prefix}--toast-notification--${kind}`]: kind\n  });\n  const contentRef = useRef(null);\n  useNoInteractiveChildren(contentRef);\n  const handleClose = evt => {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n  const ref = useRef(null);\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n  const savedOnClose = useRef(onClose);\n  useEffect(() => {\n    savedOnClose.current = onClose;\n  });\n  useEffect(() => {\n    if (!timeout) {\n      return;\n    }\n    const timeoutId = window.setTimeout(event => {\n      setIsOpen(false);\n      if (savedOnClose.current) {\n        savedOnClose.current(event);\n      }\n    }, timeout);\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [timeout]);\n  if (!isOpen) {\n    return null;\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    role: role,\n    className: containerClassName\n  }), /*#__PURE__*/React__default.createElement(NotificationIcon, {\n    notificationType: \"toast\",\n    kind: kind,\n    iconDescription: statusIconDescription || `${kind} icon`\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    ref: contentRef,\n    className: `${prefix}--toast-notification__details`\n  }, title && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--toast-notification__title`\n  }, title), subtitle && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--toast-notification__subtitle`\n  }, subtitle), caption && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--toast-notification__caption`\n  }, caption), children), !hideCloseButton && /*#__PURE__*/React__default.createElement(NotificationButton, {\n    notificationType: \"toast\",\n    onClick: handleCloseButtonClick,\n    \"aria-hidden\": \"true\",\n    \"aria-label\": deprecatedAriaLabel || ariaLabel,\n    tabIndex: -1\n  }));\n}\nToastNotification.propTypes = {\n  /**\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  ['aria-label']: PropTypes.string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  ariaLabel: deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * Specify the caption\n   */\n  caption: PropTypes.string,\n  /**\n   * Specify the content\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']),\n  /**\n   * Specify whether you are using the low contrast variant of the ToastNotification.\n   */\n  lowContrast: PropTypes.bool,\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n  /**\n   * By default, this value is \"status\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side\n   */\n  role: PropTypes.oneOf(['alert', 'log', 'status']),\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n  /**\n   * Specify the subtitle\n   */\n  subtitle: PropTypes.string,\n  /**\n   * Specify an optional duration the notification should be closed in\n   */\n  timeout: PropTypes.number,\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string\n};\n\n/**\n * InlineNotification\n * ==================\n */\n\nfunction InlineNotification(_ref5) {\n  let {\n    ['aria-label']: ariaLabel,\n    children,\n    title,\n    subtitle,\n    role = 'status',\n    onClose,\n    onCloseButtonClick = noopFn,\n    statusIconDescription,\n    className,\n    kind = 'error',\n    lowContrast,\n    hideCloseButton = false,\n    ...rest\n  } = _ref5;\n  const [isOpen, setIsOpen] = useState(true);\n  const prefix = usePrefix();\n  const containerClassName = cx(className, {\n    [`${prefix}--inline-notification`]: true,\n    [`${prefix}--inline-notification--low-contrast`]: lowContrast,\n    [`${prefix}--inline-notification--${kind}`]: kind,\n    [`${prefix}--inline-notification--hide-close-button`]: hideCloseButton\n  });\n  const contentRef = useRef(null);\n  useNoInteractiveChildren(contentRef);\n  const handleClose = evt => {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n  const ref = useRef(null);\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n  if (!isOpen) {\n    return null;\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    role: role,\n    className: containerClassName\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--inline-notification__details`\n  }, /*#__PURE__*/React__default.createElement(NotificationIcon, {\n    notificationType: \"inline\",\n    kind: kind,\n    iconDescription: statusIconDescription || `${kind} icon`\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    ref: contentRef,\n    className: `${prefix}--inline-notification__text-wrapper`\n  }, title && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--inline-notification__title`\n  }, title), subtitle && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--inline-notification__subtitle`\n  }, subtitle), children)), !hideCloseButton && /*#__PURE__*/React__default.createElement(NotificationButton, {\n    notificationType: \"inline\",\n    onClick: handleCloseButtonClick,\n    \"aria-hidden\": \"true\",\n    \"aria-label\": ariaLabel,\n    tabIndex: -1\n  }));\n}\nInlineNotification.propTypes = {\n  /**\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  ['aria-label']: PropTypes.string,\n  /**\n   * Specify the content\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']),\n  /**\n   * Specify whether you are using the low contrast variant of the InlineNotification.\n   */\n  lowContrast: PropTypes.bool,\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n  /**\n   * By default, this value is \"status\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side.\n   */\n  role: PropTypes.oneOf(['alert', 'log', 'status']),\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n  /**\n   * Specify the subtitle\n   */\n  subtitle: PropTypes.string,\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string\n};\n\n/**\n * ActionableNotification\n * ======================\n */\n\nfunction ActionableNotification(_ref6) {\n  let {\n    actionButtonLabel,\n    ['aria-label']: ariaLabel,\n    // @ts-expect-error: deprecated prop\n    ariaLabel: deprecatedAriaLabel,\n    children,\n    role = 'alertdialog',\n    onActionButtonClick,\n    onClose,\n    onCloseButtonClick = noopFn,\n    statusIconDescription,\n    className,\n    inline = false,\n    kind = 'error',\n    lowContrast,\n    hideCloseButton = false,\n    hasFocus = true,\n    closeOnEscape = true,\n    title,\n    subtitle,\n    ...rest\n  } = _ref6;\n  const [isOpen, setIsOpen] = useState(true);\n  const prefix = usePrefix();\n  const id = useId('actionable-notification');\n  const subtitleId = useId('actionable-notification-subtitle');\n  const containerClassName = cx(className, {\n    [`${prefix}--actionable-notification`]: true,\n    [`${prefix}--actionable-notification--toast`]: !inline,\n    [`${prefix}--actionable-notification--low-contrast`]: lowContrast,\n    [`${prefix}--actionable-notification--${kind}`]: kind,\n    [`${prefix}--actionable-notification--hide-close-button`]: hideCloseButton\n  });\n  const innerModal = useRef(null);\n  const startTrap = useRef(null);\n  const endTrap = useRef(null);\n  const ref = useRef(null);\n  const focusTrapWithoutSentinels = useFeatureFlag('enable-experimental-focus-wrap-without-sentinels');\n  useIsomorphicEffect(() => {\n    if (hasFocus) {\n      const button = document.querySelector('button.cds--actionable-notification__action-button');\n      button?.focus();\n    }\n  });\n  function handleBlur(_ref7) {\n    let {\n      target: oldActiveNode,\n      relatedTarget: currentActiveNode\n    } = _ref7;\n    if (isOpen && currentActiveNode && oldActiveNode) {\n      const {\n        current: bodyNode\n      } = innerModal;\n      const {\n        current: startTrapNode\n      } = startTrap;\n      const {\n        current: endTrapNode\n      } = endTrap;\n      wrapFocus({\n        bodyNode,\n        startTrapNode,\n        endTrapNode,\n        currentActiveNode,\n        oldActiveNode\n      });\n    }\n  }\n  function handleKeyDown(event) {\n    if (isOpen && match(event, Tab) && ref.current) {\n      wrapFocusWithoutSentinels({\n        containerNode: ref.current,\n        currentActiveNode: event.target,\n        event\n      });\n    }\n  }\n  const handleClose = evt => {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n  useEscapeToClose(ref, handleCloseButtonClick, closeOnEscape);\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n  if (!isOpen) {\n    return null;\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({}, rest, {\n    ref: ref,\n    role: role,\n    className: containerClassName,\n    \"aria-labelledby\": title ? id : subtitleId,\n    onBlur: !focusTrapWithoutSentinels ? handleBlur : () => {},\n    onKeyDown: focusTrapWithoutSentinels ? handleKeyDown : () => {}\n  }), !focusTrapWithoutSentinels && /*#__PURE__*/React__default.createElement(\"span\", {\n    ref: startTrap,\n    tabIndex: 0,\n    role: \"link\",\n    className: `${prefix}--visually-hidden`\n  }, \"Focus sentinel\"), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--actionable-notification__details`\n  }, /*#__PURE__*/React__default.createElement(NotificationIcon, {\n    notificationType: inline ? 'inline' : 'toast',\n    kind: kind,\n    iconDescription: statusIconDescription || `${kind} icon`\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--actionable-notification__text-wrapper`\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--actionable-notification__content`\n  }, title && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--actionable-notification__title`,\n    id: id\n  }, title), subtitle && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--actionable-notification__subtitle`,\n    id: subtitleId\n  }, subtitle), children))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--actionable-notification__button-wrapper`,\n    ref: innerModal\n  }, actionButtonLabel && /*#__PURE__*/React__default.createElement(NotificationActionButton, {\n    onClick: onActionButtonClick,\n    inline: inline\n  }, actionButtonLabel), !hideCloseButton && /*#__PURE__*/React__default.createElement(NotificationButton, {\n    \"aria-label\": deprecatedAriaLabel || ariaLabel,\n    notificationType: \"actionable\",\n    onClick: handleCloseButtonClick\n  })), !focusTrapWithoutSentinels && /*#__PURE__*/React__default.createElement(\"span\", {\n    ref: endTrap,\n    tabIndex: 0,\n    role: \"link\",\n    className: `${prefix}--visually-hidden`\n  }, \"Focus sentinel\"));\n}\nActionableNotification.propTypes = {\n  /**\n   * Pass in the action button label that will be rendered within the ActionableNotification.\n   */\n  actionButtonLabel: PropTypes.string,\n  /**\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  ['aria-label']: PropTypes.string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  ariaLabel: deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * Specify the content\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n  /**\n   * Specify if pressing the escape key should close notifications\n   */\n  closeOnEscape: PropTypes.bool,\n  /**\n   * Deprecated, please use StaticNotification once it's available. Issue #15532\n   * Specify if focus should be moved to the component when the notification contains actions\n   */\n  hasFocus: deprecate(PropTypes.bool),\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n  /*\n   * Specify if the notification should have inline styling applied instead of toast\n   */\n  inline: PropTypes.bool,\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']),\n  /**\n   * Specify whether you are using the low contrast variant of the ActionableNotification.\n   */\n  lowContrast: PropTypes.bool,\n  /**\n   * Provide a function that is called when the action is clicked\n   */\n  onActionButtonClick: PropTypes.func,\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: PropTypes.func,\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: PropTypes.func,\n  /**\n   * By default, this value is \"alertdialog\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side.\n   */\n  role: PropTypes.string,\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n  /**\n   * Specify the subtitle\n   */\n  subtitle: PropTypes.node,\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string\n};\n\n/**\n * StaticNotification\n * ==================\n */\n\nfunction StaticNotification(_ref8) {\n  let {\n    actionButtonLabel,\n    children,\n    onActionButtonClick,\n    title,\n    titleId,\n    subtitle,\n    statusIconDescription,\n    className,\n    kind = 'error',\n    lowContrast,\n    ...rest\n  } = _ref8;\n  const prefix = usePrefix();\n  const containerClassName = cx(className, {\n    [`${prefix}--actionable-notification`]: true,\n    [`${prefix}--actionable-notification--low-contrast`]: lowContrast,\n    [`${prefix}--actionable-notification--${kind}`]: kind,\n    [`${prefix}--actionable-notification--hide-close-button`]: true\n  });\n  const ref = useRef(null);\n  useInteractiveChildrenNeedDescription(ref, `interactive child node(s) should have an \\`aria-describedby\\` property with a value matching the value of \\`titleId\\``);\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    className: containerClassName\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--actionable-notification__details`\n  }, /*#__PURE__*/React__default.createElement(NotificationIcon, {\n    notificationType: \"inline\",\n    kind: kind,\n    iconDescription: statusIconDescription || `${kind} icon`\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--actionable-notification__text-wrapper`\n  }, title && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    id: titleId,\n    className: `${prefix}--actionable-notification__title`\n  }, title), subtitle && /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--actionable-notification__subtitle`\n  }, subtitle), children)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--actionable-notification__button-wrapper`\n  }, actionButtonLabel && /*#__PURE__*/React__default.createElement(NotificationActionButton, {\n    onClick: onActionButtonClick,\n    \"aria-describedby\": titleId,\n    inline: true\n  }, actionButtonLabel)));\n}\nStaticNotification.propTypes = {\n  /**\n   * Pass in the action button label that will be rendered within the ActionableNotification.\n   */\n  actionButtonLabel: PropTypes.string,\n  /**\n   * Specify the content\n   */\n  children: PropTypes.node,\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']),\n  /**\n   * Specify whether you are using the low contrast variant of the StaticNotification.\n   */\n  lowContrast: PropTypes.bool,\n  /**\n   * Provide a function that is called when the action is clicked\n   */\n  onActionButtonClick: PropTypes.func,\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: PropTypes.string,\n  /**\n   * Specify the subtitle\n   */\n  subtitle: PropTypes.node,\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string,\n  /**\n   * Specify the id for the element containing the title\n   */\n  titleId: PropTypes.string\n};\n\nexport { ActionableNotification, InlineNotification, NotificationActionButton, NotificationButton, StaticNotification, ToastNotification };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}