{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport PropTypes from 'prop-types';\nimport React__default, { useState, useContext, useRef, useEffect } from 'react';\nimport cx from 'classnames';\nimport { useNormalizedInputProps } from '../../internal/useNormalizedInputProps.js';\nimport PasswordInput from './PasswordInput.js';\nimport ControlledPasswordInput from './ControlledPasswordInput.js';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { textInputProps } from './util.js';\nimport '../FluidForm/FluidForm.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { useAnnouncer } from '../../internal/useAnnouncer.js';\nimport '../Text/index.js';\nimport { Text } from '../Text/Text.js';\nconst TextInput = /*#__PURE__*/React__default.forwardRef(function TextInput(_ref, ref) {\n  var _slug$type;\n  let {\n    className,\n    disabled = false,\n    helperText,\n    hideLabel,\n    id,\n    inline = false,\n    invalid = false,\n    invalidText,\n    labelText,\n    light,\n    onChange = () => {},\n    onClick = () => {},\n    placeholder,\n    readOnly,\n    size,\n    type = 'text',\n    warn = false,\n    warnText,\n    enableCounter = false,\n    maxCount,\n    slug,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const {\n    defaultValue,\n    value\n  } = rest;\n  const [textCount, setTextCount] = useState((defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.toString().length) || (value === null || value === void 0 ? void 0 : value.toString().length) || 0);\n  const normalizedProps = useNormalizedInputProps({\n    id,\n    readOnly,\n    disabled,\n    invalid,\n    invalidText,\n    warn,\n    warnText\n  });\n  const textInputClasses = cx(\"\".concat(prefix, \"--text-input\"), {\n    [\"\".concat(prefix, \"--text-input--light\")]: light,\n    [\"\".concat(prefix, \"--text-input--invalid\")]: normalizedProps.invalid,\n    [\"\".concat(prefix, \"--text-input--warning\")]: normalizedProps.warn,\n    [\"\".concat(prefix, \"--text-input--\").concat(size)]: size,\n    // TODO: V12 - Remove this class\n    [\"\".concat(prefix, \"--layout--size-\").concat(size)]: size\n  });\n  const sharedTextInputProps = {\n    id,\n    onChange: evt => {\n      if (!normalizedProps.disabled) {\n        var _evt$target$value;\n        setTextCount((_evt$target$value = evt.target.value) === null || _evt$target$value === void 0 ? void 0 : _evt$target$value.length);\n        onChange(evt);\n      }\n    },\n    onClick: evt => {\n      if (!normalizedProps.disabled) {\n        onClick(evt);\n      }\n    },\n    placeholder,\n    type,\n    ref,\n    className: textInputClasses,\n    title: placeholder,\n    disabled: normalizedProps.disabled,\n    readOnly,\n    ['aria-describedby']: helperText && normalizedProps.helperId,\n    ...rest\n  };\n  if (enableCounter) {\n    sharedTextInputProps.maxLength = maxCount;\n  }\n  const inputWrapperClasses = cx([cx(\"\".concat(prefix, \"--form-item\"), className)], \"\".concat(prefix, \"--text-input-wrapper\"), {\n    [\"\".concat(prefix, \"--text-input-wrapper--readonly\")]: readOnly,\n    [\"\".concat(prefix, \"--text-input-wrapper--light\")]: light,\n    [\"\".concat(prefix, \"--text-input-wrapper--inline\")]: inline,\n    [\"\".concat(prefix, \"--text-input-wrapper--inline--invalid\")]: inline && normalizedProps.invalid\n  });\n  const labelClasses = cx(\"\".concat(prefix, \"--label\"), {\n    [\"\".concat(prefix, \"--visually-hidden\")]: hideLabel,\n    [\"\".concat(prefix, \"--label--disabled\")]: normalizedProps.disabled,\n    [\"\".concat(prefix, \"--label--inline\")]: inline,\n    [\"\".concat(prefix, \"--label--inline--\").concat(size)]: inline && !!size\n  });\n  const helperTextClasses = cx(\"\".concat(prefix, \"--form__helper-text\"), {\n    [\"\".concat(prefix, \"--form__helper-text--disabled\")]: normalizedProps.disabled,\n    [\"\".concat(prefix, \"--form__helper-text--inline\")]: inline\n  });\n  const fieldOuterWrapperClasses = cx(\"\".concat(prefix, \"--text-input__field-outer-wrapper\"), {\n    [\"\".concat(prefix, \"--text-input__field-outer-wrapper--inline\")]: inline\n  });\n  const fieldWrapperClasses = cx(\"\".concat(prefix, \"--text-input__field-wrapper\"), {\n    [\"\".concat(prefix, \"--text-input__field-wrapper--warning\")]: normalizedProps.warn,\n    [\"\".concat(prefix, \"--text-input__field-wrapper--slug\")]: slug\n  });\n  const iconClasses = cx({\n    [\"\".concat(prefix, \"--text-input__invalid-icon\")]: normalizedProps.invalid || normalizedProps.warn,\n    [\"\".concat(prefix, \"--text-input__invalid-icon--warning\")]: normalizedProps.warn\n  });\n  const counterClasses = cx(\"\".concat(prefix, \"--label\"), {\n    [\"\".concat(prefix, \"--label--disabled\")]: disabled,\n    [\"\".concat(prefix, \"--text-input__label-counter\")]: true\n  });\n  const counter = enableCounter && maxCount ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: counterClasses\n  }, \"\".concat(textCount, \"/\").concat(maxCount)) : null;\n  const label = labelText ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"label\",\n    htmlFor: id,\n    className: labelClasses\n  }, labelText) : null;\n  const labelWrapper = /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--text-input__label-wrapper\")\n  }, label, counter);\n  const helper = helperText ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    id: normalizedProps.helperId,\n    className: helperTextClasses\n  }, helperText) : null;\n  const input = /*#__PURE__*/React__default.createElement(\"input\", textInputProps({\n    sharedTextInputProps,\n    invalid: normalizedProps.invalid,\n    invalidId: normalizedProps.invalidId,\n    warn: normalizedProps.warn,\n    warnId: normalizedProps.warnId\n  }));\n  const {\n    isFluid\n  } = useContext(FormContext);\n  const announcerRef = useRef(null);\n  const [prevAnnouncement, setPrevAnnouncement] = useState('');\n  const ariaAnnouncement = useAnnouncer(textCount, maxCount);\n  useEffect(() => {\n    if (ariaAnnouncement && ariaAnnouncement !== prevAnnouncement) {\n      const announcer = announcerRef.current;\n      if (announcer) {\n        // Clear the content first\n        announcer.textContent = '';\n        // Set the new content after a small delay\n        const timeoutId = setTimeout(() => {\n          if (announcer) {\n            announcer.textContent = ariaAnnouncement;\n            setPrevAnnouncement(ariaAnnouncement);\n          }\n        }, 1000);\n        // clear the timeout\n        return () => {\n          if (timeoutId) {\n            clearTimeout(timeoutId);\n          }\n        };\n      }\n    }\n  }, [ariaAnnouncement, prevAnnouncement]);\n  const Icon = normalizedProps.icon;\n\n  // Slug is always size `mini`\n  let normalizedSlug;\n  if (slug && ((_slug$type = slug['type']) === null || _slug$type === void 0 ? void 0 : _slug$type.displayName) === 'Slug') {\n    normalizedSlug = /*#__PURE__*/React__default.cloneElement(slug, {\n      size: 'mini'\n    });\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: inputWrapperClasses\n  }, !inline ? labelWrapper : /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--text-input__label-helper-wrapper\")\n  }, labelWrapper, !isFluid && (normalizedProps.validation || helper)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: fieldOuterWrapperClasses\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: fieldWrapperClasses,\n    \"data-invalid\": normalizedProps.invalid || null\n  }, Icon && /*#__PURE__*/React__default.createElement(Icon, {\n    className: iconClasses\n  }), input, normalizedSlug, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--text-input__counter-alert\"),\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\",\n    ref: announcerRef\n  }, ariaAnnouncement), isFluid && /*#__PURE__*/React__default.createElement(\"hr\", {\n    className: \"\".concat(prefix, \"--text-input__divider\")\n  }), isFluid && !inline && normalizedProps.validation), !isFluid && !inline && (normalizedProps.validation || helper)));\n});\nTextInput.displayName = 'TextInput';\nTextInput.PasswordInput = PasswordInput;\nTextInput.ControlledPasswordInput = ControlledPasswordInput;\nTextInput.propTypes = {\n  /**\n   * Specify an optional className to be applied to the `<input>` node\n   */\n  className: PropTypes.string,\n  /**\n   * Optionally provide the default value of the `<input>`\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify whether the `<input>` should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify whether to display the character counter\n   */\n  enableCounter: PropTypes.bool,\n  /**\n   * Provide text that is used alongside the control label for additional help\n   */\n  helperText: PropTypes.node,\n  /**\n   * Specify whether you want the underlying label to be visually hidden\n   */\n  hideLabel: PropTypes.bool,\n  /**\n   * Specify a custom `id` for the `<input>`\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * `true` to use the inline version.\n   */\n  inline: PropTypes.bool,\n  /**\n   * Specify whether the control is currently invalid\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Provide the text that will be read by a screen reader when visiting this\n   * control\n   */\n  labelText: PropTypes.node.isRequired,\n  /**\n   * `true` to use the light version. For use on $ui-01 backgrounds only.\n   * Don't use this to make tile background color same as container background color.\n   */\n  light: deprecate(PropTypes.bool, 'The `light` prop for `TextInput` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * Max character count allowed for the input. This is needed in order for enableCounter to display\n   */\n  maxCount: PropTypes.number,\n  /**\n   * Optionally provide an `onChange` handler that is called whenever `<input>`\n   * is updated\n   */\n  onChange: PropTypes.func,\n  /**\n   * Optionally provide an `onClick` handler that is called whenever the\n   * `<input>` is clicked\n   */\n  onClick: PropTypes.func,\n  /**\n   * Specify the placeholder attribute for the `<input>`\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Whether the input should be read-only\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Specify the size of the Text Input. Currently supports the following:\n   */\n  size: PropTypes.oneOf(['sm', 'md', 'lg']),\n  /**\n   * **Experimental**: Provide a `Slug` component to be rendered inside the `TextInput` component\n   */\n  slug: PropTypes.node,\n  /**\n   * Specify the type of the `<input>`\n   */\n  type: PropTypes.string,\n  /**\n   * Specify the value of the `<input>`\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\nexport { TextInput as default };","map":{"version":3,"names":["PropTypes","React__default","useState","useContext","useRef","useEffect","cx","useNormalizedInputProps","PasswordInput","ControlledPasswordInput","deprecate","textInputProps","FormContext","usePrefix","useAnnouncer","Text","TextInput","forwardRef","_ref","ref","_slug$type","className","disabled","helperText","hideLabel","id","inline","invalid","invalidText","labelText","light","onChange","onClick","placeholder","readOnly","size","type","warn","warnText","enableCounter","maxCount","slug","rest","prefix","defaultValue","value","textCount","setTextCount","toString","length","normalizedProps","textInputClasses","concat","sharedTextInputProps","evt","_evt$target$value","target","title","helperId","maxLength","inputWrapperClasses","labelClasses","helperTextClasses","fieldOuterWrapperClasses","fieldWrapperClasses","iconClasses","counterClasses","counter","createElement","as","label","htmlFor","labelWrapper","helper","input","invalidId","warnId","isFluid","announcerRef","prevAnnouncement","setPrevAnnouncement","ariaAnnouncement","announcer","current","textContent","timeoutId","setTimeout","clearTimeout","Icon","icon","normalizedSlug","displayName","cloneElement","validation","role","propTypes","string","oneOfType","number","bool","node","isRequired","func","oneOf","default"],"sources":["/Users/davidguan/Local Sites/e/app/public/wp-content/plugins/drhaiel/ls_uhcc_bot_fe/node_modules/@carbon/react/es/components/TextInput/TextInput.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport PropTypes from 'prop-types';\nimport React__default, { useState, useContext, useRef, useEffect } from 'react';\nimport cx from 'classnames';\nimport { useNormalizedInputProps } from '../../internal/useNormalizedInputProps.js';\nimport PasswordInput from './PasswordInput.js';\nimport ControlledPasswordInput from './ControlledPasswordInput.js';\nimport deprecate from '../../prop-types/deprecate.js';\nimport { textInputProps } from './util.js';\nimport '../FluidForm/FluidForm.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { useAnnouncer } from '../../internal/useAnnouncer.js';\nimport '../Text/index.js';\nimport { Text } from '../Text/Text.js';\n\nconst TextInput = /*#__PURE__*/React__default.forwardRef(function TextInput(_ref, ref) {\n  let {\n    className,\n    disabled = false,\n    helperText,\n    hideLabel,\n    id,\n    inline = false,\n    invalid = false,\n    invalidText,\n    labelText,\n    light,\n    onChange = () => {},\n    onClick = () => {},\n    placeholder,\n    readOnly,\n    size,\n    type = 'text',\n    warn = false,\n    warnText,\n    enableCounter = false,\n    maxCount,\n    slug,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const {\n    defaultValue,\n    value\n  } = rest;\n  const [textCount, setTextCount] = useState(defaultValue?.toString().length || value?.toString().length || 0);\n  const normalizedProps = useNormalizedInputProps({\n    id,\n    readOnly,\n    disabled,\n    invalid,\n    invalidText,\n    warn,\n    warnText\n  });\n  const textInputClasses = cx(`${prefix}--text-input`, {\n    [`${prefix}--text-input--light`]: light,\n    [`${prefix}--text-input--invalid`]: normalizedProps.invalid,\n    [`${prefix}--text-input--warning`]: normalizedProps.warn,\n    [`${prefix}--text-input--${size}`]: size,\n    // TODO: V12 - Remove this class\n    [`${prefix}--layout--size-${size}`]: size\n  });\n  const sharedTextInputProps = {\n    id,\n    onChange: evt => {\n      if (!normalizedProps.disabled) {\n        setTextCount(evt.target.value?.length);\n        onChange(evt);\n      }\n    },\n    onClick: evt => {\n      if (!normalizedProps.disabled) {\n        onClick(evt);\n      }\n    },\n    placeholder,\n    type,\n    ref,\n    className: textInputClasses,\n    title: placeholder,\n    disabled: normalizedProps.disabled,\n    readOnly,\n    ['aria-describedby']: helperText && normalizedProps.helperId,\n    ...rest\n  };\n  if (enableCounter) {\n    sharedTextInputProps.maxLength = maxCount;\n  }\n  const inputWrapperClasses = cx([cx(`${prefix}--form-item`, className)], `${prefix}--text-input-wrapper`, {\n    [`${prefix}--text-input-wrapper--readonly`]: readOnly,\n    [`${prefix}--text-input-wrapper--light`]: light,\n    [`${prefix}--text-input-wrapper--inline`]: inline,\n    [`${prefix}--text-input-wrapper--inline--invalid`]: inline && normalizedProps.invalid\n  });\n  const labelClasses = cx(`${prefix}--label`, {\n    [`${prefix}--visually-hidden`]: hideLabel,\n    [`${prefix}--label--disabled`]: normalizedProps.disabled,\n    [`${prefix}--label--inline`]: inline,\n    [`${prefix}--label--inline--${size}`]: inline && !!size\n  });\n  const helperTextClasses = cx(`${prefix}--form__helper-text`, {\n    [`${prefix}--form__helper-text--disabled`]: normalizedProps.disabled,\n    [`${prefix}--form__helper-text--inline`]: inline\n  });\n  const fieldOuterWrapperClasses = cx(`${prefix}--text-input__field-outer-wrapper`, {\n    [`${prefix}--text-input__field-outer-wrapper--inline`]: inline\n  });\n  const fieldWrapperClasses = cx(`${prefix}--text-input__field-wrapper`, {\n    [`${prefix}--text-input__field-wrapper--warning`]: normalizedProps.warn,\n    [`${prefix}--text-input__field-wrapper--slug`]: slug\n  });\n  const iconClasses = cx({\n    [`${prefix}--text-input__invalid-icon`]: normalizedProps.invalid || normalizedProps.warn,\n    [`${prefix}--text-input__invalid-icon--warning`]: normalizedProps.warn\n  });\n  const counterClasses = cx(`${prefix}--label`, {\n    [`${prefix}--label--disabled`]: disabled,\n    [`${prefix}--text-input__label-counter`]: true\n  });\n  const counter = enableCounter && maxCount ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    className: counterClasses\n  }, `${textCount}/${maxCount}`) : null;\n  const label = labelText ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"label\",\n    htmlFor: id,\n    className: labelClasses\n  }, labelText) : null;\n  const labelWrapper = /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--text-input__label-wrapper`\n  }, label, counter);\n  const helper = helperText ? /*#__PURE__*/React__default.createElement(Text, {\n    as: \"div\",\n    id: normalizedProps.helperId,\n    className: helperTextClasses\n  }, helperText) : null;\n  const input = /*#__PURE__*/React__default.createElement(\"input\", textInputProps({\n    sharedTextInputProps,\n    invalid: normalizedProps.invalid,\n    invalidId: normalizedProps.invalidId,\n    warn: normalizedProps.warn,\n    warnId: normalizedProps.warnId\n  }));\n  const {\n    isFluid\n  } = useContext(FormContext);\n  const announcerRef = useRef(null);\n  const [prevAnnouncement, setPrevAnnouncement] = useState('');\n  const ariaAnnouncement = useAnnouncer(textCount, maxCount);\n  useEffect(() => {\n    if (ariaAnnouncement && ariaAnnouncement !== prevAnnouncement) {\n      const announcer = announcerRef.current;\n      if (announcer) {\n        // Clear the content first\n        announcer.textContent = '';\n        // Set the new content after a small delay\n        const timeoutId = setTimeout(() => {\n          if (announcer) {\n            announcer.textContent = ariaAnnouncement;\n            setPrevAnnouncement(ariaAnnouncement);\n          }\n        }, 1000);\n        // clear the timeout\n        return () => {\n          if (timeoutId) {\n            clearTimeout(timeoutId);\n          }\n        };\n      }\n    }\n  }, [ariaAnnouncement, prevAnnouncement]);\n  const Icon = normalizedProps.icon;\n\n  // Slug is always size `mini`\n  let normalizedSlug;\n  if (slug && slug['type']?.displayName === 'Slug') {\n    normalizedSlug = /*#__PURE__*/React__default.cloneElement(slug, {\n      size: 'mini'\n    });\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: inputWrapperClasses\n  }, !inline ? labelWrapper : /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--text-input__label-helper-wrapper`\n  }, labelWrapper, !isFluid && (normalizedProps.validation || helper)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: fieldOuterWrapperClasses\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: fieldWrapperClasses,\n    \"data-invalid\": normalizedProps.invalid || null\n  }, Icon && /*#__PURE__*/React__default.createElement(Icon, {\n    className: iconClasses\n  }), input, normalizedSlug, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: `${prefix}--text-input__counter-alert`,\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\",\n    ref: announcerRef\n  }, ariaAnnouncement), isFluid && /*#__PURE__*/React__default.createElement(\"hr\", {\n    className: `${prefix}--text-input__divider`\n  }), isFluid && !inline && normalizedProps.validation), !isFluid && !inline && (normalizedProps.validation || helper)));\n});\nTextInput.displayName = 'TextInput';\nTextInput.PasswordInput = PasswordInput;\nTextInput.ControlledPasswordInput = ControlledPasswordInput;\nTextInput.propTypes = {\n  /**\n   * Specify an optional className to be applied to the `<input>` node\n   */\n  className: PropTypes.string,\n  /**\n   * Optionally provide the default value of the `<input>`\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify whether the `<input>` should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify whether to display the character counter\n   */\n  enableCounter: PropTypes.bool,\n  /**\n   * Provide text that is used alongside the control label for additional help\n   */\n  helperText: PropTypes.node,\n  /**\n   * Specify whether you want the underlying label to be visually hidden\n   */\n  hideLabel: PropTypes.bool,\n  /**\n   * Specify a custom `id` for the `<input>`\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * `true` to use the inline version.\n   */\n  inline: PropTypes.bool,\n  /**\n   * Specify whether the control is currently invalid\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Provide the text that will be read by a screen reader when visiting this\n   * control\n   */\n  labelText: PropTypes.node.isRequired,\n  /**\n   * `true` to use the light version. For use on $ui-01 backgrounds only.\n   * Don't use this to make tile background color same as container background color.\n   */\n  light: deprecate(PropTypes.bool, 'The `light` prop for `TextInput` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * Max character count allowed for the input. This is needed in order for enableCounter to display\n   */\n  maxCount: PropTypes.number,\n  /**\n   * Optionally provide an `onChange` handler that is called whenever `<input>`\n   * is updated\n   */\n  onChange: PropTypes.func,\n  /**\n   * Optionally provide an `onClick` handler that is called whenever the\n   * `<input>` is clicked\n   */\n  onClick: PropTypes.func,\n  /**\n   * Specify the placeholder attribute for the `<input>`\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Whether the input should be read-only\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Specify the size of the Text Input. Currently supports the following:\n   */\n  size: PropTypes.oneOf(['sm', 'md', 'lg']),\n  /**\n   * **Experimental**: Provide a `Slug` component to be rendered inside the `TextInput` component\n   */\n  slug: PropTypes.node,\n  /**\n   * Specify the type of the `<input>`\n   */\n  type: PropTypes.string,\n  /**\n   * Specify the value of the `<input>`\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\n\nexport { TextInput as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}