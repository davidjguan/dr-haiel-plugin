{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { match } from '../../../internal/keyboard/match.js';\nimport { Enter, ArrowLeft, ArrowRight, ArrowDown } from '../../../internal/keyboard/keys.js';\n\n/**\n * @param {object} config Plugin configuration.\n * @returns {Plugin} A Flatpickr plugin to fix Flatpickr's behavior of certain events.\n */\nvar carbonFlatpickrFixEventsPlugin = config => fp => {\n  const {\n    inputFrom,\n    inputTo,\n    lastStartValue\n  } = config;\n  /**\n   * Handles `click` outside to close calendar\n   */\n  const handleClickOutside = event => {\n    if (!fp.isOpen || fp.calendarContainer.contains(event.target) || event.target === inputFrom || event.target === inputTo) {\n      return;\n    }\n    fp.close();\n  };\n  /**\n   * Handles `keydown` event.\n   */\n  const handleKeydown = event => {\n    const {\n      target\n    } = event;\n    if (inputFrom === target || inputTo === target) {\n      if (match(event, Enter)) {\n        // Makes sure the hitting enter key picks up pending values of both `<input>`\n        // Workaround for: https://github.com/flatpickr/flatpickr/issues/1942\n        fp.setDate([inputFrom.value, inputTo && inputTo.value], true, fp.config.dateFormat);\n        event.stopPropagation();\n      } else if (match(event, ArrowLeft) || match(event, ArrowRight)) {\n        // Prevents Flatpickr code from canceling the event if left/right arrow keys are hit on `<input>`,\n        // so user can move the keyboard cursor for editing dates\n        // Workaround for: https://github.com/flatpickr/flatpickr/issues/1943\n        event.stopPropagation();\n      } else if (match(event, ArrowDown)) {\n        event.preventDefault();\n        fp.open();\n      } else if (!fp.config.allowInput) {\n        // We override the default behaviour of Flatpickr, ideally when allowInput is set to false,\n        // the Delete/Backspace button clears all of the date, which we don't want, hence\n        // we stop event bubbling and the default Flatpickr's onChange behaviour here itself\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    }\n  };\n  const parseDateWithFormat = dateStr => fp.parseDate(dateStr, fp.config.dateFormat);\n\n  /**\n   * Handles `blur` event.\n   *\n   * For whatever reason, manual changes within the `to` input do not update the\n   * calendar on blur. If a manual change is made within the input, this block will\n   * set the date again, triggering the calendar to update.\n   */\n  const handleBlur = event => {\n    const {\n      target\n    } = event;\n\n    // Only fall into this logic if the event is on the `to` input and there is a\n    // `to` date selected\n    if (inputTo === target && fp.selectedDates[1]) {\n      // Using getTime() enables the ability to more readily compare the date currently\n      // selected in the calendar and the date currently in the value of the input\n      const withoutTime = date => date.setHours(0, 0, 0, 0);\n      const selectedToDate = withoutTime(new Date(fp.selectedDates[1]));\n      const currentValueToDate = withoutTime(parseDateWithFormat(inputTo.value));\n\n      // The date should only be set if both dates are valid dates, and they don't match.\n      // When they don't match, this indiciates that the date selected in the calendar is stale,\n      // and the current value in the input should be set for the calendar to update.\n      if (selectedToDate && currentValueToDate && selectedToDate !== currentValueToDate) {\n        // Update the calendar with the value of the `to` date input\n        fp.setDate([inputFrom.value, inputTo && inputTo.value], true, fp.config.dateFormat);\n      }\n    }\n    const isValidDate = date => date.toString() !== 'Invalid Date';\n    // save end date in calendar inmediately after it's been written down\n    if (inputTo === target && fp.selectedDates.length === 1 && inputTo.value) {\n      if (isValidDate(parseDateWithFormat(inputTo.value))) {\n        fp.setDate([inputFrom.value, inputTo.value], true, fp.config.dateFormat);\n      }\n    }\n\n    // overriding the flatpickr bug where the startDate gets deleted on blur\n    if (inputTo === target && !inputFrom.value && lastStartValue.current) {\n      if (isValidDate(parseDateWithFormat(lastStartValue.current))) {\n        inputFrom.value = lastStartValue.current;\n        if (inputTo.value) {\n          fp.setDate([inputFrom.value, inputTo.value], true, fp.config.dateFormat);\n        }\n      }\n    }\n  };\n\n  /**\n   * Releases event listeners used in this Flatpickr plugin.\n   */\n  const release = () => {\n    const {\n      inputFrom,\n      inputTo\n    } = config;\n    if (inputTo) {\n      inputTo.removeEventListener('keydown', handleKeydown, true);\n      inputTo.removeEventListener('blur', handleBlur, true);\n    }\n    inputFrom.removeEventListener('keydown', handleKeydown, true);\n    document.removeEventListener('click', handleClickOutside, true);\n  };\n\n  /**\n   * Sets up event listeners used for this Flatpickr plugin.\n   */\n  const init = () => {\n    release();\n    const {\n      inputFrom,\n      inputTo\n    } = config;\n    inputFrom.addEventListener('keydown', handleKeydown, true);\n    if (inputTo) {\n      inputTo.addEventListener('keydown', handleKeydown, true);\n      inputTo.addEventListener('blur', handleBlur, true);\n    }\n    document.addEventListener('click', handleClickOutside, true);\n  };\n\n  /**\n   * Registers this Flatpickr plugin.\n   */\n  const register = () => {\n    fp.loadedPlugins.push('carbonFlatpickrFixEventsPlugin');\n  };\n  return {\n    onReady: [register, init],\n    onDestroy: [release]\n  };\n};\nexport { carbonFlatpickrFixEventsPlugin as default };","map":{"version":3,"names":["match","Enter","ArrowLeft","ArrowRight","ArrowDown","carbonFlatpickrFixEventsPlugin","config","fp","inputFrom","inputTo","lastStartValue","handleClickOutside","event","isOpen","calendarContainer","contains","target","close","handleKeydown","setDate","value","dateFormat","stopPropagation","preventDefault","open","allowInput","parseDateWithFormat","dateStr","parseDate","handleBlur","selectedDates","withoutTime","date","setHours","selectedToDate","Date","currentValueToDate","isValidDate","toString","length","current","release","removeEventListener","document","init","addEventListener","register","loadedPlugins","push","onReady","onDestroy","default"],"sources":["/Users/davidguan/Local Sites/e/app/public/wp-content/plugins/drhaiel/ls_uhcc_bot_fe/node_modules/@carbon/react/es/components/DatePicker/plugins/fixEventsPlugin.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { match } from '../../../internal/keyboard/match.js';\nimport { Enter, ArrowLeft, ArrowRight, ArrowDown } from '../../../internal/keyboard/keys.js';\n\n/**\n * @param {object} config Plugin configuration.\n * @returns {Plugin} A Flatpickr plugin to fix Flatpickr's behavior of certain events.\n */\nvar carbonFlatpickrFixEventsPlugin = (config => fp => {\n  const {\n    inputFrom,\n    inputTo,\n    lastStartValue\n  } = config;\n  /**\n   * Handles `click` outside to close calendar\n   */\n  const handleClickOutside = event => {\n    if (!fp.isOpen || fp.calendarContainer.contains(event.target) || event.target === inputFrom || event.target === inputTo) {\n      return;\n    }\n    fp.close();\n  };\n  /**\n   * Handles `keydown` event.\n   */\n  const handleKeydown = event => {\n    const {\n      target\n    } = event;\n    if (inputFrom === target || inputTo === target) {\n      if (match(event, Enter)) {\n        // Makes sure the hitting enter key picks up pending values of both `<input>`\n        // Workaround for: https://github.com/flatpickr/flatpickr/issues/1942\n        fp.setDate([inputFrom.value, inputTo && inputTo.value], true, fp.config.dateFormat);\n        event.stopPropagation();\n      } else if (match(event, ArrowLeft) || match(event, ArrowRight)) {\n        // Prevents Flatpickr code from canceling the event if left/right arrow keys are hit on `<input>`,\n        // so user can move the keyboard cursor for editing dates\n        // Workaround for: https://github.com/flatpickr/flatpickr/issues/1943\n        event.stopPropagation();\n      } else if (match(event, ArrowDown)) {\n        event.preventDefault();\n        fp.open();\n      } else if (!fp.config.allowInput) {\n        // We override the default behaviour of Flatpickr, ideally when allowInput is set to false,\n        // the Delete/Backspace button clears all of the date, which we don't want, hence\n        // we stop event bubbling and the default Flatpickr's onChange behaviour here itself\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    }\n  };\n  const parseDateWithFormat = dateStr => fp.parseDate(dateStr, fp.config.dateFormat);\n\n  /**\n   * Handles `blur` event.\n   *\n   * For whatever reason, manual changes within the `to` input do not update the\n   * calendar on blur. If a manual change is made within the input, this block will\n   * set the date again, triggering the calendar to update.\n   */\n  const handleBlur = event => {\n    const {\n      target\n    } = event;\n\n    // Only fall into this logic if the event is on the `to` input and there is a\n    // `to` date selected\n    if (inputTo === target && fp.selectedDates[1]) {\n      // Using getTime() enables the ability to more readily compare the date currently\n      // selected in the calendar and the date currently in the value of the input\n      const withoutTime = date => date.setHours(0, 0, 0, 0);\n      const selectedToDate = withoutTime(new Date(fp.selectedDates[1]));\n      const currentValueToDate = withoutTime(parseDateWithFormat(inputTo.value));\n\n      // The date should only be set if both dates are valid dates, and they don't match.\n      // When they don't match, this indiciates that the date selected in the calendar is stale,\n      // and the current value in the input should be set for the calendar to update.\n      if (selectedToDate && currentValueToDate && selectedToDate !== currentValueToDate) {\n        // Update the calendar with the value of the `to` date input\n        fp.setDate([inputFrom.value, inputTo && inputTo.value], true, fp.config.dateFormat);\n      }\n    }\n    const isValidDate = date => date.toString() !== 'Invalid Date';\n    // save end date in calendar inmediately after it's been written down\n    if (inputTo === target && fp.selectedDates.length === 1 && inputTo.value) {\n      if (isValidDate(parseDateWithFormat(inputTo.value))) {\n        fp.setDate([inputFrom.value, inputTo.value], true, fp.config.dateFormat);\n      }\n    }\n\n    // overriding the flatpickr bug where the startDate gets deleted on blur\n    if (inputTo === target && !inputFrom.value && lastStartValue.current) {\n      if (isValidDate(parseDateWithFormat(lastStartValue.current))) {\n        inputFrom.value = lastStartValue.current;\n        if (inputTo.value) {\n          fp.setDate([inputFrom.value, inputTo.value], true, fp.config.dateFormat);\n        }\n      }\n    }\n  };\n\n  /**\n   * Releases event listeners used in this Flatpickr plugin.\n   */\n  const release = () => {\n    const {\n      inputFrom,\n      inputTo\n    } = config;\n    if (inputTo) {\n      inputTo.removeEventListener('keydown', handleKeydown, true);\n      inputTo.removeEventListener('blur', handleBlur, true);\n    }\n    inputFrom.removeEventListener('keydown', handleKeydown, true);\n    document.removeEventListener('click', handleClickOutside, true);\n  };\n\n  /**\n   * Sets up event listeners used for this Flatpickr plugin.\n   */\n  const init = () => {\n    release();\n    const {\n      inputFrom,\n      inputTo\n    } = config;\n    inputFrom.addEventListener('keydown', handleKeydown, true);\n    if (inputTo) {\n      inputTo.addEventListener('keydown', handleKeydown, true);\n      inputTo.addEventListener('blur', handleBlur, true);\n    }\n    document.addEventListener('click', handleClickOutside, true);\n  };\n\n  /**\n   * Registers this Flatpickr plugin.\n   */\n  const register = () => {\n    fp.loadedPlugins.push('carbonFlatpickrFixEventsPlugin');\n  };\n  return {\n    onReady: [register, init],\n    onDestroy: [release]\n  };\n});\n\nexport { carbonFlatpickrFixEventsPlugin as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}