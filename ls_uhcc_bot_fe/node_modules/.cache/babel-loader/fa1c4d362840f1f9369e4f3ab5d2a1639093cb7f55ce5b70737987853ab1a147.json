{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport React__default from 'react';\nimport PropTypes from 'prop-types';\nimport { Close } from '@carbon/icons-react';\nimport { usePrefix } from '../../internal/usePrefix.js';\nvar _Close, _Close2;\nconst translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\n\n/**\n * Message ids that will be passed to translateWithId().\n */\n\nconst defaultTranslations = {\n  [translationIds['clear.all']]: 'Clear all selected items',\n  [translationIds['clear.selection']]: 'Clear selected item'\n};\nconst defaultTranslateWithId = id => defaultTranslations[id];\n\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\nconst ListBoxSelection = _ref => {\n  let {\n    clearSelection,\n    selectionCount,\n    translateWithId: t = defaultTranslateWithId,\n    disabled,\n    onClearSelection,\n    readOnly\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx(\"\".concat(prefix, \"--list-box__selection\"), {\n    [\"\".concat(prefix, \"--tag--filter\")]: selectionCount,\n    [\"\".concat(prefix, \"--list-box__selection--multi\")]: selectionCount\n  });\n  const handleOnClick = event => {\n    event.stopPropagation();\n    if (disabled || readOnly) {\n      return;\n    }\n    clearSelection(event);\n    if (onClearSelection) {\n      onClearSelection(event);\n    }\n  };\n  const description = selectionCount ? t('clear.all') : t('clear.selection');\n  const tagClasses = cx(\"\".concat(prefix, \"--tag\"), \"\".concat(prefix, \"--tag--filter\"), \"\".concat(prefix, \"--tag--high-contrast\"), {\n    [\"\".concat(prefix, \"--tag--disabled\")]: disabled\n  });\n\n  /* eslint-disable jsx-a11y/click-events-have-key-events */\n  return selectionCount ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: tagClasses\n  }, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--tag__label\"),\n    title: \"\".concat(selectionCount)\n  }, selectionCount), /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: -1,\n    className: \"\".concat(prefix, \"--tag__close-icon\"),\n    onClick: handleOnClick,\n    \"aria-label\": t('clear.all'),\n    title: description,\n    \"aria-disabled\": readOnly ? true : undefined\n  }, _Close || (_Close = /*#__PURE__*/React__default.createElement(Close, null)))) : /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    className: className,\n    tabIndex: -1,\n    onClick: handleOnClick,\n    \"aria-label\": description,\n    title: description\n  }, selectionCount, _Close2 || (_Close2 = /*#__PURE__*/React__default.createElement(Close, null)));\n};\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: PropTypes.func.isRequired,\n  /**\n   * Specify whether or not the clear selection element should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify an optional `onClearSelection` handler that is called when the underlying\n   * element is cleared\n   */\n  onClearSelection: PropTypes.func,\n  /**\n   * Whether or not the Dropdown is readonly\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: PropTypes.number,\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func\n};\nexport { ListBoxSelection as default, translationIds };","map":{"version":3,"names":["cx","React__default","PropTypes","Close","usePrefix","_Close","_Close2","translationIds","defaultTranslations","defaultTranslateWithId","id","ListBoxSelection","_ref","clearSelection","selectionCount","translateWithId","t","disabled","onClearSelection","readOnly","prefix","className","concat","handleOnClick","event","stopPropagation","description","tagClasses","createElement","title","role","tabIndex","onClick","undefined","propTypes","func","isRequired","bool","number","default"],"sources":["/Users/davidguan/Local Sites/e/app/public/wp-content/plugins/drhaiel/ls_uhcc_bot_fe/node_modules/@carbon/react/es/components/ListBox/ListBoxSelection.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport cx from 'classnames';\nimport React__default from 'react';\nimport PropTypes from 'prop-types';\nimport { Close } from '@carbon/icons-react';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\nvar _Close, _Close2;\nconst translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\n\n/**\n * Message ids that will be passed to translateWithId().\n */\n\nconst defaultTranslations = {\n  [translationIds['clear.all']]: 'Clear all selected items',\n  [translationIds['clear.selection']]: 'Clear selected item'\n};\nconst defaultTranslateWithId = id => defaultTranslations[id];\n\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\nconst ListBoxSelection = _ref => {\n  let {\n    clearSelection,\n    selectionCount,\n    translateWithId: t = defaultTranslateWithId,\n    disabled,\n    onClearSelection,\n    readOnly\n  } = _ref;\n  const prefix = usePrefix();\n  const className = cx(`${prefix}--list-box__selection`, {\n    [`${prefix}--tag--filter`]: selectionCount,\n    [`${prefix}--list-box__selection--multi`]: selectionCount\n  });\n  const handleOnClick = event => {\n    event.stopPropagation();\n    if (disabled || readOnly) {\n      return;\n    }\n    clearSelection(event);\n    if (onClearSelection) {\n      onClearSelection(event);\n    }\n  };\n  const description = selectionCount ? t('clear.all') : t('clear.selection');\n  const tagClasses = cx(`${prefix}--tag`, `${prefix}--tag--filter`, `${prefix}--tag--high-contrast`, {\n    [`${prefix}--tag--disabled`]: disabled\n  });\n\n  /* eslint-disable jsx-a11y/click-events-have-key-events */\n  return selectionCount ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: tagClasses\n  }, /*#__PURE__*/React__default.createElement(\"span\", {\n    className: `${prefix}--tag__label`,\n    title: `${selectionCount}`\n  }, selectionCount), /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: -1,\n    className: `${prefix}--tag__close-icon`,\n    onClick: handleOnClick,\n    \"aria-label\": t('clear.all'),\n    title: description,\n    \"aria-disabled\": readOnly ? true : undefined\n  }, _Close || (_Close = /*#__PURE__*/React__default.createElement(Close, null)))) : /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    className: className,\n    tabIndex: -1,\n    onClick: handleOnClick,\n    \"aria-label\": description,\n    title: description\n  }, selectionCount, _Close2 || (_Close2 = /*#__PURE__*/React__default.createElement(Close, null)));\n};\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: PropTypes.func.isRequired,\n  /**\n   * Specify whether or not the clear selection element should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify an optional `onClearSelection` handler that is called when the underlying\n   * element is cleared\n   */\n  onClearSelection: PropTypes.func,\n  /**\n   * Whether or not the Dropdown is readonly\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: PropTypes.number,\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func\n};\n\nexport { ListBoxSelection as default, translationIds };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}