/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var PropTypes = require('prop-types');
var cx = require('classnames');
var iconsReact = require('@carbon/icons-react');
var react = require('@floating-ui/react');
var index = require('../../IconButton/index.js');
var Menu = require('../../Menu/Menu.js');
require('../../Menu/MenuItem.js');
var mergeRefs = require('../../../tools/mergeRefs.js');
var useId = require('../../../internal/useId.js');
var usePrefix = require('../../../internal/usePrefix.js');
var useAttachedMenu = require('../../../internal/useAttachedMenu.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

const defaultSize = 'md';
const OverflowMenu = /*#__PURE__*/React__default["default"].forwardRef(function OverflowMenu(_ref, forwardRef) {
  let {
    autoAlign = false,
    children,
    className,
    label = 'Options',
    renderIcon: IconElement = iconsReact.OverflowMenuVertical,
    size = defaultSize,
    menuAlignment = 'bottom-start',
    tooltipAlignment,
    ...rest
  } = _ref;
  const {
    refs,
    floatingStyles,
    placement,
    middlewareData
  } = react.useFloating(autoAlign ? {
    placement: menuAlignment,
    // The floating element is positioned relative to its nearest
    // containing block (usually the viewport). It will in many cases also
    // “break” the floating element out of a clipping ancestor.
    // https://floating-ui.com/docs/misc#clipping
    strategy: 'fixed',
    // Middleware order matters, arrow should be last
    middleware: [react.flip({
      fallbackAxisSideDirection: 'start',
      fallbackPlacements: ['top-start', 'top-end', 'bottom-start', 'bottom-end']
    })],
    whileElementsMounted: react.autoUpdate
  } : {} // When autoAlign is turned off, floating-ui will not be used
  );
  const id = useId.useId('overflowmenu');
  const prefix = usePrefix.usePrefix();
  const triggerRef = React.useRef(null);
  const {
    open,
    x,
    y,
    handleClick: hookOnClick,
    handleMousedown,
    handleClose
  } = useAttachedMenu.useAttachedMenu(triggerRef);
  React.useEffect(() => {
    if (autoAlign) {
      Object.keys(floatingStyles).forEach(style => {
        if (refs.floating.current) {
          refs.floating.current.style[style] = floatingStyles[style];
        }
      });
    }
  }, [floatingStyles, autoAlign, refs.floating, open, placement, middlewareData]);
  function handleTriggerClick() {
    if (triggerRef.current) {
      hookOnClick();
    }
  }
  const containerClasses = cx__default["default"](className, `${prefix}--overflow-menu__container`);
  const menuClasses = cx__default["default"](`${prefix}--overflow-menu__${menuAlignment}`);
  const triggerClasses = cx__default["default"](`${prefix}--overflow-menu`, {
    [`${prefix}--overflow-menu--open`]: open
  }, size !== defaultSize && `${prefix}--overflow-menu--${size}`);
  const floatingRef = mergeRefs["default"](triggerRef, refs.setReference);
  return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({}, rest, {
    className: containerClasses,
    "aria-owns": open ? id : undefined,
    ref: forwardRef
  }), /*#__PURE__*/React__default["default"].createElement(index.IconButton, {
    "aria-controls": open ? id : undefined,
    "aria-haspopup": true,
    "aria-expanded": open,
    className: triggerClasses,
    onClick: handleTriggerClick,
    onMouseDown: handleMousedown,
    ref: floatingRef,
    label: label,
    align: tooltipAlignment
  }, /*#__PURE__*/React__default["default"].createElement(IconElement, {
    className: `${prefix}--overflow-menu__icon`
  })), /*#__PURE__*/React__default["default"].createElement(Menu.Menu, {
    containerRef: triggerRef,
    ref: refs.setFloating,
    menuAlignment: menuAlignment,
    className: menuClasses,
    id: id,
    size: size,
    legacyAutoalign: !autoAlign,
    open: open,
    onClose: handleClose,
    x: x,
    y: y,
    label: label
  }, children));
});
OverflowMenu.propTypes = {
  /**
   * **Experimental**: Will attempt to automatically align the floating element to avoid collisions with the viewport and being clipped by ancestor elements.
   */
  autoAlign: PropTypes__default["default"].bool,
  /**
   * A collection of MenuItems to be rendered within this OverflowMenu.
   */
  children: PropTypes__default["default"].node,
  /**
   * Additional CSS class names for the trigger button.
   */
  className: PropTypes__default["default"].string,
  /**
   * A label describing the options available. Is used in the trigger tooltip and as the menu's accessible label.
   */
  label: PropTypes__default["default"].string,
  /**
   * Experimental property. Specify how the menu should align with the button element
   */
  menuAlignment: PropTypes__default["default"].oneOf(['top-start', 'top-end', 'bottom-start', 'bottom-end']),
  /**
   * Optionally provide a custom icon to be rendered on the trigger button.
   */
  // @ts-expect-error: PropTypes are not expressive enough to cover this case
  renderIcon: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].object]),
  /**
   * Specify the size of the menu, from a list of available sizes.
   */
  size: PropTypes__default["default"].oneOf(['sm', 'md', 'lg']),
  /**
   * Specify how the trigger tooltip should be aligned.
   */
  tooltipAlignment: PropTypes__default["default"].oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'right'])
};

exports.OverflowMenu = OverflowMenu;
